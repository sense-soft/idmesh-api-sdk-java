/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.api;

import cn.idmesh.ApiCallback;
import cn.idmesh.ApiClient;
import cn.idmesh.ApiException;
import cn.idmesh.ApiResponse;
import cn.idmesh.Configuration;
import cn.idmesh.Pair;

import com.google.gson.reflect.TypeToken;


import cn.idmesh.model.App;
import cn.idmesh.model.AppConfigRet;
import cn.idmesh.model.AppSubAccount;
import cn.idmesh.model.AppSubAccountWithPage;
import cn.idmesh.model.AppWithPage;
import cn.idmesh.model.CommonRet;
import cn.idmesh.model.CreateAccount200Response;
import cn.idmesh.model.CreateAccountRequest;
import cn.idmesh.model.CreateAppIDPReq;
import cn.idmesh.model.CreateAppReq;
import cn.idmesh.model.DeleteAppRet;
import cn.idmesh.model.Disable200Response;
import cn.idmesh.model.EmptyObject;
import cn.idmesh.model.EnableAppProtocolRet;
import cn.idmesh.model.EnableAppRet;
import cn.idmesh.model.GetAccounts200Response;
import cn.idmesh.model.ModifyAccountRequest;
import cn.idmesh.model.ModifyAppConfigReq;
import cn.idmesh.model.ModifyAppConfigRet;
import cn.idmesh.model.ModifyAppProtocol;
import cn.idmesh.model.ModifyAppReq;
import cn.idmesh.model.ModifyAppRet;
import cn.idmesh.model.RefreshAppSecretRet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call callListCall(String name, String type, String pageSort, String types, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String name, String type, String pageSort, String types, final ApiCallback _callback) throws ApiException {
        return callListCall(name, type, pageSort, types, _callback);

    }


    private ApiResponse<AppWithPage> callListWithHttpInfo(String name, String type, String pageSort, String types) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(name, type, pageSort, types, null);
        Type localVarReturnType = new TypeToken<AppWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call callListAsync(String name, String type, String pageSort, String types, final ApiCallback<AppWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(name, type, pageSort, types, _callback);
        Type localVarReturnType = new TypeToken<AppWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcallListRequest {
        private String name;
        private String type;
        private String pageSort;
        private String types;

        private APIcallListRequest() {
        }

        /**
         * Set name
         * @param name 应用名称 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set type
         * @param type 应用类型 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序，格式：字段名[顺序] (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Set types
         * @param types 应用类型列表，逗号分隔 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest types(String types) {
            this.types = types;
            return this;
        }

        /**
         * Build call for callList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return callListCall(name, type, pageSort, types, _callback);
        }

        /**
         * Execute callList request
         * @return AppWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AppWithPage execute() throws ApiException {
            ApiResponse<AppWithPage> localVarResp = callListWithHttpInfo(name, type, pageSort, types);
            return localVarResp.getData();
        }

        /**
         * Execute callList request with HTTP info returned
         * @return ApiResponse&lt;AppWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppWithPage> executeWithHttpInfo() throws ApiException {
            return callListWithHttpInfo(name, type, pageSort, types);
        }

        /**
         * Execute callList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppWithPage> _callback) throws ApiException {
            return callListAsync(name, type, pageSort, types, _callback);
        }
    }

    /**
     * 查询应用列表
     * 
     * @return APIcallListRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcallListRequest callList() {
        return new APIcallListRequest();
    }
    private okhttp3.Call createCall(String contentType, CreateAppReq createAppReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppReq;

        // create path and map variables
        String localVarPath = "/v1/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String contentType, CreateAppReq createAppReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling create(Async)");
        }

        return createCall(contentType, createAppReq, _callback);

    }


    private ApiResponse<CommonRet> createWithHttpInfo(String contentType, CreateAppReq createAppReq) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(contentType, createAppReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String contentType, CreateAppReq createAppReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(contentType, createAppReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateRequest {
        private final String contentType;
        private CreateAppReq createAppReq;

        private APIcreateRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createAppReq
         * @param createAppReq  (optional)
         * @return APIcreateRequest
         */
        public APIcreateRequest createAppReq(CreateAppReq createAppReq) {
            this.createAppReq = createAppReq;
            return this;
        }

        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCall(contentType, createAppReq, _callback);
        }

        /**
         * Execute create request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = createWithHttpInfo(contentType, createAppReq);
            return localVarResp.getData();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return createWithHttpInfo(contentType, createAppReq);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return createAsync(contentType, createAppReq, _callback);
        }
    }

    /**
     * 创建应用
     * 
     * @param contentType  (required)
     * @return APIcreateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateRequest create(String contentType) {
        return new APIcreateRequest(contentType);
    }
    private okhttp3.Call createAccountCall(String id, String contentType, CreateAccountRequest createAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/accounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(String id, String contentType, CreateAccountRequest createAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createAccount(Async)");
        }

        return createAccountCall(id, contentType, createAccountRequest, _callback);

    }


    private ApiResponse<CreateAccount200Response> createAccountWithHttpInfo(String id, String contentType, CreateAccountRequest createAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(id, contentType, createAccountRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAccountAsync(String id, String contentType, CreateAccountRequest createAccountRequest, final ApiCallback<CreateAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(id, contentType, createAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAccountRequest {
        private final String id;
        private final String contentType;
        private CreateAccountRequest createAccountRequest;

        private APIcreateAccountRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set createAccountRequest
         * @param createAccountRequest  (optional)
         * @return APIcreateAccountRequest
         */
        public APIcreateAccountRequest createAccountRequest(CreateAccountRequest createAccountRequest) {
            this.createAccountRequest = createAccountRequest;
            return this;
        }

        /**
         * Build call for createAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAccountCall(id, contentType, createAccountRequest, _callback);
        }

        /**
         * Execute createAccount request
         * @return CreateAccount200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CreateAccount200Response execute() throws ApiException {
            ApiResponse<CreateAccount200Response> localVarResp = createAccountWithHttpInfo(id, contentType, createAccountRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAccount request with HTTP info returned
         * @return ApiResponse&lt;CreateAccount200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateAccount200Response> executeWithHttpInfo() throws ApiException {
            return createAccountWithHttpInfo(id, contentType, createAccountRequest);
        }

        /**
         * Execute createAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateAccount200Response> _callback) throws ApiException {
            return createAccountAsync(id, contentType, createAccountRequest, _callback);
        }
    }

    /**
     * 创建应用子账号
     * 
     * @param id 应用id (required)
     * @param contentType  (required)
     * @return APIcreateAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAccountRequest createAccount(String id, String contentType) {
        return new APIcreateAccountRequest(id, contentType);
    }
    private okhttp3.Call createIDPCall(String id, String contentType, CreateAppIDPReq createAppIDPReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppIDPReq;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/idp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIDPValidateBeforeCall(String id, String contentType, CreateAppIDPReq createAppIDPReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createIDP(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createIDP(Async)");
        }

        return createIDPCall(id, contentType, createAppIDPReq, _callback);

    }


    private ApiResponse<Object> createIDPWithHttpInfo(String id, String contentType, CreateAppIDPReq createAppIDPReq) throws ApiException {
        okhttp3.Call localVarCall = createIDPValidateBeforeCall(id, contentType, createAppIDPReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIDPAsync(String id, String contentType, CreateAppIDPReq createAppIDPReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIDPValidateBeforeCall(id, contentType, createAppIDPReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateIDPRequest {
        private final String id;
        private final String contentType;
        private CreateAppIDPReq createAppIDPReq;

        private APIcreateIDPRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set createAppIDPReq
         * @param createAppIDPReq  (optional)
         * @return APIcreateIDPRequest
         */
        public APIcreateIDPRequest createAppIDPReq(CreateAppIDPReq createAppIDPReq) {
            this.createAppIDPReq = createAppIDPReq;
            return this;
        }

        /**
         * Build call for createIDP
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createIDPCall(id, contentType, createAppIDPReq, _callback);
        }

        /**
         * Execute createIDP request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createIDPWithHttpInfo(id, contentType, createAppIDPReq);
            return localVarResp.getData();
        }

        /**
         * Execute createIDP request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createIDPWithHttpInfo(id, contentType, createAppIDPReq);
        }

        /**
         * Execute createIDP request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createIDPAsync(id, contentType, createAppIDPReq, _callback);
        }
    }

    /**
     * 创建应用认证源
     * 
     * @param id 应用id (required)
     * @param contentType  (required)
     * @return APIcreateIDPRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateIDPRequest createIDP(String id, String contentType) {
        return new APIcreateIDPRequest(id, contentType);
    }
    private okhttp3.Call createMFACall(String id, String contentType, EmptyObject emptyObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = emptyObject;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/mfa"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMFAValidateBeforeCall(String id, String contentType, EmptyObject emptyObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createMFA(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createMFA(Async)");
        }

        return createMFACall(id, contentType, emptyObject, _callback);

    }


    private ApiResponse<Object> createMFAWithHttpInfo(String id, String contentType, EmptyObject emptyObject) throws ApiException {
        okhttp3.Call localVarCall = createMFAValidateBeforeCall(id, contentType, emptyObject, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMFAAsync(String id, String contentType, EmptyObject emptyObject, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMFAValidateBeforeCall(id, contentType, emptyObject, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateMFARequest {
        private final String id;
        private final String contentType;
        private EmptyObject emptyObject;

        private APIcreateMFARequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set emptyObject
         * @param emptyObject  (optional)
         * @return APIcreateMFARequest
         */
        public APIcreateMFARequest emptyObject(EmptyObject emptyObject) {
            this.emptyObject = emptyObject;
            return this;
        }

        /**
         * Build call for createMFA
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMFACall(id, contentType, emptyObject, _callback);
        }

        /**
         * Execute createMFA request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createMFAWithHttpInfo(id, contentType, emptyObject);
            return localVarResp.getData();
        }

        /**
         * Execute createMFA request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createMFAWithHttpInfo(id, contentType, emptyObject);
        }

        /**
         * Execute createMFA request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createMFAAsync(id, contentType, emptyObject, _callback);
        }
    }

    /**
     * 启用应用多因素认证配置
     * 
     * @param id 应用id (required)
     * @param contentType  (required)
     * @return APIcreateMFARequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateMFARequest createMFA(String id, String contentType) {
        return new APIcreateMFARequest(id, contentType);
    }
    private okhttp3.Call createSecretsCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/secrets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecretsValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSecrets(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createSecrets(Async)");
        }

        return createSecretsCall(id, contentType, _callback);

    }


    private ApiResponse<RefreshAppSecretRet> createSecretsWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = createSecretsValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<RefreshAppSecretRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSecretsAsync(String id, String contentType, final ApiCallback<RefreshAppSecretRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecretsValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<RefreshAppSecretRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSecretsRequest {
        private final String id;
        private final String contentType;

        private APIcreateSecretsRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for createSecrets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSecretsCall(id, contentType, _callback);
        }

        /**
         * Execute createSecrets request
         * @return RefreshAppSecretRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public RefreshAppSecretRet execute() throws ApiException {
            ApiResponse<RefreshAppSecretRet> localVarResp = createSecretsWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute createSecrets request with HTTP info returned
         * @return ApiResponse&lt;RefreshAppSecretRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RefreshAppSecretRet> executeWithHttpInfo() throws ApiException {
            return createSecretsWithHttpInfo(id, contentType);
        }

        /**
         * Execute createSecrets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RefreshAppSecretRet> _callback) throws ApiException {
            return createSecretsAsync(id, contentType, _callback);
        }
    }

    /**
     * 刷新应用安全码
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APIcreateSecretsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSecretsRequest createSecrets(String id, String contentType) {
        return new APIcreateSecretsRequest(id, contentType);
    }
    private okhttp3.Call deleteCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling delete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling delete(Async)");
        }

        return deleteCall(id, contentType, _callback);

    }


    private ApiResponse<DeleteAppRet> deleteWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<DeleteAppRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String id, String contentType, final ApiCallback<DeleteAppRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<DeleteAppRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRequest {
        private final String id;
        private final String contentType;

        private APIdeleteRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(id, contentType, _callback);
        }

        /**
         * Execute delete request
         * @return DeleteAppRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public DeleteAppRet execute() throws ApiException {
            ApiResponse<DeleteAppRet> localVarResp = deleteWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;DeleteAppRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteAppRet> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(id, contentType);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteAppRet> _callback) throws ApiException {
            return deleteAsync(id, contentType, _callback);
        }
    }

    /**
     * 删除应用
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APIdeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRequest delete(String id, String contentType) {
        return new APIdeleteRequest(id, contentType);
    }
    private okhttp3.Call deleteAccountCall(String appId, String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts/{id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String appId, String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAccount(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(appId, id, contentType, _callback);

    }


    private ApiResponse<Object> deleteAccountWithHttpInfo(String appId, String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(appId, id, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAccountAsync(String appId, String id, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(appId, id, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteAccountRequest {
        private final String appId;
        private final String id;
        private final String contentType;

        private APIdeleteAccountRequest(String appId, String id, String contentType) {
            this.appId = appId;
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for deleteAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAccountCall(appId, id, contentType, _callback);
        }

        /**
         * Execute deleteAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteAccountWithHttpInfo(appId, id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteAccountWithHttpInfo(appId, id, contentType);
        }

        /**
         * Execute deleteAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteAccountAsync(appId, id, contentType, _callback);
        }
    }

    /**
     * 删除应用子账号
     * 
     * @param appId 应用id (required)
     * @param id 子账号id (required)
     * @param contentType  (required)
     * @return APIdeleteAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAccountRequest deleteAccount(String appId, String id, String contentType) {
        return new APIdeleteAccountRequest(appId, id, contentType);
    }
    private okhttp3.Call deleteIDPConfigCall(String appId, String configId, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/idp/{config_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "config_id" + "}", localVarApiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIDPConfigValidateBeforeCall(String appId, String configId, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteIDPConfig(Async)");
        }

        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteIDPConfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteIDPConfig(Async)");
        }

        return deleteIDPConfigCall(appId, configId, contentType, _callback);

    }


    private ApiResponse<Object> deleteIDPConfigWithHttpInfo(String appId, String configId, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteIDPConfigValidateBeforeCall(appId, configId, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteIDPConfigAsync(String appId, String configId, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIDPConfigValidateBeforeCall(appId, configId, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteIDPConfigRequest {
        private final String appId;
        private final String configId;
        private final String contentType;

        private APIdeleteIDPConfigRequest(String appId, String configId, String contentType) {
            this.appId = appId;
            this.configId = configId;
            this.contentType = contentType;
        }

        /**
         * Build call for deleteIDPConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIDPConfigCall(appId, configId, contentType, _callback);
        }

        /**
         * Execute deleteIDPConfig request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteIDPConfigWithHttpInfo(appId, configId, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteIDPConfig request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteIDPConfigWithHttpInfo(appId, configId, contentType);
        }

        /**
         * Execute deleteIDPConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteIDPConfigAsync(appId, configId, contentType, _callback);
        }
    }

    /**
     * 删除应用认证源
     * 
     * @param appId 应用id (required)
     * @param configId  (required)
     * @param contentType  (required)
     * @return APIdeleteIDPConfigRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteIDPConfigRequest deleteIDPConfig(String appId, String configId, String contentType) {
        return new APIdeleteIDPConfigRequest(appId, configId, contentType);
    }
    private okhttp3.Call deleteMFACall(String appId, String configId, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/mfa/{config_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "config_id" + "}", localVarApiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMFAValidateBeforeCall(String appId, String configId, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteMFA(Async)");
        }

        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteMFA(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteMFA(Async)");
        }

        return deleteMFACall(appId, configId, contentType, _callback);

    }


    private ApiResponse<Object> deleteMFAWithHttpInfo(String appId, String configId, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteMFAValidateBeforeCall(appId, configId, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMFAAsync(String appId, String configId, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMFAValidateBeforeCall(appId, configId, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteMFARequest {
        private final String appId;
        private final String configId;
        private final String contentType;

        private APIdeleteMFARequest(String appId, String configId, String contentType) {
            this.appId = appId;
            this.configId = configId;
            this.contentType = contentType;
        }

        /**
         * Build call for deleteMFA
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMFACall(appId, configId, contentType, _callback);
        }

        /**
         * Execute deleteMFA request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteMFAWithHttpInfo(appId, configId, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteMFA request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteMFAWithHttpInfo(appId, configId, contentType);
        }

        /**
         * Execute deleteMFA request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteMFAAsync(appId, configId, contentType, _callback);
        }
    }

    /**
     * 禁用应用多因素认证配置
     * 
     * @param appId 应用id (required)
     * @param configId  (required)
     * @param contentType  (required)
     * @return APIdeleteMFARequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteMFARequest deleteMFA(String appId, String configId, String contentType) {
        return new APIdeleteMFARequest(appId, configId, contentType);
    }
    private okhttp3.Call disableCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/disable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disable(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling disable(Async)");
        }

        return disableCall(id, contentType, _callback);

    }


    private ApiResponse<Disable200Response> disableWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = disableValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<Disable200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableAsync(String id, String contentType, final ApiCallback<Disable200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<Disable200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdisableRequest {
        private final String id;
        private final String contentType;

        private APIdisableRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for disable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableCall(id, contentType, _callback);
        }

        /**
         * Execute disable request
         * @return Disable200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Disable200Response execute() throws ApiException {
            ApiResponse<Disable200Response> localVarResp = disableWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute disable request with HTTP info returned
         * @return ApiResponse&lt;Disable200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Disable200Response> executeWithHttpInfo() throws ApiException {
            return disableWithHttpInfo(id, contentType);
        }

        /**
         * Execute disable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Disable200Response> _callback) throws ApiException {
            return disableAsync(id, contentType, _callback);
        }
    }

    /**
     * 禁用应用
     * 
     * @param id 应用标识 (required)
     * @param contentType  (required)
     * @return APIdisableRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdisableRequest disable(String id, String contentType) {
        return new APIdisableRequest(id, contentType);
    }
    private okhttp3.Call disableAccountCall(String appId, String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts/{id}/disable"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableAccountValidateBeforeCall(String appId, String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling disableAccount(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling disableAccount(Async)");
        }

        return disableAccountCall(appId, id, contentType, _callback);

    }


    private ApiResponse<Object> disableAccountWithHttpInfo(String appId, String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = disableAccountValidateBeforeCall(appId, id, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableAccountAsync(String appId, String id, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableAccountValidateBeforeCall(appId, id, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdisableAccountRequest {
        private final String appId;
        private final String id;
        private final String contentType;

        private APIdisableAccountRequest(String appId, String id, String contentType) {
            this.appId = appId;
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for disableAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableAccountCall(appId, id, contentType, _callback);
        }

        /**
         * Execute disableAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = disableAccountWithHttpInfo(appId, id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute disableAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return disableAccountWithHttpInfo(appId, id, contentType);
        }

        /**
         * Execute disableAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return disableAccountAsync(appId, id, contentType, _callback);
        }
    }

    /**
     * 禁用应用子账号
     * 
     * @param appId 应用id (required)
     * @param id 子账号id (required)
     * @param contentType  (required)
     * @return APIdisableAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdisableAccountRequest disableAccount(String appId, String id, String contentType) {
        return new APIdisableAccountRequest(appId, id, contentType);
    }
    private okhttp3.Call disableProtocolCall(String appId, String protocolType, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/protocols/{protocol_type}/disable"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "protocol_type" + "}", localVarApiClient.escapeString(protocolType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableProtocolValidateBeforeCall(String appId, String protocolType, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling disableProtocol(Async)");
        }

        // verify the required parameter 'protocolType' is set
        if (protocolType == null) {
            throw new ApiException("Missing the required parameter 'protocolType' when calling disableProtocol(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling disableProtocol(Async)");
        }

        return disableProtocolCall(appId, protocolType, contentType, _callback);

    }


    private ApiResponse<Object> disableProtocolWithHttpInfo(String appId, String protocolType, String contentType) throws ApiException {
        okhttp3.Call localVarCall = disableProtocolValidateBeforeCall(appId, protocolType, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableProtocolAsync(String appId, String protocolType, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableProtocolValidateBeforeCall(appId, protocolType, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdisableProtocolRequest {
        private final String appId;
        private final String protocolType;
        private final String contentType;

        private APIdisableProtocolRequest(String appId, String protocolType, String contentType) {
            this.appId = appId;
            this.protocolType = protocolType;
            this.contentType = contentType;
        }

        /**
         * Build call for disableProtocol
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableProtocolCall(appId, protocolType, contentType, _callback);
        }

        /**
         * Execute disableProtocol request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = disableProtocolWithHttpInfo(appId, protocolType, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute disableProtocol request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return disableProtocolWithHttpInfo(appId, protocolType, contentType);
        }

        /**
         * Execute disableProtocol request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return disableProtocolAsync(appId, protocolType, contentType, _callback);
        }
    }

    /**
     * 禁用应用认证协议
     * 
     * @param appId 应用 id (required)
     * @param protocolType 协议名称，如 oidc (required)
     * @param contentType  (required)
     * @return APIdisableProtocolRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdisableProtocolRequest disableProtocol(String appId, String protocolType, String contentType) {
        return new APIdisableProtocolRequest(appId, protocolType, contentType);
    }
    private okhttp3.Call disableSSOCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/sso/disable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableSSOValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableSSO(Async)");
        }

        return disableSSOCall(id, _callback);

    }


    private ApiResponse<Object> disableSSOWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = disableSSOValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableSSOAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableSSOValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdisableSSORequest {
        private final String id;

        private APIdisableSSORequest(String id) {
            this.id = id;
        }

        /**
         * Build call for disableSSO
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableSSOCall(id, _callback);
        }

        /**
         * Execute disableSSO request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = disableSSOWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute disableSSO request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return disableSSOWithHttpInfo(id);
        }

        /**
         * Execute disableSSO request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return disableSSOAsync(id, _callback);
        }
    }

    /**
     * 禁用应用单点登录
     * 
     * @param id 应用标识 (required)
     * @return APIdisableSSORequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdisableSSORequest disableSSO(String id) {
        return new APIdisableSSORequest(id);
    }
    private okhttp3.Call enableCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enable(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling enable(Async)");
        }

        return enableCall(id, contentType, _callback);

    }


    private ApiResponse<EnableAppRet> enableWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = enableValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<EnableAppRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableAsync(String id, String contentType, final ApiCallback<EnableAppRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<EnableAppRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenableRequest {
        private final String id;
        private final String contentType;

        private APIenableRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for enable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableCall(id, contentType, _callback);
        }

        /**
         * Execute enable request
         * @return EnableAppRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public EnableAppRet execute() throws ApiException {
            ApiResponse<EnableAppRet> localVarResp = enableWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute enable request with HTTP info returned
         * @return ApiResponse&lt;EnableAppRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EnableAppRet> executeWithHttpInfo() throws ApiException {
            return enableWithHttpInfo(id, contentType);
        }

        /**
         * Execute enable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EnableAppRet> _callback) throws ApiException {
            return enableAsync(id, contentType, _callback);
        }
    }

    /**
     * 启用应用
     * 
     * @param id 应用标识 (required)
     * @param contentType  (required)
     * @return APIenableRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIenableRequest enable(String id, String contentType) {
        return new APIenableRequest(id, contentType);
    }
    private okhttp3.Call enableAccountCall(String appId, String id, String id2, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts/{id}/enable"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id2));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableAccountValidateBeforeCall(String appId, String id, String id2, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling enableAccount(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableAccount(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling enableAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling enableAccount(Async)");
        }

        return enableAccountCall(appId, id, id2, contentType, _callback);

    }


    private ApiResponse<Object> enableAccountWithHttpInfo(String appId, String id, String id2, String contentType) throws ApiException {
        okhttp3.Call localVarCall = enableAccountValidateBeforeCall(appId, id, id2, contentType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableAccountAsync(String appId, String id, String id2, String contentType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableAccountValidateBeforeCall(appId, id, id2, contentType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenableAccountRequest {
        private final String appId;
        private final String id;
        private final String id2;
        private final String contentType;

        private APIenableAccountRequest(String appId, String id, String id2, String contentType) {
            this.appId = appId;
            this.id = id;
            this.id2 = id2;
            this.contentType = contentType;
        }

        /**
         * Build call for enableAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableAccountCall(appId, id, id2, contentType, _callback);
        }

        /**
         * Execute enableAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = enableAccountWithHttpInfo(appId, id, id2, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute enableAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return enableAccountWithHttpInfo(appId, id, id2, contentType);
        }

        /**
         * Execute enableAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return enableAccountAsync(appId, id, id2, contentType, _callback);
        }
    }

    /**
     * 启用应用子账号
     * 
     * @param appId 应用id (required)
     * @param id 子账号id (required)
     * @param id2  (required)
     * @param contentType  (required)
     * @return APIenableAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIenableAccountRequest enableAccount(String appId, String id, String id2, String contentType) {
        return new APIenableAccountRequest(appId, id, id2, contentType);
    }
    private okhttp3.Call enableProtocolCall(String appId, String protocolType, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/protocols/{protocol_type}/enable"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "protocol_type" + "}", localVarApiClient.escapeString(protocolType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableProtocolValidateBeforeCall(String appId, String protocolType, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling enableProtocol(Async)");
        }

        // verify the required parameter 'protocolType' is set
        if (protocolType == null) {
            throw new ApiException("Missing the required parameter 'protocolType' when calling enableProtocol(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling enableProtocol(Async)");
        }

        return enableProtocolCall(appId, protocolType, contentType, _callback);

    }


    private ApiResponse<EnableAppProtocolRet> enableProtocolWithHttpInfo(String appId, String protocolType, String contentType) throws ApiException {
        okhttp3.Call localVarCall = enableProtocolValidateBeforeCall(appId, protocolType, contentType, null);
        Type localVarReturnType = new TypeToken<EnableAppProtocolRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableProtocolAsync(String appId, String protocolType, String contentType, final ApiCallback<EnableAppProtocolRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableProtocolValidateBeforeCall(appId, protocolType, contentType, _callback);
        Type localVarReturnType = new TypeToken<EnableAppProtocolRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenableProtocolRequest {
        private final String appId;
        private final String protocolType;
        private final String contentType;

        private APIenableProtocolRequest(String appId, String protocolType, String contentType) {
            this.appId = appId;
            this.protocolType = protocolType;
            this.contentType = contentType;
        }

        /**
         * Build call for enableProtocol
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableProtocolCall(appId, protocolType, contentType, _callback);
        }

        /**
         * Execute enableProtocol request
         * @return EnableAppProtocolRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public EnableAppProtocolRet execute() throws ApiException {
            ApiResponse<EnableAppProtocolRet> localVarResp = enableProtocolWithHttpInfo(appId, protocolType, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute enableProtocol request with HTTP info returned
         * @return ApiResponse&lt;EnableAppProtocolRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EnableAppProtocolRet> executeWithHttpInfo() throws ApiException {
            return enableProtocolWithHttpInfo(appId, protocolType, contentType);
        }

        /**
         * Execute enableProtocol request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EnableAppProtocolRet> _callback) throws ApiException {
            return enableProtocolAsync(appId, protocolType, contentType, _callback);
        }
    }

    /**
     * 启用应用认证协议
     * 
     * @param appId 应用 id (required)
     * @param protocolType 协议名称，如 oidc (required)
     * @param contentType  (required)
     * @return APIenableProtocolRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIenableProtocolRequest enableProtocol(String appId, String protocolType, String contentType) {
        return new APIenableProtocolRequest(appId, protocolType, contentType);
    }
    private okhttp3.Call enableSSOCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/sso/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableSSOValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableSSO(Async)");
        }

        return enableSSOCall(id, _callback);

    }


    private ApiResponse<Object> enableSSOWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = enableSSOValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableSSOAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableSSOValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenableSSORequest {
        private final String id;

        private APIenableSSORequest(String id) {
            this.id = id;
        }

        /**
         * Build call for enableSSO
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableSSOCall(id, _callback);
        }

        /**
         * Execute enableSSO request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = enableSSOWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute enableSSO request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return enableSSOWithHttpInfo(id);
        }

        /**
         * Execute enableSSO request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return enableSSOAsync(id, _callback);
        }
    }

    /**
     * 启用应用单点登录
     * 
     * @param id 应用标识 (required)
     * @return APIenableSSORequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIenableSSORequest enableSSO(String id) {
        return new APIenableSSORequest(id);
    }
    private okhttp3.Call getCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get(Async)");
        }

        return getCall(id, _callback);

    }


    private ApiResponse<App> getWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String id, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRequest {
        private final String id;

        private APIgetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(id, _callback);
        }

        /**
         * Execute get request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            ApiResponse<App> localVarResp = getWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(id);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            return getAsync(id, _callback);
        }
    }

    /**
     * 按 ID 查询应用
     * 
     * @param id 唯一标识 (required)
     * @return APIgetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRequest get(String id) {
        return new APIgetRequest(id);
    }
    private okhttp3.Call getAccountCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts/{id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAccount(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAccount(Async)");
        }

        return getAccountCall(appId, id, _callback);

    }


    private ApiResponse<AppSubAccount> getAccountWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<AppSubAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountAsync(String appId, String id, final ApiCallback<AppSubAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<AppSubAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAccountRequest {
        private final String appId;
        private final String id;

        private APIgetAccountRequest(String appId, String id) {
            this.appId = appId;
            this.id = id;
        }

        /**
         * Build call for getAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountCall(appId, id, _callback);
        }

        /**
         * Execute getAccount request
         * @return AppSubAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AppSubAccount execute() throws ApiException {
            ApiResponse<AppSubAccount> localVarResp = getAccountWithHttpInfo(appId, id);
            return localVarResp.getData();
        }

        /**
         * Execute getAccount request with HTTP info returned
         * @return ApiResponse&lt;AppSubAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppSubAccount> executeWithHttpInfo() throws ApiException {
            return getAccountWithHttpInfo(appId, id);
        }

        /**
         * Execute getAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppSubAccount> _callback) throws ApiException {
            return getAccountAsync(appId, id, _callback);
        }
    }

    /**
     * 按 ID 查询应用子账号
     * 
     * @param appId 应用id (required)
     * @param id 子账号id (required)
     * @return APIgetAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAccountRequest getAccount(String appId, String id) {
        return new APIgetAccountRequest(appId, id);
    }
    private okhttp3.Call getAccountsCall(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, String accNameEq, String timeModifiedGt, String timeModifiedLt, String accType, String orphanedOnly, String linkedUserId, String hideSelf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/application-accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (accStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_status", accStatus));
        }

        if (accName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_name", accName));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        if (accNameEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_name[eq]", accNameEq));
        }

        if (timeModifiedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified[gt]", timeModifiedGt));
        }

        if (timeModifiedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified[lt]", timeModifiedLt));
        }

        if (accType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_type", accType));
        }

        if (orphanedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orphaned_only", orphanedOnly));
        }

        if (linkedUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_user_id", linkedUserId));
        }

        if (hideSelf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_self", hideSelf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, String accNameEq, String timeModifiedGt, String timeModifiedLt, String accType, String orphanedOnly, String linkedUserId, String hideSelf, final ApiCallback _callback) throws ApiException {
        return getAccountsCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf, _callback);

    }


    private ApiResponse<GetAccounts200Response> getAccountsWithHttpInfo(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, String accNameEq, String timeModifiedGt, String timeModifiedLt, String accType, String orphanedOnly, String linkedUserId, String hideSelf) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf, null);
        Type localVarReturnType = new TypeToken<GetAccounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountsAsync(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, String accNameEq, String timeModifiedGt, String timeModifiedLt, String accType, String orphanedOnly, String linkedUserId, String hideSelf, final ApiCallback<GetAccounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf, _callback);
        Type localVarReturnType = new TypeToken<GetAccounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAccountsRequest {
        private String appId;
        private String userId;
        private String accStatus;
        private String accName;
        private Integer pageNum;
        private Integer pageSize;
        private String pageSort;
        private String accNameEq;
        private String timeModifiedGt;
        private String timeModifiedLt;
        private String accType;
        private String orphanedOnly;
        private String linkedUserId;
        private String hideSelf;

        private APIgetAccountsRequest() {
        }

        /**
         * Set appId
         * @param appId 应用id (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest appId(String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Set userId
         * @param userId 用户id (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set accStatus
         * @param accStatus 账号状态 1-活跃 0-冻结 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest accStatus(String accStatus) {
            this.accStatus = accStatus;
            return this;
        }

        /**
         * Set accName
         * @param accName 账号名称模糊查询 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest accName(String accName) {
            this.accName = accName;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 页数 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序字段 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Set accNameEq
         * @param accNameEq 账号名称精确查询 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest accNameEq(String accNameEq) {
            this.accNameEq = accNameEq;
            return this;
        }

        /**
         * Set timeModifiedGt
         * @param timeModifiedGt 账号最近修改时间大于，rfc3339格式，需要进行 url encode (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest timeModifiedGt(String timeModifiedGt) {
            this.timeModifiedGt = timeModifiedGt;
            return this;
        }

        /**
         * Set timeModifiedLt
         * @param timeModifiedLt 账号最近修改时间小于，rfc3339格式，需要进行 url encode (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest timeModifiedLt(String timeModifiedLt) {
            this.timeModifiedLt = timeModifiedLt;
            return this;
        }

        /**
         * Set accType
         * @param accType 账号类型 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest accType(String accType) {
            this.accType = accType;
            return this;
        }

        /**
         * Set orphanedOnly
         * @param orphanedOnly 只查询无归属账号 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest orphanedOnly(String orphanedOnly) {
            this.orphanedOnly = orphanedOnly;
            return this;
        }

        /**
         * Set linkedUserId
         * @param linkedUserId 关联用户id (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest linkedUserId(String linkedUserId) {
            this.linkedUserId = linkedUserId;
            return this;
        }

        /**
         * Set hideSelf
         * @param hideSelf 隐藏当前调用者的账号信息 (optional)
         * @return APIgetAccountsRequest
         */
        public APIgetAccountsRequest hideSelf(String hideSelf) {
            this.hideSelf = hideSelf;
            return this;
        }

        /**
         * Build call for getAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountsCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf, _callback);
        }

        /**
         * Execute getAccounts request
         * @return GetAccounts200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public GetAccounts200Response execute() throws ApiException {
            ApiResponse<GetAccounts200Response> localVarResp = getAccountsWithHttpInfo(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf);
            return localVarResp.getData();
        }

        /**
         * Execute getAccounts request with HTTP info returned
         * @return ApiResponse&lt;GetAccounts200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAccounts200Response> executeWithHttpInfo() throws ApiException {
            return getAccountsWithHttpInfo(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf);
        }

        /**
         * Execute getAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAccounts200Response> _callback) throws ApiException {
            return getAccountsAsync(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, accNameEq, timeModifiedGt, timeModifiedLt, accType, orphanedOnly, linkedUserId, hideSelf, _callback);
        }
    }

    /**
     * 按条件查询应用子账号列表
     * 
     * @return APIgetAccountsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAccountsRequest getAccounts() {
        return new APIgetAccountsRequest();
    }
    private okhttp3.Call getAccountsByAppCall(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (accStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_status", accStatus));
        }

        if (accName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acc_name", accName));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsByAppValidateBeforeCall(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAccountsByApp(Async)");
        }

        return getAccountsByAppCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, _callback);

    }


    private ApiResponse<AppSubAccountWithPage> getAccountsByAppWithHttpInfo(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort) throws ApiException {
        okhttp3.Call localVarCall = getAccountsByAppValidateBeforeCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, null);
        Type localVarReturnType = new TypeToken<AppSubAccountWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountsByAppAsync(String appId, String userId, String accStatus, String accName, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback<AppSubAccountWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsByAppValidateBeforeCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, _callback);
        Type localVarReturnType = new TypeToken<AppSubAccountWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAccountsByAppRequest {
        private final String appId;
        private String userId;
        private String accStatus;
        private String accName;
        private Integer pageNum;
        private Integer pageSize;
        private String pageSort;

        private APIgetAccountsByAppRequest(String appId) {
            this.appId = appId;
        }

        /**
         * Set userId
         * @param userId 用户id (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set accStatus
         * @param accStatus 账号状态 1-活跃 0-冻结 (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest accStatus(String accStatus) {
            this.accStatus = accStatus;
            return this;
        }

        /**
         * Set accName
         * @param accName 账号名称 (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest accName(String accName) {
            this.accName = accName;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 页数 (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小 (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序字段 (optional)
         * @return APIgetAccountsByAppRequest
         */
        public APIgetAccountsByAppRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Build call for getAccountsByApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountsByAppCall(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, _callback);
        }

        /**
         * Execute getAccountsByApp request
         * @return AppSubAccountWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AppSubAccountWithPage execute() throws ApiException {
            ApiResponse<AppSubAccountWithPage> localVarResp = getAccountsByAppWithHttpInfo(appId, userId, accStatus, accName, pageNum, pageSize, pageSort);
            return localVarResp.getData();
        }

        /**
         * Execute getAccountsByApp request with HTTP info returned
         * @return ApiResponse&lt;AppSubAccountWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppSubAccountWithPage> executeWithHttpInfo() throws ApiException {
            return getAccountsByAppWithHttpInfo(appId, userId, accStatus, accName, pageNum, pageSize, pageSort);
        }

        /**
         * Execute getAccountsByApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppSubAccountWithPage> _callback) throws ApiException {
            return getAccountsByAppAsync(appId, userId, accStatus, accName, pageNum, pageSize, pageSort, _callback);
        }
    }

    /**
     * 按 APP ID 查询应用子账号列表
     * 
     * @param appId 应用id (required)
     * @return APIgetAccountsByAppRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAccountsByAppRequest getAccountsByApp(String appId) {
        return new APIgetAccountsByAppRequest(appId);
    }
    private okhttp3.Call getByDomainCall(String domain, String domainSn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (domainSn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain_sn", domainSn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByDomainValidateBeforeCall(String domain, String domainSn, final ApiCallback _callback) throws ApiException {
        return getByDomainCall(domain, domainSn, _callback);

    }


    private ApiResponse<App> getByDomainWithHttpInfo(String domain, String domainSn) throws ApiException {
        okhttp3.Call localVarCall = getByDomainValidateBeforeCall(domain, domainSn, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByDomainAsync(String domain, String domainSn, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByDomainValidateBeforeCall(domain, domainSn, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByDomainRequest {
        private String domain;
        private String domainSn;

        private APIgetByDomainRequest() {
        }

        /**
         * Set domain
         * @param domain 域名 (optional)
         * @return APIgetByDomainRequest
         */
        public APIgetByDomainRequest domain(String domain) {
            this.domain = domain;
            return this;
        }

        /**
         * Set domainSn
         * @param domainSn 域名简写 (optional)
         * @return APIgetByDomainRequest
         */
        public APIgetByDomainRequest domainSn(String domainSn) {
            this.domainSn = domainSn;
            return this;
        }

        /**
         * Build call for getByDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByDomainCall(domain, domainSn, _callback);
        }

        /**
         * Execute getByDomain request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            ApiResponse<App> localVarResp = getByDomainWithHttpInfo(domain, domainSn);
            return localVarResp.getData();
        }

        /**
         * Execute getByDomain request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            return getByDomainWithHttpInfo(domain, domainSn);
        }

        /**
         * Execute getByDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            return getByDomainAsync(domain, domainSn, _callback);
        }
    }

    /**
     * 按条件查询应用
     * 
     * @return APIgetByDomainRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByDomainRequest getByDomain() {
        return new APIgetByDomainRequest();
    }
    private okhttp3.Call getConfigCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/configs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConfig(Async)");
        }

        return getConfigCall(id, _callback);

    }


    private ApiResponse<AppConfigRet> getConfigWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppConfigRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigAsync(String id, final ApiCallback<AppConfigRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppConfigRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConfigRequest {
        private final String id;

        private APIgetConfigRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigCall(id, _callback);
        }

        /**
         * Execute getConfig request
         * @return AppConfigRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AppConfigRet execute() throws ApiException {
            ApiResponse<AppConfigRet> localVarResp = getConfigWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConfig request with HTTP info returned
         * @return ApiResponse&lt;AppConfigRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppConfigRet> executeWithHttpInfo() throws ApiException {
            return getConfigWithHttpInfo(id);
        }

        /**
         * Execute getConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppConfigRet> _callback) throws ApiException {
            return getConfigAsync(id, _callback);
        }
    }

    /**
     * 查询应用配置信息
     * 
     * @param id 应用ID (required)
     * @return APIgetConfigRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConfigRequest getConfig(String id) {
        return new APIgetConfigRequest(id);
    }
    private okhttp3.Call getProtocolCall(String appId, String protocolType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/protocols/{protocol_type}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "protocol_type" + "}", localVarApiClient.escapeString(protocolType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProtocolValidateBeforeCall(String appId, String protocolType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getProtocol(Async)");
        }

        // verify the required parameter 'protocolType' is set
        if (protocolType == null) {
            throw new ApiException("Missing the required parameter 'protocolType' when calling getProtocol(Async)");
        }

        return getProtocolCall(appId, protocolType, _callback);

    }


    private ApiResponse<Object> getProtocolWithHttpInfo(String appId, String protocolType) throws ApiException {
        okhttp3.Call localVarCall = getProtocolValidateBeforeCall(appId, protocolType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProtocolAsync(String appId, String protocolType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProtocolValidateBeforeCall(appId, protocolType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetProtocolRequest {
        private final String appId;
        private final String protocolType;

        private APIgetProtocolRequest(String appId, String protocolType) {
            this.appId = appId;
            this.protocolType = protocolType;
        }

        /**
         * Build call for getProtocol
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProtocolCall(appId, protocolType, _callback);
        }

        /**
         * Execute getProtocol request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getProtocolWithHttpInfo(appId, protocolType);
            return localVarResp.getData();
        }

        /**
         * Execute getProtocol request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getProtocolWithHttpInfo(appId, protocolType);
        }

        /**
         * Execute getProtocol request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getProtocolAsync(appId, protocolType, _callback);
        }
    }

    /**
     * 查询应用认证协议
     * 
     * @param appId 应用id (required)
     * @param protocolType 单点类型，cas、oauth2、saml、oidc、sxp (required)
     * @return APIgetProtocolRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetProtocolRequest getProtocol(String appId, String protocolType) {
        return new APIgetProtocolRequest(appId, protocolType);
    }
    private okhttp3.Call getProtocolsCall(String id, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/protocols"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProtocolsValidateBeforeCall(String id, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProtocols(Async)");
        }

        return getProtocolsCall(id, status, _callback);

    }


    private ApiResponse<List<Object>> getProtocolsWithHttpInfo(String id, String status) throws ApiException {
        okhttp3.Call localVarCall = getProtocolsValidateBeforeCall(id, status, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProtocolsAsync(String id, String status, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProtocolsValidateBeforeCall(id, status, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetProtocolsRequest {
        private final String id;
        private String status;

        private APIgetProtocolsRequest(String id) {
            this.id = id;
        }

        /**
         * Set status
         * @param status 启用状态 1, 0 (optional)
         * @return APIgetProtocolsRequest
         */
        public APIgetProtocolsRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Build call for getProtocols
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProtocolsCall(id, status, _callback);
        }

        /**
         * Execute getProtocols request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            ApiResponse<List<Object>> localVarResp = getProtocolsWithHttpInfo(id, status);
            return localVarResp.getData();
        }

        /**
         * Execute getProtocols request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            return getProtocolsWithHttpInfo(id, status);
        }

        /**
         * Execute getProtocols request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            return getProtocolsAsync(id, status, _callback);
        }
    }

    /**
     * 查询应用认证协议列表
     * 
     * @param id 应用唯一标识ID (required)
     * @return APIgetProtocolsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetProtocolsRequest getProtocols(String id) {
        return new APIgetProtocolsRequest(id);
    }
    private okhttp3.Call modifyCall(String id, String contentType, ModifyAppReq modifyAppReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAppReq;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyValidateBeforeCall(String id, String contentType, ModifyAppReq modifyAppReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modify(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modify(Async)");
        }

        return modifyCall(id, contentType, modifyAppReq, _callback);

    }


    private ApiResponse<ModifyAppRet> modifyWithHttpInfo(String id, String contentType, ModifyAppReq modifyAppReq) throws ApiException {
        okhttp3.Call localVarCall = modifyValidateBeforeCall(id, contentType, modifyAppReq, null);
        Type localVarReturnType = new TypeToken<ModifyAppRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyAsync(String id, String contentType, ModifyAppReq modifyAppReq, final ApiCallback<ModifyAppRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyValidateBeforeCall(id, contentType, modifyAppReq, _callback);
        Type localVarReturnType = new TypeToken<ModifyAppRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyRequest {
        private final String id;
        private final String contentType;
        private ModifyAppReq modifyAppReq;

        private APImodifyRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyAppReq
         * @param modifyAppReq  (optional)
         * @return APImodifyRequest
         */
        public APImodifyRequest modifyAppReq(ModifyAppReq modifyAppReq) {
            this.modifyAppReq = modifyAppReq;
            return this;
        }

        /**
         * Build call for modify
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyCall(id, contentType, modifyAppReq, _callback);
        }

        /**
         * Execute modify request
         * @return ModifyAppRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ModifyAppRet execute() throws ApiException {
            ApiResponse<ModifyAppRet> localVarResp = modifyWithHttpInfo(id, contentType, modifyAppReq);
            return localVarResp.getData();
        }

        /**
         * Execute modify request with HTTP info returned
         * @return ApiResponse&lt;ModifyAppRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModifyAppRet> executeWithHttpInfo() throws ApiException {
            return modifyWithHttpInfo(id, contentType, modifyAppReq);
        }

        /**
         * Execute modify request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModifyAppRet> _callback) throws ApiException {
            return modifyAsync(id, contentType, modifyAppReq, _callback);
        }
    }

    /**
     * 更新应用基本信息
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APImodifyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyRequest modify(String id, String contentType) {
        return new APImodifyRequest(id, contentType);
    }
    private okhttp3.Call modifyAccountCall(String appId, String id, String contentType, ModifyAccountRequest modifyAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/accounts/{id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyAccountValidateBeforeCall(String appId, String id, String contentType, ModifyAccountRequest modifyAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modifyAccount(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifyAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyAccount(Async)");
        }

        return modifyAccountCall(appId, id, contentType, modifyAccountRequest, _callback);

    }


    private ApiResponse<CreateAccount200Response> modifyAccountWithHttpInfo(String appId, String id, String contentType, ModifyAccountRequest modifyAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyAccountValidateBeforeCall(appId, id, contentType, modifyAccountRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyAccountAsync(String appId, String id, String contentType, ModifyAccountRequest modifyAccountRequest, final ApiCallback<CreateAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyAccountValidateBeforeCall(appId, id, contentType, modifyAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyAccountRequest {
        private final String appId;
        private final String id;
        private final String contentType;
        private ModifyAccountRequest modifyAccountRequest;

        private APImodifyAccountRequest(String appId, String id, String contentType) {
            this.appId = appId;
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyAccountRequest
         * @param modifyAccountRequest  (optional)
         * @return APImodifyAccountRequest
         */
        public APImodifyAccountRequest modifyAccountRequest(ModifyAccountRequest modifyAccountRequest) {
            this.modifyAccountRequest = modifyAccountRequest;
            return this;
        }

        /**
         * Build call for modifyAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyAccountCall(appId, id, contentType, modifyAccountRequest, _callback);
        }

        /**
         * Execute modifyAccount request
         * @return CreateAccount200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public CreateAccount200Response execute() throws ApiException {
            ApiResponse<CreateAccount200Response> localVarResp = modifyAccountWithHttpInfo(appId, id, contentType, modifyAccountRequest);
            return localVarResp.getData();
        }

        /**
         * Execute modifyAccount request with HTTP info returned
         * @return ApiResponse&lt;CreateAccount200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<CreateAccount200Response> executeWithHttpInfo() throws ApiException {
            return modifyAccountWithHttpInfo(appId, id, contentType, modifyAccountRequest);
        }

        /**
         * Execute modifyAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<CreateAccount200Response> _callback) throws ApiException {
            return modifyAccountAsync(appId, id, contentType, modifyAccountRequest, _callback);
        }
    }

    /**
     * 更新应用子账号
     * 
     * @param appId 应用id (required)
     * @param id 子账号id (required)
     * @param contentType  (required)
     * @return APImodifyAccountRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APImodifyAccountRequest modifyAccount(String appId, String id, String contentType) {
        return new APImodifyAccountRequest(appId, id, contentType);
    }
    private okhttp3.Call modifyConfigCall(String id, String contentType, ModifyAppConfigReq modifyAppConfigReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAppConfigReq;

        // create path and map variables
        String localVarPath = "/v1/applications/{id}/configs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyConfigValidateBeforeCall(String id, String contentType, ModifyAppConfigReq modifyAppConfigReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifyConfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyConfig(Async)");
        }

        return modifyConfigCall(id, contentType, modifyAppConfigReq, _callback);

    }


    private ApiResponse<ModifyAppConfigRet> modifyConfigWithHttpInfo(String id, String contentType, ModifyAppConfigReq modifyAppConfigReq) throws ApiException {
        okhttp3.Call localVarCall = modifyConfigValidateBeforeCall(id, contentType, modifyAppConfigReq, null);
        Type localVarReturnType = new TypeToken<ModifyAppConfigRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyConfigAsync(String id, String contentType, ModifyAppConfigReq modifyAppConfigReq, final ApiCallback<ModifyAppConfigRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyConfigValidateBeforeCall(id, contentType, modifyAppConfigReq, _callback);
        Type localVarReturnType = new TypeToken<ModifyAppConfigRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyConfigRequest {
        private final String id;
        private final String contentType;
        private ModifyAppConfigReq modifyAppConfigReq;

        private APImodifyConfigRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyAppConfigReq
         * @param modifyAppConfigReq  (optional)
         * @return APImodifyConfigRequest
         */
        public APImodifyConfigRequest modifyAppConfigReq(ModifyAppConfigReq modifyAppConfigReq) {
            this.modifyAppConfigReq = modifyAppConfigReq;
            return this;
        }

        /**
         * Build call for modifyConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyConfigCall(id, contentType, modifyAppConfigReq, _callback);
        }

        /**
         * Execute modifyConfig request
         * @return ModifyAppConfigRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ModifyAppConfigRet execute() throws ApiException {
            ApiResponse<ModifyAppConfigRet> localVarResp = modifyConfigWithHttpInfo(id, contentType, modifyAppConfigReq);
            return localVarResp.getData();
        }

        /**
         * Execute modifyConfig request with HTTP info returned
         * @return ApiResponse&lt;ModifyAppConfigRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModifyAppConfigRet> executeWithHttpInfo() throws ApiException {
            return modifyConfigWithHttpInfo(id, contentType, modifyAppConfigReq);
        }

        /**
         * Execute modifyConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModifyAppConfigRet> _callback) throws ApiException {
            return modifyConfigAsync(id, contentType, modifyAppConfigReq, _callback);
        }
    }

    /**
     * 更新应用配置
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APImodifyConfigRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyConfigRequest modifyConfig(String id, String contentType) {
        return new APImodifyConfigRequest(id, contentType);
    }
    private okhttp3.Call modifyProtocolCall(String appId, String protocolType, String contentType, ModifyAppProtocol modifyAppProtocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAppProtocol;

        // create path and map variables
        String localVarPath = "/v1/applications/{app_id}/protocols/{protocol_type}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "protocol_type" + "}", localVarApiClient.escapeString(protocolType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyProtocolValidateBeforeCall(String appId, String protocolType, String contentType, ModifyAppProtocol modifyAppProtocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modifyProtocol(Async)");
        }

        // verify the required parameter 'protocolType' is set
        if (protocolType == null) {
            throw new ApiException("Missing the required parameter 'protocolType' when calling modifyProtocol(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyProtocol(Async)");
        }

        return modifyProtocolCall(appId, protocolType, contentType, modifyAppProtocol, _callback);

    }


    private ApiResponse<Object> modifyProtocolWithHttpInfo(String appId, String protocolType, String contentType, ModifyAppProtocol modifyAppProtocol) throws ApiException {
        okhttp3.Call localVarCall = modifyProtocolValidateBeforeCall(appId, protocolType, contentType, modifyAppProtocol, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyProtocolAsync(String appId, String protocolType, String contentType, ModifyAppProtocol modifyAppProtocol, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyProtocolValidateBeforeCall(appId, protocolType, contentType, modifyAppProtocol, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyProtocolRequest {
        private final String appId;
        private final String protocolType;
        private final String contentType;
        private ModifyAppProtocol modifyAppProtocol;

        private APImodifyProtocolRequest(String appId, String protocolType, String contentType) {
            this.appId = appId;
            this.protocolType = protocolType;
            this.contentType = contentType;
        }

        /**
         * Set modifyAppProtocol
         * @param modifyAppProtocol  (optional)
         * @return APImodifyProtocolRequest
         */
        public APImodifyProtocolRequest modifyAppProtocol(ModifyAppProtocol modifyAppProtocol) {
            this.modifyAppProtocol = modifyAppProtocol;
            return this;
        }

        /**
         * Build call for modifyProtocol
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyProtocolCall(appId, protocolType, contentType, modifyAppProtocol, _callback);
        }

        /**
         * Execute modifyProtocol request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = modifyProtocolWithHttpInfo(appId, protocolType, contentType, modifyAppProtocol);
            return localVarResp.getData();
        }

        /**
         * Execute modifyProtocol request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return modifyProtocolWithHttpInfo(appId, protocolType, contentType, modifyAppProtocol);
        }

        /**
         * Execute modifyProtocol request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return modifyProtocolAsync(appId, protocolType, contentType, modifyAppProtocol, _callback);
        }
    }

    /**
     * 更新应用认证协议
     *  具体入参参考：[https://thoughts.teambition.com/workspaces/607401bc94422600473bb8a7/docs/62207129fb49bf000106a046](https://thoughts.teambition.com/workspaces/607401bc94422600473bb8a7/docs/62207129fb49bf000106a046) 
     * @param appId 应用id (required)
     * @param protocolType 单点类型，cas、oauth2、saml、oidc、sxp (required)
     * @param contentType  (required)
     * @return APImodifyProtocolRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyProtocolRequest modifyProtocol(String appId, String protocolType, String contentType) {
        return new APImodifyProtocolRequest(appId, protocolType, contentType);
    }
}
