/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.api;

import cn.idmesh.ApiCallback;
import cn.idmesh.ApiClient;
import cn.idmesh.ApiException;
import cn.idmesh.ApiResponse;
import cn.idmesh.Configuration;
import cn.idmesh.Pair;

import com.google.gson.reflect.TypeToken;


import cn.idmesh.model.CommonRet;
import cn.idmesh.model.CreateNodeRequest;
import cn.idmesh.model.CreateOrganizationReq;
import cn.idmesh.model.DeleteNodeMemberReq;
import cn.idmesh.model.GetMembers200ResponseInner;
import cn.idmesh.model.ModifyNodeMemberReq;
import cn.idmesh.model.ModifyOrganizationNodeReq;
import cn.idmesh.model.ModifyOrganizationReq;
import cn.idmesh.model.NodeMemberWithPage;
import cn.idmesh.model.OrganizationTree;
import cn.idmesh.model.TreeNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNodeCall(String contentType, CreateNodeRequest createNodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNodeRequest;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNodeValidateBeforeCall(String contentType, CreateNodeRequest createNodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createNode(Async)");
        }

        return createNodeCall(contentType, createNodeRequest, _callback);

    }


    private ApiResponse<CommonRet> createNodeWithHttpInfo(String contentType, CreateNodeRequest createNodeRequest) throws ApiException {
        okhttp3.Call localVarCall = createNodeValidateBeforeCall(contentType, createNodeRequest, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNodeAsync(String contentType, CreateNodeRequest createNodeRequest, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNodeValidateBeforeCall(contentType, createNodeRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNodeRequest {
        private final String contentType;
        private CreateNodeRequest createNodeRequest;

        private APIcreateNodeRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createNodeRequest
         * @param createNodeRequest  (optional)
         * @return APIcreateNodeRequest
         */
        public APIcreateNodeRequest createNodeRequest(CreateNodeRequest createNodeRequest) {
            this.createNodeRequest = createNodeRequest;
            return this;
        }

        /**
         * Build call for createNode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNodeCall(contentType, createNodeRequest, _callback);
        }

        /**
         * Execute createNode request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = createNodeWithHttpInfo(contentType, createNodeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createNode request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return createNodeWithHttpInfo(contentType, createNodeRequest);
        }

        /**
         * Execute createNode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return createNodeAsync(contentType, createNodeRequest, _callback);
        }
    }

    /**
     * 创建节点
     * 
     * @param contentType  (required)
     * @return APIcreateNodeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNodeRequest createNode(String contentType) {
        return new APIcreateNodeRequest(contentType);
    }
    private okhttp3.Call createOrganizationCall(String contentType, CreateOrganizationReq createOrganizationReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationReq;

        // create path and map variables
        String localVarPath = "/v1/core-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationValidateBeforeCall(String contentType, CreateOrganizationReq createOrganizationReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createOrganization(Async)");
        }

        return createOrganizationCall(contentType, createOrganizationReq, _callback);

    }


    private ApiResponse<CommonRet> createOrganizationWithHttpInfo(String contentType, CreateOrganizationReq createOrganizationReq) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(contentType, createOrganizationReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrganizationAsync(String contentType, CreateOrganizationReq createOrganizationReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(contentType, createOrganizationReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateOrganizationRequest {
        private final String contentType;
        private CreateOrganizationReq createOrganizationReq;

        private APIcreateOrganizationRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createOrganizationReq
         * @param createOrganizationReq  (optional)
         * @return APIcreateOrganizationRequest
         */
        public APIcreateOrganizationRequest createOrganizationReq(CreateOrganizationReq createOrganizationReq) {
            this.createOrganizationReq = createOrganizationReq;
            return this;
        }

        /**
         * Build call for createOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrganizationCall(contentType, createOrganizationReq, _callback);
        }

        /**
         * Execute createOrganization request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = createOrganizationWithHttpInfo(contentType, createOrganizationReq);
            return localVarResp.getData();
        }

        /**
         * Execute createOrganization request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return createOrganizationWithHttpInfo(contentType, createOrganizationReq);
        }

        /**
         * Execute createOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return createOrganizationAsync(contentType, createOrganizationReq, _callback);
        }
    }

    /**
     * 创建组织关系
     * 创建组织关系的元数据，同时创建根节点
     * @param contentType  (required)
     * @return APIcreateOrganizationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrganizationRequest createOrganization(String contentType) {
        return new APIcreateOrganizationRequest(contentType);
    }
    private okhttp3.Call deleteMembersCall(String contentType, DeleteNodeMemberReq deleteNodeMemberReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteNodeMemberReq;

        // create path and map variables
        String localVarPath = "/v1/tree-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersValidateBeforeCall(String contentType, DeleteNodeMemberReq deleteNodeMemberReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteMembers(Async)");
        }

        return deleteMembersCall(contentType, deleteNodeMemberReq, _callback);

    }


    private ApiResponse<CommonRet> deleteMembersWithHttpInfo(String contentType, DeleteNodeMemberReq deleteNodeMemberReq) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersValidateBeforeCall(contentType, deleteNodeMemberReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMembersAsync(String contentType, DeleteNodeMemberReq deleteNodeMemberReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersValidateBeforeCall(contentType, deleteNodeMemberReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteMembersRequest {
        private final String contentType;
        private DeleteNodeMemberReq deleteNodeMemberReq;

        private APIdeleteMembersRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set deleteNodeMemberReq
         * @param deleteNodeMemberReq  (optional)
         * @return APIdeleteMembersRequest
         */
        public APIdeleteMembersRequest deleteNodeMemberReq(DeleteNodeMemberReq deleteNodeMemberReq) {
            this.deleteNodeMemberReq = deleteNodeMemberReq;
            return this;
        }

        /**
         * Build call for deleteMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMembersCall(contentType, deleteNodeMemberReq, _callback);
        }

        /**
         * Execute deleteMembers request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = deleteMembersWithHttpInfo(contentType, deleteNodeMemberReq);
            return localVarResp.getData();
        }

        /**
         * Execute deleteMembers request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return deleteMembersWithHttpInfo(contentType, deleteNodeMemberReq);
        }

        /**
         * Execute deleteMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return deleteMembersAsync(contentType, deleteNodeMemberReq, _callback);
        }
    }

    /**
     * 从节点移除用户
     * 移除用户,uri参数中的ID和json中的参数，至少有其一
     * @param contentType  (required)
     * @return APIdeleteMembersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteMembersRequest deleteMembers(String contentType) {
        return new APIdeleteMembersRequest(contentType);
    }
    private okhttp3.Call deleteNodeCall(String id, String objectCode, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_code", objectCode));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNodeValidateBeforeCall(String id, String objectCode, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNode(Async)");
        }

        // verify the required parameter 'objectCode' is set
        if (objectCode == null) {
            throw new ApiException("Missing the required parameter 'objectCode' when calling deleteNode(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteNode(Async)");
        }

        return deleteNodeCall(id, objectCode, contentType, _callback);

    }


    private ApiResponse<CommonRet> deleteNodeWithHttpInfo(String id, String objectCode, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteNodeValidateBeforeCall(id, objectCode, contentType, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteNodeAsync(String id, String objectCode, String contentType, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNodeValidateBeforeCall(id, objectCode, contentType, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteNodeRequest {
        private final String id;
        private final String objectCode;
        private final String contentType;

        private APIdeleteNodeRequest(String id, String objectCode, String contentType) {
            this.id = id;
            this.objectCode = objectCode;
            this.contentType = contentType;
        }

        /**
         * Build call for deleteNode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNodeCall(id, objectCode, contentType, _callback);
        }

        /**
         * Execute deleteNode request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = deleteNodeWithHttpInfo(id, objectCode, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteNode request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return deleteNodeWithHttpInfo(id, objectCode, contentType);
        }

        /**
         * Execute deleteNode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return deleteNodeAsync(id, objectCode, contentType, _callback);
        }
    }

    /**
     * 删除节点
     * 如果该节点有子节点则不可删除，需要先删除所有子节点。
     * @param id  (required)
     * @param objectCode 树对象code (required)
     * @param contentType  (required)
     * @return APIdeleteNodeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteNodeRequest deleteNode(String id, String objectCode, String contentType) {
        return new APIdeleteNodeRequest(id, objectCode, contentType);
    }
    private okhttp3.Call deleteOrganizationCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/core-objects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganization(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteOrganization(Async)");
        }

        return deleteOrganizationCall(id, contentType, _callback);

    }


    private ApiResponse<CommonRet> deleteOrganizationWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOrganizationAsync(String id, String contentType, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteOrganizationRequest {
        private final String id;
        private final String contentType;

        private APIdeleteOrganizationRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for deleteOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOrganizationCall(id, contentType, _callback);
        }

        /**
         * Execute deleteOrganization request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = deleteOrganizationWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteOrganization request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return deleteOrganizationWithHttpInfo(id, contentType);
        }

        /**
         * Execute deleteOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return deleteOrganizationAsync(id, contentType, _callback);
        }
    }

    /**
     * 删除组织关系
     * 如果该组织关系有子节点则不可删
     * @param id  (required)
     * @param contentType  (required)
     * @return APIdeleteOrganizationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteOrganizationRequest deleteOrganization(String id, String contentType) {
        return new APIdeleteOrganizationRequest(id, contentType);
    }
    private okhttp3.Call getChildrenNodesCall(String id, String mode, String objectCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}/children"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (objectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_code", objectCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildrenNodesValidateBeforeCall(String id, String mode, String objectCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChildrenNodes(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling getChildrenNodes(Async)");
        }

        // verify the required parameter 'objectCode' is set
        if (objectCode == null) {
            throw new ApiException("Missing the required parameter 'objectCode' when calling getChildrenNodes(Async)");
        }

        return getChildrenNodesCall(id, mode, objectCode, _callback);

    }


    private ApiResponse<List<TreeNode>> getChildrenNodesWithHttpInfo(String id, String mode, String objectCode) throws ApiException {
        okhttp3.Call localVarCall = getChildrenNodesValidateBeforeCall(id, mode, objectCode, null);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChildrenNodesAsync(String id, String mode, String objectCode, final ApiCallback<List<TreeNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildrenNodesValidateBeforeCall(id, mode, objectCode, _callback);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetChildrenNodesRequest {
        private final String id;
        private final String mode;
        private final String objectCode;

        private APIgetChildrenNodesRequest(String id, String mode, String objectCode) {
            this.id = id;
            this.mode = mode;
            this.objectCode = objectCode;
        }

        /**
         * Build call for getChildrenNodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChildrenNodesCall(id, mode, objectCode, _callback);
        }

        /**
         * Execute getChildrenNodes request
         * @return List&lt;TreeNode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<TreeNode> execute() throws ApiException {
            ApiResponse<List<TreeNode>> localVarResp = getChildrenNodesWithHttpInfo(id, mode, objectCode);
            return localVarResp.getData();
        }

        /**
         * Execute getChildrenNodes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TreeNode&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TreeNode>> executeWithHttpInfo() throws ApiException {
            return getChildrenNodesWithHttpInfo(id, mode, objectCode);
        }

        /**
         * Execute getChildrenNodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TreeNode>> _callback) throws ApiException {
            return getChildrenNodesAsync(id, mode, objectCode, _callback);
        }
    }

    /**
     * 获取子节点列表
     * 
     * @param id  (required)
     * @param mode // mode - 低-&gt;高 bit // 第1位：是否获得指针节点所对应的真实结点，1-是，0-否 // 第2位：是否展开WeakNode，即节点中类型不同的节点，1-展开，0-不展开 // 第3位：是否递归地展开节点（不建议） (required)
     * @param objectCode 当id &#x3D; 0时必填，创建树时的object_code (required)
     * @return APIgetChildrenNodesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetChildrenNodesRequest getChildrenNodes(String id, String mode, String objectCode) {
        return new APIgetChildrenNodesRequest(id, mode, objectCode);
    }
    private okhttp3.Call getMembersCall(String userId, String objectCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (objectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_code", objectCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersValidateBeforeCall(String userId, String objectCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getMembers(Async)");
        }

        return getMembersCall(userId, objectCode, _callback);

    }


    private ApiResponse<List<GetMembers200ResponseInner>> getMembersWithHttpInfo(String userId, String objectCode) throws ApiException {
        okhttp3.Call localVarCall = getMembersValidateBeforeCall(userId, objectCode, null);
        Type localVarReturnType = new TypeToken<List<GetMembers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembersAsync(String userId, String objectCode, final ApiCallback<List<GetMembers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersValidateBeforeCall(userId, objectCode, _callback);
        Type localVarReturnType = new TypeToken<List<GetMembers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMembersRequest {
        private final String userId;
        private String objectCode;

        private APIgetMembersRequest(String userId) {
            this.userId = userId;
        }

        /**
         * Set objectCode
         * @param objectCode 组织编码 (optional)
         * @return APIgetMembersRequest
         */
        public APIgetMembersRequest objectCode(String objectCode) {
            this.objectCode = objectCode;
            return this;
        }

        /**
         * Build call for getMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersCall(userId, objectCode, _callback);
        }

        /**
         * Execute getMembers request
         * @return List&lt;GetMembers200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<GetMembers200ResponseInner> execute() throws ApiException {
            ApiResponse<List<GetMembers200ResponseInner>> localVarResp = getMembersWithHttpInfo(userId, objectCode);
            return localVarResp.getData();
        }

        /**
         * Execute getMembers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GetMembers200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GetMembers200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return getMembersWithHttpInfo(userId, objectCode);
        }

        /**
         * Execute getMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GetMembers200ResponseInner>> _callback) throws ApiException {
            return getMembersAsync(userId, objectCode, _callback);
        }
    }

    /**
     * 获取与用户关联的组织关系列表
     * 根据用户id获取与用户关联的组织关系列表
     * @param userId 用户ID (required)
     * @return APIgetMembersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMembersRequest getMembers(String userId) {
        return new APIgetMembersRequest(userId);
    }
    private okhttp3.Call getNodeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNode(Async)");
        }

        return getNodeCall(id, _callback);

    }


    private ApiResponse<TreeNode> getNodeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getNodeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNodeAsync(String id, final ApiCallback<TreeNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNodeRequest {
        private final String id;

        private APIgetNodeRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getNode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNodeCall(id, _callback);
        }

        /**
         * Execute getNode request
         * @return TreeNode
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public TreeNode execute() throws ApiException {
            ApiResponse<TreeNode> localVarResp = getNodeWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getNode request with HTTP info returned
         * @return ApiResponse&lt;TreeNode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TreeNode> executeWithHttpInfo() throws ApiException {
            return getNodeWithHttpInfo(id);
        }

        /**
         * Execute getNode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TreeNode> _callback) throws ApiException {
            return getNodeAsync(id, _callback);
        }
    }

    /**
     * 查询节点信息
     * 根据ID查询节点信息
     * @param id  (required)
     * @return APIgetNodeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNodeRequest getNode(String id) {
        return new APIgetNodeRequest(id);
    }
    private okhttp3.Call getNodeMembersCall(String id, String relationType, String isDefault, String displayName, String username, String mode, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}/tree-users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (relationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation_type", relationType));
        }

        if (isDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_default", isDefault));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_name", displayName));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeMembersValidateBeforeCall(String id, String relationType, String isDefault, String displayName, String username, String mode, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNodeMembers(Async)");
        }

        return getNodeMembersCall(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort, _callback);

    }


    private ApiResponse<NodeMemberWithPage> getNodeMembersWithHttpInfo(String id, String relationType, String isDefault, String displayName, String username, String mode, Integer pageNum, Integer pageSize, String pageSort) throws ApiException {
        okhttp3.Call localVarCall = getNodeMembersValidateBeforeCall(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort, null);
        Type localVarReturnType = new TypeToken<NodeMemberWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNodeMembersAsync(String id, String relationType, String isDefault, String displayName, String username, String mode, Integer pageNum, Integer pageSize, String pageSort, final ApiCallback<NodeMemberWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeMembersValidateBeforeCall(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort, _callback);
        Type localVarReturnType = new TypeToken<NodeMemberWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNodeMembersRequest {
        private final String id;
        private String relationType;
        private String isDefault;
        private String displayName;
        private String username;
        private String mode;
        private Integer pageNum;
        private Integer pageSize;
        private String pageSort;

        private APIgetNodeMembersRequest(String id) {
            this.id = id;
        }

        /**
         * Set relationType
         * @param relationType 关联类型，用于区分多重关联 (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest relationType(String relationType) {
            this.relationType = relationType;
            return this;
        }

        /**
         * Set isDefault
         * @param isDefault 是否默认关系 1是，0否 (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest isDefault(String isDefault) {
            this.isDefault = isDefault;
            return this;
        }

        /**
         * Set displayName
         * @param displayName 用户显示名 (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Set username
         * @param username 用户名，支持模糊搜索（仅前缀） (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest username(String username) {
            this.username = username;
            return this;
        }

        /**
         * Set mode
         * @param mode // mode - 低-&gt;高 bit // 第1位：是否获得指针节点所对应的真实结点，1-是，0-否 // 第2位：是否展开WeakNode，即节点中类型不同的节点，1-展开，0-不展开 // 第3位：是否递归地展开节点（不建议） (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest mode(String mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 起始页，默认1 (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小，默认10 (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序方式，格式：字段[排序方式] (optional)
         * @return APIgetNodeMembersRequest
         */
        public APIgetNodeMembersRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Build call for getNodeMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNodeMembersCall(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort, _callback);
        }

        /**
         * Execute getNodeMembers request
         * @return NodeMemberWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public NodeMemberWithPage execute() throws ApiException {
            ApiResponse<NodeMemberWithPage> localVarResp = getNodeMembersWithHttpInfo(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort);
            return localVarResp.getData();
        }

        /**
         * Execute getNodeMembers request with HTTP info returned
         * @return ApiResponse&lt;NodeMemberWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NodeMemberWithPage> executeWithHttpInfo() throws ApiException {
            return getNodeMembersWithHttpInfo(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort);
        }

        /**
         * Execute getNodeMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NodeMemberWithPage> _callback) throws ApiException {
            return getNodeMembersAsync(id, relationType, isDefault, displayName, username, mode, pageNum, pageSize, pageSort, _callback);
        }
    }

    /**
     * 获取成员信息列表
     * 根据组织节点ID获取成员信息列表
     * @param id node id (required)
     * @return APIgetNodeMembersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNodeMembersRequest getNodeMembers(String id) {
        return new APIgetNodeMembersRequest(id);
    }
    private okhttp3.Call getNodeParentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}/parent"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeParentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNodeParent(Async)");
        }

        return getNodeParentCall(id, _callback);

    }


    private ApiResponse<List<TreeNode>> getNodeParentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getNodeParentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNodeParentAsync(String id, final ApiCallback<List<TreeNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeParentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNodeParentRequest {
        private final String id;

        private APIgetNodeParentRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getNodeParent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNodeParentCall(id, _callback);
        }

        /**
         * Execute getNodeParent request
         * @return List&lt;TreeNode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<TreeNode> execute() throws ApiException {
            ApiResponse<List<TreeNode>> localVarResp = getNodeParentWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getNodeParent request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TreeNode&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TreeNode>> executeWithHttpInfo() throws ApiException {
            return getNodeParentWithHttpInfo(id);
        }

        /**
         * Execute getNodeParent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TreeNode>> _callback) throws ApiException {
            return getNodeParentAsync(id, _callback);
        }
    }

    /**
     * 查询父节点
     * 
     * @param id  (required)
     * @return APIgetNodeParentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNodeParentRequest getNodeParent(String id) {
        return new APIgetNodeParentRequest(id);
    }
    private okhttp3.Call getNodesCall(String objectCode, String name, String code, String tag, String timeModifiedFrom, String timeModifiedTo, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_code", objectCode));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (timeModifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified_from", timeModifiedFrom));
        }

        if (timeModifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified_to", timeModifiedTo));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodesValidateBeforeCall(String objectCode, String name, String code, String tag, String timeModifiedFrom, String timeModifiedTo, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectCode' is set
        if (objectCode == null) {
            throw new ApiException("Missing the required parameter 'objectCode' when calling getNodes(Async)");
        }

        return getNodesCall(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids, _callback);

    }


    private ApiResponse<List<TreeNode>> getNodesWithHttpInfo(String objectCode, String name, String code, String tag, String timeModifiedFrom, String timeModifiedTo, String ids) throws ApiException {
        okhttp3.Call localVarCall = getNodesValidateBeforeCall(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids, null);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNodesAsync(String objectCode, String name, String code, String tag, String timeModifiedFrom, String timeModifiedTo, String ids, final ApiCallback<List<TreeNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodesValidateBeforeCall(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids, _callback);
        Type localVarReturnType = new TypeToken<List<TreeNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNodesRequest {
        private final String objectCode;
        private String name;
        private String code;
        private String tag;
        private String timeModifiedFrom;
        private String timeModifiedTo;
        private String ids;

        private APIgetNodesRequest(String objectCode) {
            this.objectCode = objectCode;
        }

        /**
         * Set name
         * @param name 名字，支持前缀搜索 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set code
         * @param code 编号 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Set tag
         * @param tag 标签 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest tag(String tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Set timeModifiedFrom
         * @param timeModifiedFrom 更新时间起点 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest timeModifiedFrom(String timeModifiedFrom) {
            this.timeModifiedFrom = timeModifiedFrom;
            return this;
        }

        /**
         * Set timeModifiedTo
         * @param timeModifiedTo 更新时间终点，默认至今 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest timeModifiedTo(String timeModifiedTo) {
            this.timeModifiedTo = timeModifiedTo;
            return this;
        }

        /**
         * Set ids
         * @param ids id列表，逗号“,”分隔 (optional)
         * @return APIgetNodesRequest
         */
        public APIgetNodesRequest ids(String ids) {
            this.ids = ids;
            return this;
        }

        /**
         * Build call for getNodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNodesCall(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids, _callback);
        }

        /**
         * Execute getNodes request
         * @return List&lt;TreeNode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<TreeNode> execute() throws ApiException {
            ApiResponse<List<TreeNode>> localVarResp = getNodesWithHttpInfo(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids);
            return localVarResp.getData();
        }

        /**
         * Execute getNodes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TreeNode&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TreeNode>> executeWithHttpInfo() throws ApiException {
            return getNodesWithHttpInfo(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids);
        }

        /**
         * Execute getNodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TreeNode>> _callback) throws ApiException {
            return getNodesAsync(objectCode, name, code, tag, timeModifiedFrom, timeModifiedTo, ids, _callback);
        }
    }

    /**
     * 查询节点信息列表
     * 
     * @param objectCode 组织编码 (required)
     * @return APIgetNodesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNodesRequest getNodes(String objectCode) {
        return new APIgetNodesRequest(objectCode);
    }
    private okhttp3.Call getOrganizationCall(String id, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/core-objects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationValidateBeforeCall(String id, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganization(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getOrganization(Async)");
        }

        return getOrganizationCall(id, code, _callback);

    }


    private ApiResponse<List<OrganizationTree>> getOrganizationWithHttpInfo(String id, String code) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, code, null);
        Type localVarReturnType = new TypeToken<List<OrganizationTree>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationAsync(String id, String code, final ApiCallback<List<OrganizationTree>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, code, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationTree>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationRequest {
        private final String id;
        private final String code;

        private APIgetOrganizationRequest(String id, String code) {
            this.id = id;
            this.code = code;
        }

        /**
         * Build call for getOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationCall(id, code, _callback);
        }

        /**
         * Execute getOrganization request
         * @return List&lt;OrganizationTree&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<OrganizationTree> execute() throws ApiException {
            ApiResponse<List<OrganizationTree>> localVarResp = getOrganizationWithHttpInfo(id, code);
            return localVarResp.getData();
        }

        /**
         * Execute getOrganization request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OrganizationTree&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OrganizationTree>> executeWithHttpInfo() throws ApiException {
            return getOrganizationWithHttpInfo(id, code);
        }

        /**
         * Execute getOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OrganizationTree>> _callback) throws ApiException {
            return getOrganizationAsync(id, code, _callback);
        }
    }

    /**
     * 获取组织关系基本信息
     * 
     * @param id  (required)
     * @param code  (required)
     * @return APIgetOrganizationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrganizationRequest getOrganization(String id, String code) {
        return new APIgetOrganizationRequest(id, code);
    }
    private okhttp3.Call getOrganizationsCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/core-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationsValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return getOrganizationsCall(type, _callback);

    }


    private ApiResponse<List<OrganizationTree>> getOrganizationsWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<List<OrganizationTree>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationsAsync(String type, final ApiCallback<List<OrganizationTree>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationTree>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationsRequest {
        private String type;

        private APIgetOrganizationsRequest() {
        }

        /**
         * Set type
         * @param type 类型：0角色树，1组织树，默认1 (optional)
         * @return APIgetOrganizationsRequest
         */
        public APIgetOrganizationsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Build call for getOrganizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationsCall(type, _callback);
        }

        /**
         * Execute getOrganizations request
         * @return List&lt;OrganizationTree&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<OrganizationTree> execute() throws ApiException {
            ApiResponse<List<OrganizationTree>> localVarResp = getOrganizationsWithHttpInfo(type);
            return localVarResp.getData();
        }

        /**
         * Execute getOrganizations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OrganizationTree&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OrganizationTree>> executeWithHttpInfo() throws ApiException {
            return getOrganizationsWithHttpInfo(type);
        }

        /**
         * Execute getOrganizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OrganizationTree>> _callback) throws ApiException {
            return getOrganizationsAsync(type, _callback);
        }
    }

    /**
     * 获取组织关系列表
     * 
     * @return APIgetOrganizationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrganizationsRequest getOrganizations() {
        return new APIgetOrganizationsRequest();
    }
    private okhttp3.Call updateMemberCall(String id, String contentType, ModifyNodeMemberReq modifyNodeMemberReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyNodeMemberReq;

        // create path and map variables
        String localVarPath = "/v1/tree-users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String id, String contentType, ModifyNodeMemberReq modifyNodeMemberReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateMember(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateMember(Async)");
        }

        return updateMemberCall(id, contentType, modifyNodeMemberReq, _callback);

    }


    private ApiResponse<CommonRet> updateMemberWithHttpInfo(String id, String contentType, ModifyNodeMemberReq modifyNodeMemberReq) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(id, contentType, modifyNodeMemberReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMemberAsync(String id, String contentType, ModifyNodeMemberReq modifyNodeMemberReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(id, contentType, modifyNodeMemberReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateMemberRequest {
        private final String id;
        private final String contentType;
        private ModifyNodeMemberReq modifyNodeMemberReq;

        private APIupdateMemberRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyNodeMemberReq
         * @param modifyNodeMemberReq  (optional)
         * @return APIupdateMemberRequest
         */
        public APIupdateMemberRequest modifyNodeMemberReq(ModifyNodeMemberReq modifyNodeMemberReq) {
            this.modifyNodeMemberReq = modifyNodeMemberReq;
            return this;
        }

        /**
         * Build call for updateMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateMemberCall(id, contentType, modifyNodeMemberReq, _callback);
        }

        /**
         * Execute updateMember request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = updateMemberWithHttpInfo(id, contentType, modifyNodeMemberReq);
            return localVarResp.getData();
        }

        /**
         * Execute updateMember request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return updateMemberWithHttpInfo(id, contentType, modifyNodeMemberReq);
        }

        /**
         * Execute updateMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return updateMemberAsync(id, contentType, modifyNodeMemberReq, _callback);
        }
    }

    /**
     * 更新用户节点
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APIupdateMemberRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateMemberRequest updateMember(String id, String contentType) {
        return new APIupdateMemberRequest(id, contentType);
    }
    private okhttp3.Call updateNodeCall(String id, String contentType, ModifyOrganizationNodeReq modifyOrganizationNodeReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyOrganizationNodeReq;

        // create path and map variables
        String localVarPath = "/v1/tree-nodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNodeValidateBeforeCall(String id, String contentType, ModifyOrganizationNodeReq modifyOrganizationNodeReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateNode(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateNode(Async)");
        }

        return updateNodeCall(id, contentType, modifyOrganizationNodeReq, _callback);

    }


    private ApiResponse<CommonRet> updateNodeWithHttpInfo(String id, String contentType, ModifyOrganizationNodeReq modifyOrganizationNodeReq) throws ApiException {
        okhttp3.Call localVarCall = updateNodeValidateBeforeCall(id, contentType, modifyOrganizationNodeReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNodeAsync(String id, String contentType, ModifyOrganizationNodeReq modifyOrganizationNodeReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNodeValidateBeforeCall(id, contentType, modifyOrganizationNodeReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateNodeRequest {
        private final String id;
        private final String contentType;
        private ModifyOrganizationNodeReq modifyOrganizationNodeReq;

        private APIupdateNodeRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyOrganizationNodeReq
         * @param modifyOrganizationNodeReq  (optional)
         * @return APIupdateNodeRequest
         */
        public APIupdateNodeRequest modifyOrganizationNodeReq(ModifyOrganizationNodeReq modifyOrganizationNodeReq) {
            this.modifyOrganizationNodeReq = modifyOrganizationNodeReq;
            return this;
        }

        /**
         * Build call for updateNode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateNodeCall(id, contentType, modifyOrganizationNodeReq, _callback);
        }

        /**
         * Execute updateNode request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = updateNodeWithHttpInfo(id, contentType, modifyOrganizationNodeReq);
            return localVarResp.getData();
        }

        /**
         * Execute updateNode request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return updateNodeWithHttpInfo(id, contentType, modifyOrganizationNodeReq);
        }

        /**
         * Execute updateNode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return updateNodeAsync(id, contentType, modifyOrganizationNodeReq, _callback);
        }
    }

    /**
     * 编辑节点
     *  移动节点修改parent_id 
     * @param id 更新树节点 (required)
     * @param contentType  (required)
     * @return APIupdateNodeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateNodeRequest updateNode(String id, String contentType) {
        return new APIupdateNodeRequest(id, contentType);
    }
    private okhttp3.Call updateOrganizationCall(String id, String contentType, ModifyOrganizationReq modifyOrganizationReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyOrganizationReq;

        // create path and map variables
        String localVarPath = "/v1/core-objects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationValidateBeforeCall(String id, String contentType, ModifyOrganizationReq modifyOrganizationReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrganization(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateOrganization(Async)");
        }

        return updateOrganizationCall(id, contentType, modifyOrganizationReq, _callback);

    }


    private ApiResponse<CommonRet> updateOrganizationWithHttpInfo(String id, String contentType, ModifyOrganizationReq modifyOrganizationReq) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(id, contentType, modifyOrganizationReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrganizationAsync(String id, String contentType, ModifyOrganizationReq modifyOrganizationReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(id, contentType, modifyOrganizationReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateOrganizationRequest {
        private final String id;
        private final String contentType;
        private ModifyOrganizationReq modifyOrganizationReq;

        private APIupdateOrganizationRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyOrganizationReq
         * @param modifyOrganizationReq  (optional)
         * @return APIupdateOrganizationRequest
         */
        public APIupdateOrganizationRequest modifyOrganizationReq(ModifyOrganizationReq modifyOrganizationReq) {
            this.modifyOrganizationReq = modifyOrganizationReq;
            return this;
        }

        /**
         * Build call for updateOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateOrganizationCall(id, contentType, modifyOrganizationReq, _callback);
        }

        /**
         * Execute updateOrganization request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = updateOrganizationWithHttpInfo(id, contentType, modifyOrganizationReq);
            return localVarResp.getData();
        }

        /**
         * Execute updateOrganization request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return updateOrganizationWithHttpInfo(id, contentType, modifyOrganizationReq);
        }

        /**
         * Execute updateOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return updateOrganizationAsync(id, contentType, modifyOrganizationReq, _callback);
        }
    }

    /**
     * 修改组织关系基本信息
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APIupdateOrganizationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateOrganizationRequest updateOrganization(String id, String contentType) {
        return new APIupdateOrganizationRequest(id, contentType);
    }
}
