/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.api;

import cn.idmesh.model.Bucket;
import cn.idmesh.model.KeyValuePair;
import cn.idmesh.model.ModelObject;
import cn.idmesh.ApiCallback;
import cn.idmesh.ApiClient;
import cn.idmesh.ApiException;
import cn.idmesh.ApiResponse;
import cn.idmesh.Configuration;
import cn.idmesh.Pair;

import com.google.gson.reflect.TypeToken;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteBucketCall(String bucket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBucketValidateBeforeCall(String bucket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling deleteBucket(Async)");
        }

        return deleteBucketCall(bucket, _callback);

    }


    private ApiResponse<Object> deleteBucketWithHttpInfo(String bucket) throws ApiException {
        okhttp3.Call localVarCall = deleteBucketValidateBeforeCall(bucket, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBucketAsync(String bucket, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBucketValidateBeforeCall(bucket, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteBucketRequest {
        private final String bucket;

        private APIdeleteBucketRequest(String bucket) {
            this.bucket = bucket;
        }

        /**
         * Build call for deleteBucket
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBucketCall(bucket, _callback);
        }

        /**
         * Execute deleteBucket request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteBucketWithHttpInfo(bucket);
            return localVarResp.getData();
        }

        /**
         * Execute deleteBucket request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteBucketWithHttpInfo(bucket);
        }

        /**
         * Execute deleteBucket request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteBucketAsync(bucket, _callback);
        }
    }

    /**
     * 删除 Bucket
     * 删除bucket会间接删掉bucket下所有object
     * @param bucket bucket 名称 (required)
     * @return APIdeleteBucketRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteBucketRequest deleteBucket(String bucket) {
        return new APIdeleteBucketRequest(bucket);
    }
    private okhttp3.Call deleteObjectCall(String bucket, String key, String keyAsPrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}/objects/{key}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyAsPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_as_prefix", keyAsPrefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectValidateBeforeCall(String bucket, String key, String keyAsPrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling deleteObject(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteObject(Async)");
        }

        return deleteObjectCall(bucket, key, keyAsPrefix, _callback);

    }


    private ApiResponse<ModelObject> deleteObjectWithHttpInfo(String bucket, String key, String keyAsPrefix) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(bucket, key, keyAsPrefix, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteObjectAsync(String bucket, String key, String keyAsPrefix, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(bucket, key, keyAsPrefix, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteObjectRequest {
        private final String bucket;
        private final String key;
        private String keyAsPrefix;

        private APIdeleteObjectRequest(String bucket, String key) {
            this.bucket = bucket;
            this.key = key;
        }

        /**
         * Set keyAsPrefix
         * @param keyAsPrefix 将键名称作为前缀执行删除 (optional)
         * @return APIdeleteObjectRequest
         */
        public APIdeleteObjectRequest keyAsPrefix(String keyAsPrefix) {
            this.keyAsPrefix = keyAsPrefix;
            return this;
        }

        /**
         * Build call for deleteObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteObjectCall(bucket, key, keyAsPrefix, _callback);
        }

        /**
         * Execute deleteObject request
         * @return ModelObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ModelObject execute() throws ApiException {
            ApiResponse<ModelObject> localVarResp = deleteObjectWithHttpInfo(bucket, key, keyAsPrefix);
            return localVarResp.getData();
        }

        /**
         * Execute deleteObject request with HTTP info returned
         * @return ApiResponse&lt;ModelObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelObject> executeWithHttpInfo() throws ApiException {
            return deleteObjectWithHttpInfo(bucket, key, keyAsPrefix);
        }

        /**
         * Execute deleteObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelObject> _callback) throws ApiException {
            return deleteObjectAsync(bucket, key, keyAsPrefix, _callback);
        }
    }

    /**
     * 删除 Object
     * 
     * @param bucket bucket名称 (required)
     * @param key 键 (required)
     * @return APIdeleteObjectRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteObjectRequest deleteObject(String bucket, String key) {
        return new APIdeleteObjectRequest(bucket, key);
    }
    private okhttp3.Call getBucketCall(String bucket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBucketValidateBeforeCall(String bucket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getBucket(Async)");
        }

        return getBucketCall(bucket, _callback);

    }


    private ApiResponse<Bucket> getBucketWithHttpInfo(String bucket) throws ApiException {
        okhttp3.Call localVarCall = getBucketValidateBeforeCall(bucket, null);
        Type localVarReturnType = new TypeToken<Bucket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBucketAsync(String bucket, final ApiCallback<Bucket> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBucketValidateBeforeCall(bucket, _callback);
        Type localVarReturnType = new TypeToken<Bucket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetBucketRequest {
        private final String bucket;

        private APIgetBucketRequest(String bucket) {
            this.bucket = bucket;
        }

        /**
         * Build call for getBucket
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBucketCall(bucket, _callback);
        }

        /**
         * Execute getBucket request
         * @return Bucket
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Bucket execute() throws ApiException {
            ApiResponse<Bucket> localVarResp = getBucketWithHttpInfo(bucket);
            return localVarResp.getData();
        }

        /**
         * Execute getBucket request with HTTP info returned
         * @return ApiResponse&lt;Bucket&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Bucket> executeWithHttpInfo() throws ApiException {
            return getBucketWithHttpInfo(bucket);
        }

        /**
         * Execute getBucket request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Bucket> _callback) throws ApiException {
            return getBucketAsync(bucket, _callback);
        }
    }

    /**
     * 获取 Bucket 详情
     * 
     * @param bucket bucket 名称 (required)
     * @return APIgetBucketRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetBucketRequest getBucket(String bucket) {
        return new APIgetBucketRequest(bucket);
    }
    private okhttp3.Call getBucketsCall(String last, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBucketsValidateBeforeCall(String last, Integer limit, final ApiCallback _callback) throws ApiException {
        return getBucketsCall(last, limit, _callback);

    }


    private ApiResponse<List<Bucket>> getBucketsWithHttpInfo(String last, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getBucketsValidateBeforeCall(last, limit, null);
        Type localVarReturnType = new TypeToken<List<Bucket>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBucketsAsync(String last, Integer limit, final ApiCallback<List<Bucket>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBucketsValidateBeforeCall(last, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Bucket>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetBucketsRequest {
        private String last;
        private Integer limit;

        private APIgetBucketsRequest() {
        }

        /**
         * Set last
         * @param last 最后一个bucket的名字 (optional)
         * @return APIgetBucketsRequest
         */
        public APIgetBucketsRequest last(String last) {
            this.last = last;
            return this;
        }

        /**
         * Set limit
         * @param limit 页大小 (optional)
         * @return APIgetBucketsRequest
         */
        public APIgetBucketsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getBuckets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBucketsCall(last, limit, _callback);
        }

        /**
         * Execute getBuckets request
         * @return List&lt;Bucket&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<Bucket> execute() throws ApiException {
            ApiResponse<List<Bucket>> localVarResp = getBucketsWithHttpInfo(last, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getBuckets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Bucket&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Bucket>> executeWithHttpInfo() throws ApiException {
            return getBucketsWithHttpInfo(last, limit);
        }

        /**
         * Execute getBuckets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Bucket>> _callback) throws ApiException {
            return getBucketsAsync(last, limit, _callback);
        }
    }

    /**
     * 获取 Bucket 列表
     * 
     * @return APIgetBucketsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetBucketsRequest getBuckets() {
        return new APIgetBucketsRequest();
    }
    private okhttp3.Call getObjectCall(String bucket, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}/objects/{key}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectValidateBeforeCall(String bucket, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getObject(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getObject(Async)");
        }

        return getObjectCall(bucket, key, _callback);

    }


    private ApiResponse<ModelObject> getObjectWithHttpInfo(String bucket, String key) throws ApiException {
        okhttp3.Call localVarCall = getObjectValidateBeforeCall(bucket, key, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectAsync(String bucket, String key, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectValidateBeforeCall(bucket, key, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetObjectRequest {
        private final String bucket;
        private final String key;

        private APIgetObjectRequest(String bucket, String key) {
            this.bucket = bucket;
            this.key = key;
        }

        /**
         * Build call for getObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectCall(bucket, key, _callback);
        }

        /**
         * Execute getObject request
         * @return ModelObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ModelObject execute() throws ApiException {
            ApiResponse<ModelObject> localVarResp = getObjectWithHttpInfo(bucket, key);
            return localVarResp.getData();
        }

        /**
         * Execute getObject request with HTTP info returned
         * @return ApiResponse&lt;ModelObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelObject> executeWithHttpInfo() throws ApiException {
            return getObjectWithHttpInfo(bucket, key);
        }

        /**
         * Execute getObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelObject> _callback) throws ApiException {
            return getObjectAsync(bucket, key, _callback);
        }
    }

    /**
     * 获取 Object 详情
     * 
     * @param bucket bucket名称 (required)
     * @param key 键 (required)
     * @return APIgetObjectRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetObjectRequest getObject(String bucket, String key) {
        return new APIgetObjectRequest(bucket, key);
    }
    private okhttp3.Call getObjectsCall(String bucket, String last, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}/objects"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsValidateBeforeCall(String bucket, String last, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getObjects(Async)");
        }

        return getObjectsCall(bucket, last, limit, _callback);

    }


    private ApiResponse<List<ModelObject>> getObjectsWithHttpInfo(String bucket, String last, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(bucket, last, limit, null);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectsAsync(String bucket, String last, Integer limit, final ApiCallback<List<ModelObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(bucket, last, limit, _callback);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetObjectsRequest {
        private final String bucket;
        private String last;
        private Integer limit;

        private APIgetObjectsRequest(String bucket) {
            this.bucket = bucket;
        }

        /**
         * Set last
         * @param last 最后一个object的名字 (optional)
         * @return APIgetObjectsRequest
         */
        public APIgetObjectsRequest last(String last) {
            this.last = last;
            return this;
        }

        /**
         * Set limit
         * @param limit 页大小 (optional)
         * @return APIgetObjectsRequest
         */
        public APIgetObjectsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectsCall(bucket, last, limit, _callback);
        }

        /**
         * Execute getObjects request
         * @return List&lt;ModelObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelObject> execute() throws ApiException {
            ApiResponse<List<ModelObject>> localVarResp = getObjectsWithHttpInfo(bucket, last, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getObjects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelObject&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelObject>> executeWithHttpInfo() throws ApiException {
            return getObjectsWithHttpInfo(bucket, last, limit);
        }

        /**
         * Execute getObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelObject>> _callback) throws ApiException {
            return getObjectsAsync(bucket, last, limit, _callback);
        }
    }

    /**
     * 获取 Object 列表
     * 
     * @param bucket bucket名称 (required)
     * @return APIgetObjectsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetObjectsRequest getObjects(String bucket) {
        return new APIgetObjectsRequest(bucket);
    }
    private okhttp3.Call saveObjectCall(String bucket, KeyValuePair keyValuePair, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyValuePair;

        // create path and map variables
        String localVarPath = "/v1/buckets/{bucket}/objects"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveObjectValidateBeforeCall(String bucket, KeyValuePair keyValuePair, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling saveObject(Async)");
        }

        return saveObjectCall(bucket, keyValuePair, _callback);

    }


    private ApiResponse<Object> saveObjectWithHttpInfo(String bucket, KeyValuePair keyValuePair) throws ApiException {
        okhttp3.Call localVarCall = saveObjectValidateBeforeCall(bucket, keyValuePair, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveObjectAsync(String bucket, KeyValuePair keyValuePair, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveObjectValidateBeforeCall(bucket, keyValuePair, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsaveObjectRequest {
        private final String bucket;
        private KeyValuePair keyValuePair;

        private APIsaveObjectRequest(String bucket) {
            this.bucket = bucket;
        }

        /**
         * Set keyValuePair
         * @param keyValuePair  (optional)
         * @return APIsaveObjectRequest
         */
        public APIsaveObjectRequest keyValuePair(KeyValuePair keyValuePair) {
            this.keyValuePair = keyValuePair;
            return this;
        }

        /**
         * Build call for saveObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveObjectCall(bucket, keyValuePair, _callback);
        }

        /**
         * Execute saveObject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = saveObjectWithHttpInfo(bucket, keyValuePair);
            return localVarResp.getData();
        }

        /**
         * Execute saveObject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return saveObjectWithHttpInfo(bucket, keyValuePair);
        }

        /**
         * Execute saveObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return saveObjectAsync(bucket, keyValuePair, _callback);
        }
    }

    /**
     * 创建 Object
     * - 如果path中的bucket没有创建，会默认创建 - 如果key已经存在，会更新原有的值 - value 大小最大为 1M 字节 - bucket 最长为 255 个字节
     * @param bucket bucket名称 (required)
     * @return APIsaveObjectRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIsaveObjectRequest saveObject(String bucket) {
        return new APIsaveObjectRequest(bucket);
    }
}
