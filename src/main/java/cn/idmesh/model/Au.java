/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;

import cn.idmesh.JSON;

/**
 * Au
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Au {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AUTH_UNIT_ID = "auth_unit_id";
  @SerializedName(SERIALIZED_NAME_AUTH_UNIT_ID)
  private String authUnitId;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private AuthUnitResouce resource;

  public static final String SERIALIZED_NAME_RESOURCE_SET = "resource_set";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SET)
  private AuResourceSet resourceSet;

  public static final String SERIALIZED_NAME_AFFECT = "affect";
  @SerializedName(SERIALIZED_NAME_AFFECT)
  private String affect;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "application_name";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_IDENTITY_ID = "identity_id";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ID)
  private String identityId;

  public static final String SERIALIZED_NAME_IDENTITY_TYPE = "identity_type";
  @SerializedName(SERIALIZED_NAME_IDENTITY_TYPE)
  private String identityType;

  public static final String SERIALIZED_NAME_IDENTITY_NAME = "identity_name";
  @SerializedName(SERIALIZED_NAME_IDENTITY_NAME)
  private String identityName;

  public static final String SERIALIZED_NAME_INHERITED = "inherited";
  @SerializedName(SERIALIZED_NAME_INHERITED)
  private Boolean inherited;

  public Au() {
  }
   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * Get authUnitId
   * @return authUnitId
  **/
  @javax.annotation.Nonnull
  public String getAuthUnitId() {
    return authUnitId;
  }


  public void setAuthUnitId(String authUnitId) {
    this.authUnitId = authUnitId;
  }

   /**
   * Get resource
   * @return resource
  **/
  @javax.annotation.Nullable
  public AuthUnitResouce getResource() {
    return resource;
  }


  public void setResource(AuthUnitResouce resource) {
    this.resource = resource;
  }

   /**
   * Get resourceSet
   * @return resourceSet
  **/
  @javax.annotation.Nullable
  public AuResourceSet getResourceSet() {
    return resourceSet;
  }


  public void setResourceSet(AuResourceSet resourceSet) {
    this.resourceSet = resourceSet;
  }

   /**
   * allow/deny
   * @return affect
  **/
  @javax.annotation.Nonnull
  public String getAffect() {
    return affect;
  }


  public void setAffect(String affect) {
    this.affect = affect;
  }

   /**
   * 当resource存在时
   * @return resourceType
  **/
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }


  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

   /**
   * 当 resource 存在时表示 resource_code  当  resource_set存在时表示 resource_set_code
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }


  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

   /**
   * Get identityId
   * @return identityId
  **/
  @javax.annotation.Nonnull
  public String getIdentityId() {
    return identityId;
  }


  public void setIdentityId(String identityId) {
    this.identityId = identityId;
  }

   /**
   * Get identityType
   * @return identityType
  **/
  @javax.annotation.Nonnull
  public String getIdentityType() {
    return identityType;
  }


  public void setIdentityType(String identityType) {
    this.identityType = identityType;
  }

   /**
   * Get identityName
   * @return identityName
  **/
  @javax.annotation.Nonnull
  public String getIdentityName() {
    return identityName;
  }


  public void setIdentityName(String identityName) {
    this.identityName = identityName;
  }

   /**
   * Get inherited
   * @return inherited
  **/
  @javax.annotation.Nonnull
  public Boolean getInherited() {
    return inherited;
  }


  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Au au = (Au) o;
    return Objects.equals(this.id, au.id) &&
        Objects.equals(this.authUnitId, au.authUnitId) &&
        Objects.equals(this.resource, au.resource) &&
        Objects.equals(this.resourceSet, au.resourceSet) &&
        Objects.equals(this.affect, au.affect) &&
        Objects.equals(this.resourceType, au.resourceType) &&
        Objects.equals(this.code, au.code) &&
        Objects.equals(this.description, au.description) &&
        Objects.equals(this.applicationName, au.applicationName) &&
        Objects.equals(this.identityId, au.identityId) &&
        Objects.equals(this.identityType, au.identityType) &&
        Objects.equals(this.identityName, au.identityName) &&
        Objects.equals(this.inherited, au.inherited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, authUnitId, resource, resourceSet, affect, resourceType, code, description, applicationName, identityId, identityType, identityName, inherited);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Au {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    authUnitId: ").append(toIndentedString(authUnitId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    resourceSet: ").append(toIndentedString(resourceSet)).append("\n");
    sb.append("    affect: ").append(toIndentedString(affect)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    identityId: ").append(toIndentedString(identityId)).append("\n");
    sb.append("    identityType: ").append(toIndentedString(identityType)).append("\n");
    sb.append("    identityName: ").append(toIndentedString(identityName)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("auth_unit_id");
    openapiFields.add("resource");
    openapiFields.add("resource_set");
    openapiFields.add("affect");
    openapiFields.add("resource_type");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("application_name");
    openapiFields.add("identity_id");
    openapiFields.add("identity_type");
    openapiFields.add("identity_name");
    openapiFields.add("inherited");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("auth_unit_id");
    openapiRequiredFields.add("affect");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("application_name");
    openapiRequiredFields.add("identity_id");
    openapiRequiredFields.add("identity_type");
    openapiRequiredFields.add("identity_name");
    openapiRequiredFields.add("inherited");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Au
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Au.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Au is not found in the empty JSON string", Au.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Au.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("auth_unit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_unit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_unit_id").toString()));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        AuthUnitResouce.validateJsonElement(jsonObj.get("resource"));
      }
      // validate the optional field `resource_set`
      if (jsonObj.get("resource_set") != null && !jsonObj.get("resource_set").isJsonNull()) {
        AuResourceSet.validateJsonElement(jsonObj.get("resource_set"));
      }
      if (!jsonObj.get("affect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affect").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_name").toString()));
      }
      if (!jsonObj.get("identity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_id").toString()));
      }
      if (!jsonObj.get("identity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_type").toString()));
      }
      if (!jsonObj.get("identity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Au.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Au' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Au> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Au.class));

       return (TypeAdapter<T>) new TypeAdapter<Au>() {
           @Override
           public void write(JsonWriter out, Au value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Au read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Au given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Au
  * @throws IOException if the JSON string is invalid with respect to Au
  */
  public static Au fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Au.class);
  }

 /**
  * Convert an instance of Au to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

