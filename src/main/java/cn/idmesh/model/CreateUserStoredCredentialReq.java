/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;

import cn.idmesh.JSON;

/**
 * CreateUserStoredCredentialReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateUserStoredCredentialReq {
  public static final String SERIALIZED_NAME_PROVIDER_CODE = "provider_code";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CODE)
  private String providerCode;

  public static final String SERIALIZED_NAME_IDP_CONFIG_ID = "idp_config_id";
  @SerializedName(SERIALIZED_NAME_IDP_CONFIG_ID)
  private Integer idpConfigId;

  public static final String SERIALIZED_NAME_ID1 = "id1";
  @SerializedName(SERIALIZED_NAME_ID1)
  private String id1;

  public static final String SERIALIZED_NAME_ID2 = "id2";
  @SerializedName(SERIALIZED_NAME_ID2)
  private String id2;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_REALNAME = "realname";
  @SerializedName(SERIALIZED_NAME_REALNAME)
  private String realname;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_ID_PROVIDER_CONNECTION = "id_provider_connection";
  @SerializedName(SERIALIZED_NAME_ID_PROVIDER_CONNECTION)
  private String idProviderConnection;

  public CreateUserStoredCredentialReq() {
  }
   /**
   * 社会化身份源code
   * @return providerCode
  **/
  @javax.annotation.Nonnull
  public String getProviderCode() {
    return providerCode;
  }


  public void setProviderCode(String providerCode) {
    this.providerCode = providerCode;
  }

   /**
   * 社会化登录配置的ID
   * @return idpConfigId
  **/
  @javax.annotation.Nonnull
  public Integer getIdpConfigId() {
    return idpConfigId;
  }


  public void setIdpConfigId(Integer idpConfigId) {
    this.idpConfigId = idpConfigId;
  }

   /**
   * 社会化身份标识1，如openid
   * @return id1
  **/
  @javax.annotation.Nonnull
  public String getId1() {
    return id1;
  }


  public void setId1(String id1) {
    this.id1 = id1;
  }

   /**
   * 社会化身份标识2，如unionid
   * @return id2
  **/
  @javax.annotation.Nullable
  public String getId2() {
    return id2;
  }


  public void setId2(String id2) {
    this.id2 = id2;
  }

   /**
   * 用户id
   * @return userId
  **/
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }

   /**
   * 更多社会化身份标识
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

   /**
   * 状态
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }

   /**
   * 昵称
   * @return nickname
  **/
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    this.nickname = nickname;
  }

   /**
   * 头像
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }


  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }

   /**
   * 真实姓名
   * @return realname
  **/
  @javax.annotation.Nullable
  public String getRealname() {
    return realname;
  }


  public void setRealname(String realname) {
    this.realname = realname;
  }

   /**
   * 手机
   * @return mobile
  **/
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    this.mobile = mobile;
  }

   /**
   * 邮箱
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }

   /**
   * 性别
   * @return gender
  **/
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }

   /**
   * Get idProviderConnection
   * @return idProviderConnection
  **/
  @javax.annotation.Nullable
  public String getIdProviderConnection() {
    return idProviderConnection;
  }


  public void setIdProviderConnection(String idProviderConnection) {
    this.idProviderConnection = idProviderConnection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserStoredCredentialReq createUserStoredCredentialReq = (CreateUserStoredCredentialReq) o;
    return Objects.equals(this.providerCode, createUserStoredCredentialReq.providerCode) &&
        Objects.equals(this.idpConfigId, createUserStoredCredentialReq.idpConfigId) &&
        Objects.equals(this.id1, createUserStoredCredentialReq.id1) &&
        Objects.equals(this.id2, createUserStoredCredentialReq.id2) &&
        Objects.equals(this.userId, createUserStoredCredentialReq.userId) &&
        Objects.equals(this.metadata, createUserStoredCredentialReq.metadata) &&
        Objects.equals(this.status, createUserStoredCredentialReq.status) &&
        Objects.equals(this.nickname, createUserStoredCredentialReq.nickname) &&
        Objects.equals(this.avatar, createUserStoredCredentialReq.avatar) &&
        Objects.equals(this.realname, createUserStoredCredentialReq.realname) &&
        Objects.equals(this.mobile, createUserStoredCredentialReq.mobile) &&
        Objects.equals(this.email, createUserStoredCredentialReq.email) &&
        Objects.equals(this.gender, createUserStoredCredentialReq.gender) &&
        Objects.equals(this.idProviderConnection, createUserStoredCredentialReq.idProviderConnection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerCode, idpConfigId, id1, id2, userId, metadata, status, nickname, avatar, realname, mobile, email, gender, idProviderConnection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserStoredCredentialReq {\n");
    sb.append("    providerCode: ").append(toIndentedString(providerCode)).append("\n");
    sb.append("    idpConfigId: ").append(toIndentedString(idpConfigId)).append("\n");
    sb.append("    id1: ").append(toIndentedString(id1)).append("\n");
    sb.append("    id2: ").append(toIndentedString(id2)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    realname: ").append(toIndentedString(realname)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    idProviderConnection: ").append(toIndentedString(idProviderConnection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provider_code");
    openapiFields.add("idp_config_id");
    openapiFields.add("id1");
    openapiFields.add("id2");
    openapiFields.add("user_id");
    openapiFields.add("metadata");
    openapiFields.add("status");
    openapiFields.add("nickname");
    openapiFields.add("avatar");
    openapiFields.add("realname");
    openapiFields.add("mobile");
    openapiFields.add("email");
    openapiFields.add("gender");
    openapiFields.add("id_provider_connection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider_code");
    openapiRequiredFields.add("idp_config_id");
    openapiRequiredFields.add("id1");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateUserStoredCredentialReq
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUserStoredCredentialReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUserStoredCredentialReq is not found in the empty JSON string", CreateUserStoredCredentialReq.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUserStoredCredentialReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("provider_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_code").toString()));
      }
      if (!jsonObj.get("id1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id1").toString()));
      }
      if ((jsonObj.get("id2") != null && !jsonObj.get("id2").isJsonNull()) && !jsonObj.get("id2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id2").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("realname") != null && !jsonObj.get("realname").isJsonNull()) && !jsonObj.get("realname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realname").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("id_provider_connection") != null && !jsonObj.get("id_provider_connection").isJsonNull()) && !jsonObj.get("id_provider_connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_provider_connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_provider_connection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUserStoredCredentialReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUserStoredCredentialReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUserStoredCredentialReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUserStoredCredentialReq.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUserStoredCredentialReq>() {
           @Override
           public void write(JsonWriter out, CreateUserStoredCredentialReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUserStoredCredentialReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateUserStoredCredentialReq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateUserStoredCredentialReq
  * @throws IOException if the JSON string is invalid with respect to CreateUserStoredCredentialReq
  */
  public static CreateUserStoredCredentialReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUserStoredCredentialReq.class);
  }

 /**
  * Convert an instance of CreateUserStoredCredentialReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

