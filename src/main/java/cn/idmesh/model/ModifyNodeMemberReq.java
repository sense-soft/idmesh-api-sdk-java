/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;

import cn.idmesh.JSON;

/**
 * ModifyNodeMemberReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModifyNodeMemberReq {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private String isDefault;

  public static final String SERIALIZED_NAME_SOURCE_NODE_ID = "source_node_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_NODE_ID)
  private String sourceNodeId;

  public static final String SERIALIZED_NAME_DEST_NODE_ID = "dest_node_id";
  @SerializedName(SERIALIZED_NAME_DEST_NODE_ID)
  private String destNodeId;

  public ModifyNodeMemberReq() {
  }
   /**
   * 移动节点move, 设置为默认关系as-default
   * @return action
  **/
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }

   /**
   * 1是，0否
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public String getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(String isDefault) {
    this.isDefault = isDefault;
  }

   /**
   * 移动前节点ID
   * @return sourceNodeId
  **/
  @javax.annotation.Nullable
  public String getSourceNodeId() {
    return sourceNodeId;
  }


  public void setSourceNodeId(String sourceNodeId) {
    this.sourceNodeId = sourceNodeId;
  }

   /**
   * 移动后节点ID
   * @return destNodeId
  **/
  @javax.annotation.Nullable
  public String getDestNodeId() {
    return destNodeId;
  }


  public void setDestNodeId(String destNodeId) {
    this.destNodeId = destNodeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyNodeMemberReq modifyNodeMemberReq = (ModifyNodeMemberReq) o;
    return Objects.equals(this.action, modifyNodeMemberReq.action) &&
        Objects.equals(this.isDefault, modifyNodeMemberReq.isDefault) &&
        Objects.equals(this.sourceNodeId, modifyNodeMemberReq.sourceNodeId) &&
        Objects.equals(this.destNodeId, modifyNodeMemberReq.destNodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, isDefault, sourceNodeId, destNodeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyNodeMemberReq {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    sourceNodeId: ").append(toIndentedString(sourceNodeId)).append("\n");
    sb.append("    destNodeId: ").append(toIndentedString(destNodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("is_default");
    openapiFields.add("source_node_id");
    openapiFields.add("dest_node_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModifyNodeMemberReq
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyNodeMemberReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyNodeMemberReq is not found in the empty JSON string", ModifyNodeMemberReq.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyNodeMemberReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("is_default") != null && !jsonObj.get("is_default").isJsonNull()) && !jsonObj.get("is_default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_default").toString()));
      }
      if ((jsonObj.get("source_node_id") != null && !jsonObj.get("source_node_id").isJsonNull()) && !jsonObj.get("source_node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_node_id").toString()));
      }
      if ((jsonObj.get("dest_node_id") != null && !jsonObj.get("dest_node_id").isJsonNull()) && !jsonObj.get("dest_node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest_node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest_node_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyNodeMemberReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyNodeMemberReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyNodeMemberReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyNodeMemberReq.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyNodeMemberReq>() {
           @Override
           public void write(JsonWriter out, ModifyNodeMemberReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyNodeMemberReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModifyNodeMemberReq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModifyNodeMemberReq
  * @throws IOException if the JSON string is invalid with respect to ModifyNodeMemberReq
  */
  public static ModifyNodeMemberReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyNodeMemberReq.class);
  }

 /**
  * Convert an instance of ModifyNodeMemberReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

