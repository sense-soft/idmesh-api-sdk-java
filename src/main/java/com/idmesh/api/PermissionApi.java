/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.api;

import com.idmesh.ApiCallback;
import com.idmesh.ApiClient;
import com.idmesh.ApiException;
import com.idmesh.ApiResponse;
import com.idmesh.Configuration;
import com.idmesh.Pair;
import com.idmesh.ProgressRequestBody;
import com.idmesh.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.idmesh.model.Au;
import com.idmesh.model.AuthUnitRet;
import com.idmesh.model.AuthUnitWithPage;
import com.idmesh.model.BadRequest;
import com.idmesh.model.BatchCreateAuthUnitRuleReq;
import com.idmesh.model.BatchDeleteAuthUnitRuleReq;
import com.idmesh.model.BatchDeleteResourceReq;
import com.idmesh.model.CreateResourceReq;
import com.idmesh.model.CreateResourceSetMemberReq;
import com.idmesh.model.CreateResourceSetMemberRet;
import com.idmesh.model.CreateResourceSetReq;
import com.idmesh.model.CreateResourceSetRet;
import com.idmesh.model.CreateResoureRet;
import com.idmesh.model.ModifyAuthUnitRequest;
import com.idmesh.model.ModifyResourceSetMemberReq;
import com.idmesh.model.ModifyResourceSetReq;
import com.idmesh.model.ResourceEntity;
import com.idmesh.model.ResourceSet;
import com.idmesh.model.ResourceSetMember;
import com.idmesh.model.ResourceSetMemberWithPage;
import com.idmesh.model.ResourceSetWithPage;
import com.idmesh.model.ResourceWithPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAuthUnitRulesCall(String contentType, String xTenantId, BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateAuthUnitRuleReq;

        // create path and map variables
        String localVarPath = "/v1/batch/auth-unit-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xTenantId != null) {
            localVarHeaderParams.put("X-Tenant-Id", localVarApiClient.parameterToString(xTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthUnitRulesValidateBeforeCall(String contentType, String xTenantId, BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createAuthUnitRules(Async)");
        }

        return createAuthUnitRulesCall(contentType, xTenantId, batchCreateAuthUnitRuleReq, _callback);

    }


    private ApiResponse<Object> createAuthUnitRulesWithHttpInfo(String contentType, String xTenantId, BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq) throws ApiException {
        okhttp3.Call localVarCall = createAuthUnitRulesValidateBeforeCall(contentType, xTenantId, batchCreateAuthUnitRuleReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAuthUnitRulesAsync(String contentType, String xTenantId, BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthUnitRulesValidateBeforeCall(contentType, xTenantId, batchCreateAuthUnitRuleReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAuthUnitRulesRequest {
        private final String contentType;
        private String xTenantId;
        private BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq;

        private APIcreateAuthUnitRulesRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set xTenantId
         * @param xTenantId token为开发者身份时必填 (optional)
         * @return APIcreateAuthUnitRulesRequest
         */
        public APIcreateAuthUnitRulesRequest xTenantId(String xTenantId) {
            this.xTenantId = xTenantId;
            return this;
        }

        /**
         * Set batchCreateAuthUnitRuleReq
         * @param batchCreateAuthUnitRuleReq  (optional)
         * @return APIcreateAuthUnitRulesRequest
         */
        public APIcreateAuthUnitRulesRequest batchCreateAuthUnitRuleReq(BatchCreateAuthUnitRuleReq batchCreateAuthUnitRuleReq) {
            this.batchCreateAuthUnitRuleReq = batchCreateAuthUnitRuleReq;
            return this;
        }

        /**
         * Build call for createAuthUnitRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAuthUnitRulesCall(contentType, xTenantId, batchCreateAuthUnitRuleReq, _callback);
        }

        /**
         * Execute createAuthUnitRules request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createAuthUnitRulesWithHttpInfo(contentType, xTenantId, batchCreateAuthUnitRuleReq);
            return localVarResp.getData();
        }

        /**
         * Execute createAuthUnitRules request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createAuthUnitRulesWithHttpInfo(contentType, xTenantId, batchCreateAuthUnitRuleReq);
        }

        /**
         * Execute createAuthUnitRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createAuthUnitRulesAsync(contentType, xTenantId, batchCreateAuthUnitRuleReq, _callback);
        }
    }

    /**
     * 批量创建授权规则
     * 
     * @param contentType  (required)
     * @return APIcreateAuthUnitRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAuthUnitRulesRequest createAuthUnitRules(String contentType) {
        return new APIcreateAuthUnitRulesRequest(contentType);
    }
    private okhttp3.Call createResourceCall(String contentType, CreateResourceReq createResourceReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResourceReq;

        // create path and map variables
        String localVarPath = "/v1/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceValidateBeforeCall(String contentType, CreateResourceReq createResourceReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createResource(Async)");
        }

        return createResourceCall(contentType, createResourceReq, _callback);

    }


    private ApiResponse<CreateResoureRet> createResourceWithHttpInfo(String contentType, CreateResourceReq createResourceReq) throws ApiException {
        okhttp3.Call localVarCall = createResourceValidateBeforeCall(contentType, createResourceReq, null);
        Type localVarReturnType = new TypeToken<CreateResoureRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createResourceAsync(String contentType, CreateResourceReq createResourceReq, final ApiCallback<CreateResoureRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceValidateBeforeCall(contentType, createResourceReq, _callback);
        Type localVarReturnType = new TypeToken<CreateResoureRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateResourceRequest {
        private final String contentType;
        private CreateResourceReq createResourceReq;

        private APIcreateResourceRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createResourceReq
         * @param createResourceReq  (optional)
         * @return APIcreateResourceRequest
         */
        public APIcreateResourceRequest createResourceReq(CreateResourceReq createResourceReq) {
            this.createResourceReq = createResourceReq;
            return this;
        }

        /**
         * Build call for createResource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createResourceCall(contentType, createResourceReq, _callback);
        }

        /**
         * Execute createResource request
         * @return CreateResoureRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CreateResoureRet execute() throws ApiException {
            ApiResponse<CreateResoureRet> localVarResp = createResourceWithHttpInfo(contentType, createResourceReq);
            return localVarResp.getData();
        }

        /**
         * Execute createResource request with HTTP info returned
         * @return ApiResponse&lt;CreateResoureRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateResoureRet> executeWithHttpInfo() throws ApiException {
            return createResourceWithHttpInfo(contentType, createResourceReq);
        }

        /**
         * Execute createResource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateResoureRet> _callback) throws ApiException {
            return createResourceAsync(contentType, createResourceReq, _callback);
        }
    }

    /**
     * 创建资源
     * 
     * @param contentType  (required)
     * @return APIcreateResourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateResourceRequest createResource(String contentType) {
        return new APIcreateResourceRequest(contentType);
    }
    private okhttp3.Call createResourceSetCall(String contentType, String xTenantId, CreateResourceSetReq createResourceSetReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResourceSetReq;

        // create path and map variables
        String localVarPath = "/v1/resource-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xTenantId != null) {
            localVarHeaderParams.put("X-Tenant-id", localVarApiClient.parameterToString(xTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceSetValidateBeforeCall(String contentType, String xTenantId, CreateResourceSetReq createResourceSetReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createResourceSet(Async)");
        }

        // verify the required parameter 'xTenantId' is set
        if (xTenantId == null) {
            throw new ApiException("Missing the required parameter 'xTenantId' when calling createResourceSet(Async)");
        }

        return createResourceSetCall(contentType, xTenantId, createResourceSetReq, _callback);

    }


    private ApiResponse<CreateResourceSetRet> createResourceSetWithHttpInfo(String contentType, String xTenantId, CreateResourceSetReq createResourceSetReq) throws ApiException {
        okhttp3.Call localVarCall = createResourceSetValidateBeforeCall(contentType, xTenantId, createResourceSetReq, null);
        Type localVarReturnType = new TypeToken<CreateResourceSetRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createResourceSetAsync(String contentType, String xTenantId, CreateResourceSetReq createResourceSetReq, final ApiCallback<CreateResourceSetRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceSetValidateBeforeCall(contentType, xTenantId, createResourceSetReq, _callback);
        Type localVarReturnType = new TypeToken<CreateResourceSetRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateResourceSetRequest {
        private final String contentType;
        private final String xTenantId;
        private CreateResourceSetReq createResourceSetReq;

        private APIcreateResourceSetRequest(String contentType, String xTenantId) {
            this.contentType = contentType;
            this.xTenantId = xTenantId;
        }

        /**
         * Set createResourceSetReq
         * @param createResourceSetReq  (optional)
         * @return APIcreateResourceSetRequest
         */
        public APIcreateResourceSetRequest createResourceSetReq(CreateResourceSetReq createResourceSetReq) {
            this.createResourceSetReq = createResourceSetReq;
            return this;
        }

        /**
         * Build call for createResourceSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createResourceSetCall(contentType, xTenantId, createResourceSetReq, _callback);
        }

        /**
         * Execute createResourceSet request
         * @return CreateResourceSetRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CreateResourceSetRet execute() throws ApiException {
            ApiResponse<CreateResourceSetRet> localVarResp = createResourceSetWithHttpInfo(contentType, xTenantId, createResourceSetReq);
            return localVarResp.getData();
        }

        /**
         * Execute createResourceSet request with HTTP info returned
         * @return ApiResponse&lt;CreateResourceSetRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateResourceSetRet> executeWithHttpInfo() throws ApiException {
            return createResourceSetWithHttpInfo(contentType, xTenantId, createResourceSetReq);
        }

        /**
         * Execute createResourceSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateResourceSetRet> _callback) throws ApiException {
            return createResourceSetAsync(contentType, xTenantId, createResourceSetReq, _callback);
        }
    }

    /**
     * 创建资源集合
     * 
     * @param contentType  (required)
     * @param xTenantId 租户id (required)
     * @return APIcreateResourceSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateResourceSetRequest createResourceSet(String contentType, String xTenantId) {
        return new APIcreateResourceSetRequest(contentType, xTenantId);
    }
    private okhttp3.Call createResourceSetMemberCall(String id, String contentType, CreateResourceSetMemberReq createResourceSetMemberReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResourceSetMemberReq;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceSetMemberValidateBeforeCall(String id, String contentType, CreateResourceSetMemberReq createResourceSetMemberReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createResourceSetMember(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createResourceSetMember(Async)");
        }

        return createResourceSetMemberCall(id, contentType, createResourceSetMemberReq, _callback);

    }


    private ApiResponse<CreateResourceSetMemberRet> createResourceSetMemberWithHttpInfo(String id, String contentType, CreateResourceSetMemberReq createResourceSetMemberReq) throws ApiException {
        okhttp3.Call localVarCall = createResourceSetMemberValidateBeforeCall(id, contentType, createResourceSetMemberReq, null);
        Type localVarReturnType = new TypeToken<CreateResourceSetMemberRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createResourceSetMemberAsync(String id, String contentType, CreateResourceSetMemberReq createResourceSetMemberReq, final ApiCallback<CreateResourceSetMemberRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceSetMemberValidateBeforeCall(id, contentType, createResourceSetMemberReq, _callback);
        Type localVarReturnType = new TypeToken<CreateResourceSetMemberRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateResourceSetMemberRequest {
        private final String id;
        private final String contentType;
        private CreateResourceSetMemberReq createResourceSetMemberReq;

        private APIcreateResourceSetMemberRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set createResourceSetMemberReq
         * @param createResourceSetMemberReq  (optional)
         * @return APIcreateResourceSetMemberRequest
         */
        public APIcreateResourceSetMemberRequest createResourceSetMemberReq(CreateResourceSetMemberReq createResourceSetMemberReq) {
            this.createResourceSetMemberReq = createResourceSetMemberReq;
            return this;
        }

        /**
         * Build call for createResourceSetMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createResourceSetMemberCall(id, contentType, createResourceSetMemberReq, _callback);
        }

        /**
         * Execute createResourceSetMember request
         * @return CreateResourceSetMemberRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CreateResourceSetMemberRet execute() throws ApiException {
            ApiResponse<CreateResourceSetMemberRet> localVarResp = createResourceSetMemberWithHttpInfo(id, contentType, createResourceSetMemberReq);
            return localVarResp.getData();
        }

        /**
         * Execute createResourceSetMember request with HTTP info returned
         * @return ApiResponse&lt;CreateResourceSetMemberRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateResourceSetMemberRet> executeWithHttpInfo() throws ApiException {
            return createResourceSetMemberWithHttpInfo(id, contentType, createResourceSetMemberReq);
        }

        /**
         * Execute createResourceSetMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateResourceSetMemberRet> _callback) throws ApiException {
            return createResourceSetMemberAsync(id, contentType, createResourceSetMemberReq, _callback);
        }
    }

    /**
     * 创建资源集合成员
     * 
     * @param id 集合id (required)
     * @param contentType  (required)
     * @return APIcreateResourceSetMemberRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateResourceSetMemberRequest createResourceSetMember(String id, String contentType) {
        return new APIcreateResourceSetMemberRequest(id, contentType);
    }
    private okhttp3.Call deleteAuthUnitRulesCall(String contentType, BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeleteAuthUnitRuleReq;

        // create path and map variables
        String localVarPath = "/v1/batch/auth-unit-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthUnitRulesValidateBeforeCall(String contentType, BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteAuthUnitRules(Async)");
        }

        return deleteAuthUnitRulesCall(contentType, batchDeleteAuthUnitRuleReq, _callback);

    }


    private ApiResponse<Object> deleteAuthUnitRulesWithHttpInfo(String contentType, BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthUnitRulesValidateBeforeCall(contentType, batchDeleteAuthUnitRuleReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAuthUnitRulesAsync(String contentType, BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthUnitRulesValidateBeforeCall(contentType, batchDeleteAuthUnitRuleReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteAuthUnitRulesRequest {
        private final String contentType;
        private BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq;

        private APIdeleteAuthUnitRulesRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set batchDeleteAuthUnitRuleReq
         * @param batchDeleteAuthUnitRuleReq  (optional)
         * @return APIdeleteAuthUnitRulesRequest
         */
        public APIdeleteAuthUnitRulesRequest batchDeleteAuthUnitRuleReq(BatchDeleteAuthUnitRuleReq batchDeleteAuthUnitRuleReq) {
            this.batchDeleteAuthUnitRuleReq = batchDeleteAuthUnitRuleReq;
            return this;
        }

        /**
         * Build call for deleteAuthUnitRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAuthUnitRulesCall(contentType, batchDeleteAuthUnitRuleReq, _callback);
        }

        /**
         * Execute deleteAuthUnitRules request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteAuthUnitRulesWithHttpInfo(contentType, batchDeleteAuthUnitRuleReq);
            return localVarResp.getData();
        }

        /**
         * Execute deleteAuthUnitRules request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteAuthUnitRulesWithHttpInfo(contentType, batchDeleteAuthUnitRuleReq);
        }

        /**
         * Execute deleteAuthUnitRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteAuthUnitRulesAsync(contentType, batchDeleteAuthUnitRuleReq, _callback);
        }
    }

    /**
     * 批量删除授权规则
     * 
     * @param contentType  (required)
     * @return APIdeleteAuthUnitRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAuthUnitRulesRequest deleteAuthUnitRules(String contentType) {
        return new APIdeleteAuthUnitRulesRequest(contentType);
    }
    private okhttp3.Call deleteResourcesCall(String contentType, BatchDeleteResourceReq batchDeleteResourceReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeleteResourceReq;

        // create path and map variables
        String localVarPath = "/v1/batch/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcesValidateBeforeCall(String contentType, BatchDeleteResourceReq batchDeleteResourceReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteResources(Async)");
        }

        return deleteResourcesCall(contentType, batchDeleteResourceReq, _callback);

    }


    private ApiResponse<Object> deleteResourcesWithHttpInfo(String contentType, BatchDeleteResourceReq batchDeleteResourceReq) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(contentType, batchDeleteResourceReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteResourcesAsync(String contentType, BatchDeleteResourceReq batchDeleteResourceReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(contentType, batchDeleteResourceReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteResourcesRequest {
        private final String contentType;
        private BatchDeleteResourceReq batchDeleteResourceReq;

        private APIdeleteResourcesRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set batchDeleteResourceReq
         * @param batchDeleteResourceReq  (optional)
         * @return APIdeleteResourcesRequest
         */
        public APIdeleteResourcesRequest batchDeleteResourceReq(BatchDeleteResourceReq batchDeleteResourceReq) {
            this.batchDeleteResourceReq = batchDeleteResourceReq;
            return this;
        }

        /**
         * Build call for deleteResources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteResourcesCall(contentType, batchDeleteResourceReq, _callback);
        }

        /**
         * Execute deleteResources request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteResourcesWithHttpInfo(contentType, batchDeleteResourceReq);
            return localVarResp.getData();
        }

        /**
         * Execute deleteResources request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteResourcesWithHttpInfo(contentType, batchDeleteResourceReq);
        }

        /**
         * Execute deleteResources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteResourcesAsync(contentType, batchDeleteResourceReq, _callback);
        }
    }

    /**
     * 删除资源
     * 
     * @param contentType  (required)
     * @return APIdeleteResourcesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteResourcesRequest deleteResources(String contentType) {
        return new APIdeleteResourcesRequest(contentType);
    }
    private okhttp3.Call getAuthUnitCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth-units/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthUnitValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAuthUnit(Async)");
        }

        return getAuthUnitCall(id, _callback);

    }


    private ApiResponse<AuthUnitRet> getAuthUnitWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAuthUnitValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AuthUnitRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthUnitAsync(String id, final ApiCallback<AuthUnitRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthUnitValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AuthUnitRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAuthUnitRequest {
        private final String id;

        private APIgetAuthUnitRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getAuthUnit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthUnitCall(id, _callback);
        }

        /**
         * Execute getAuthUnit request
         * @return AuthUnitRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AuthUnitRet execute() throws ApiException {
            ApiResponse<AuthUnitRet> localVarResp = getAuthUnitWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getAuthUnit request with HTTP info returned
         * @return ApiResponse&lt;AuthUnitRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthUnitRet> executeWithHttpInfo() throws ApiException {
            return getAuthUnitWithHttpInfo(id);
        }

        /**
         * Execute getAuthUnit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthUnitRet> _callback) throws ApiException {
            return getAuthUnitAsync(id, _callback);
        }
    }

    /**
     * 按 ID 查询授权单元
     * 
     * @param id au id (required)
     * @return APIgetAuthUnitRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAuthUnitRequest getAuthUnit(String id) {
        return new APIgetAuthUnitRequest(id);
    }
    private okhttp3.Call getAuthUnitsCall(String identityId, String identityType, String identityName, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_id", identityId));
        }

        if (identityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_type", identityType));
        }

        if (identityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_name", identityName));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthUnitsValidateBeforeCall(String identityId, String identityType, String identityName, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        return getAuthUnitsCall(identityId, identityType, identityName, pageNum, pageSize, pageSort, _callback);

    }


    private ApiResponse<AuthUnitWithPage> getAuthUnitsWithHttpInfo(String identityId, String identityType, String identityName, String pageNum, String pageSize, String pageSort) throws ApiException {
        okhttp3.Call localVarCall = getAuthUnitsValidateBeforeCall(identityId, identityType, identityName, pageNum, pageSize, pageSort, null);
        Type localVarReturnType = new TypeToken<AuthUnitWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthUnitsAsync(String identityId, String identityType, String identityName, String pageNum, String pageSize, String pageSort, final ApiCallback<AuthUnitWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthUnitsValidateBeforeCall(identityId, identityType, identityName, pageNum, pageSize, pageSort, _callback);
        Type localVarReturnType = new TypeToken<AuthUnitWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAuthUnitsRequest {
        private String identityId;
        private String identityType;
        private String identityName;
        private String pageNum;
        private String pageSize;
        private String pageSort;

        private APIgetAuthUnitsRequest() {
        }

        /**
         * Set identityId
         * @param identityId 主体id (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest identityId(String identityId) {
            this.identityId = identityId;
            return this;
        }

        /**
         * Set identityType
         * @param identityType 主体类型 (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest identityType(String identityType) {
            this.identityType = identityType;
            return this;
        }

        /**
         * Set identityName
         * @param identityName 主体名称 (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest identityName(String identityName) {
            this.identityName = identityName;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 起始页，默认1 (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest pageNum(String pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小，默认20 (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest pageSize(String pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序方式，格式：字段[排序方式] (optional)
         * @return APIgetAuthUnitsRequest
         */
        public APIgetAuthUnitsRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Build call for getAuthUnits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthUnitsCall(identityId, identityType, identityName, pageNum, pageSize, pageSort, _callback);
        }

        /**
         * Execute getAuthUnits request
         * @return AuthUnitWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public AuthUnitWithPage execute() throws ApiException {
            ApiResponse<AuthUnitWithPage> localVarResp = getAuthUnitsWithHttpInfo(identityId, identityType, identityName, pageNum, pageSize, pageSort);
            return localVarResp.getData();
        }

        /**
         * Execute getAuthUnits request with HTTP info returned
         * @return ApiResponse&lt;AuthUnitWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthUnitWithPage> executeWithHttpInfo() throws ApiException {
            return getAuthUnitsWithHttpInfo(identityId, identityType, identityName, pageNum, pageSize, pageSort);
        }

        /**
         * Execute getAuthUnits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthUnitWithPage> _callback) throws ApiException {
            return getAuthUnitsAsync(identityId, identityType, identityName, pageNum, pageSize, pageSort, _callback);
        }
    }

    /**
     * 获取授权单元列表
     * 
     * @return APIgetAuthUnitsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAuthUnitsRequest getAuthUnits() {
        return new APIgetAuthUnitsRequest();
    }
    private okhttp3.Call getAuthUnitsRulesCall(String rid, String applicationId, String type, String code, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth-units/{rid}/rules"
            .replace("{" + "rid" + "}", localVarApiClient.escapeString(rid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (selfOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("self_only", selfOnly));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_id", resourceId));
        }

        if (resourceMatchAllResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_match_all_resources", resourceMatchAllResources));
        }

        if (resourceMatchAllActions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_match_all_actions", resourceMatchAllActions));
        }

        if (resourceSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_set_id", resourceSetId));
        }

        if (pageMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_mode", pageMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthUnitsRulesValidateBeforeCall(String rid, String applicationId, String type, String code, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling getAuthUnitsRules(Async)");
        }

        return getAuthUnitsRulesCall(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);

    }


    private ApiResponse<List<Au>> getAuthUnitsRulesWithHttpInfo(String rid, String applicationId, String type, String code, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode) throws ApiException {
        okhttp3.Call localVarCall = getAuthUnitsRulesValidateBeforeCall(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, null);
        Type localVarReturnType = new TypeToken<List<Au>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthUnitsRulesAsync(String rid, String applicationId, String type, String code, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback<List<Au>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthUnitsRulesValidateBeforeCall(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        Type localVarReturnType = new TypeToken<List<Au>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAuthUnitsRulesRequest {
        private final String rid;
        private String applicationId;
        private String type;
        private String code;
        private String selfOnly;
        private String resourceId;
        private String resourceMatchAllResources;
        private String resourceMatchAllActions;
        private String resourceSetId;
        private String pageMode;

        private APIgetAuthUnitsRulesRequest(String rid) {
            this.rid = rid;
        }

        /**
         * Set applicationId
         * @param applicationId 应用id (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        /**
         * Set type
         * @param type 规则类型 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set code
         * @param code 资源或资源集合code (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Set selfOnly
         * @param selfOnly 只查询指定主体下的授权 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest selfOnly(String selfOnly) {
            this.selfOnly = selfOnly;
            return this;
        }

        /**
         * Set resourceId
         * @param resourceId 资源id，当type&#x3D;api,ui,data时有效 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest resourceId(String resourceId) {
            this.resourceId = resourceId;
            return this;
        }

        /**
         * Set resourceMatchAllResources
         * @param resourceMatchAllResources 匹配所有资源，当type&#x3D;res时有效 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest resourceMatchAllResources(String resourceMatchAllResources) {
            this.resourceMatchAllResources = resourceMatchAllResources;
            return this;
        }

        /**
         * Set resourceMatchAllActions
         * @param resourceMatchAllActions 匹配所有资源操作，当type&#x3D;res时有效 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest resourceMatchAllActions(String resourceMatchAllActions) {
            this.resourceMatchAllActions = resourceMatchAllActions;
            return this;
        }

        /**
         * Set resourceSetId
         * @param resourceSetId 资源集合id，当type&#x3D;res_set (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest resourceSetId(String resourceSetId) {
            this.resourceSetId = resourceSetId;
            return this;
        }

        /**
         * Set pageMode
         * @param pageMode 分页方式，格式：0不分页，1分页，默认为1 (optional)
         * @return APIgetAuthUnitsRulesRequest
         */
        public APIgetAuthUnitsRulesRequest pageMode(String pageMode) {
            this.pageMode = pageMode;
            return this;
        }

        /**
         * Build call for getAuthUnitsRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthUnitsRulesCall(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        }

        /**
         * Execute getAuthUnitsRules request
         * @return List&lt;Au&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<Au> execute() throws ApiException {
            ApiResponse<List<Au>> localVarResp = getAuthUnitsRulesWithHttpInfo(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode);
            return localVarResp.getData();
        }

        /**
         * Execute getAuthUnitsRules request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Au&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Au>> executeWithHttpInfo() throws ApiException {
            return getAuthUnitsRulesWithHttpInfo(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode);
        }

        /**
         * Execute getAuthUnitsRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Au>> _callback) throws ApiException {
            return getAuthUnitsRulesAsync(rid, applicationId, type, code, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        }
    }

    /**
     * 查询授权单元下的授权规则列表
     * 
     * @param rid AU id (required)
     * @return APIgetAuthUnitsRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAuthUnitsRulesRequest getAuthUnitsRules(String rid) {
        return new APIgetAuthUnitsRulesRequest(rid);
    }
    private okhttp3.Call getResourceCall(String id, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceValidateBeforeCall(String id, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResource(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getResource(Async)");
        }

        return getResourceCall(id, applicationId, _callback);

    }


    private ApiResponse<ResourceEntity> getResourceWithHttpInfo(String id, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = getResourceValidateBeforeCall(id, applicationId, null);
        Type localVarReturnType = new TypeToken<ResourceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourceAsync(String id, String applicationId, final ApiCallback<ResourceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceValidateBeforeCall(id, applicationId, _callback);
        Type localVarReturnType = new TypeToken<ResourceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourceRequest {
        private final String id;
        private final String applicationId;

        private APIgetResourceRequest(String id, String applicationId) {
            this.id = id;
            this.applicationId = applicationId;
        }

        /**
         * Build call for getResource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourceCall(id, applicationId, _callback);
        }

        /**
         * Execute getResource request
         * @return ResourceEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceEntity execute() throws ApiException {
            ApiResponse<ResourceEntity> localVarResp = getResourceWithHttpInfo(id, applicationId);
            return localVarResp.getData();
        }

        /**
         * Execute getResource request with HTTP info returned
         * @return ApiResponse&lt;ResourceEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceEntity> executeWithHttpInfo() throws ApiException {
            return getResourceWithHttpInfo(id, applicationId);
        }

        /**
         * Execute getResource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceEntity> _callback) throws ApiException {
            return getResourceAsync(id, applicationId, _callback);
        }
    }

    /**
     * 按 ID 查询资源
     * 
     * @param id 资源id (required)
     * @param applicationId 应用id (required)
     * @return APIgetResourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourceRequest getResource(String id, String applicationId) {
        return new APIgetResourceRequest(id, applicationId);
    }
    private okhttp3.Call getResourceMemberCall(String sid, String mid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{sid}/members/{mid}"
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "mid" + "}", localVarApiClient.escapeString(mid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceMemberValidateBeforeCall(String sid, String mid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling getResourceMember(Async)");
        }

        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getResourceMember(Async)");
        }

        return getResourceMemberCall(sid, mid, _callback);

    }


    private ApiResponse<ResourceSetMember> getResourceMemberWithHttpInfo(String sid, String mid) throws ApiException {
        okhttp3.Call localVarCall = getResourceMemberValidateBeforeCall(sid, mid, null);
        Type localVarReturnType = new TypeToken<ResourceSetMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourceMemberAsync(String sid, String mid, final ApiCallback<ResourceSetMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceMemberValidateBeforeCall(sid, mid, _callback);
        Type localVarReturnType = new TypeToken<ResourceSetMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourceMemberRequest {
        private final String sid;
        private final String mid;

        private APIgetResourceMemberRequest(String sid, String mid) {
            this.sid = sid;
            this.mid = mid;
        }

        /**
         * Build call for getResourceMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourceMemberCall(sid, mid, _callback);
        }

        /**
         * Execute getResourceMember request
         * @return ResourceSetMember
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceSetMember execute() throws ApiException {
            ApiResponse<ResourceSetMember> localVarResp = getResourceMemberWithHttpInfo(sid, mid);
            return localVarResp.getData();
        }

        /**
         * Execute getResourceMember request with HTTP info returned
         * @return ApiResponse&lt;ResourceSetMember&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceSetMember> executeWithHttpInfo() throws ApiException {
            return getResourceMemberWithHttpInfo(sid, mid);
        }

        /**
         * Execute getResourceMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceSetMember> _callback) throws ApiException {
            return getResourceMemberAsync(sid, mid, _callback);
        }
    }

    /**
     * 按 ID 查询资源集合成员
     * 
     * @param sid 资源集合id (required)
     * @param mid 成员id (required)
     * @return APIgetResourceMemberRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourceMemberRequest getResourceMember(String sid, String mid) {
        return new APIgetResourceMemberRequest(sid, mid);
    }
    private okhttp3.Call getResourceMembersCall(String sid, String resourceCode, String resourceType, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{sid}/members"
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_code", resourceCode));
        }

        if (resourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_type", resourceType));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceMembersValidateBeforeCall(String sid, String resourceCode, String resourceType, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling getResourceMembers(Async)");
        }

        return getResourceMembersCall(sid, resourceCode, resourceType, pageNum, pageSize, pageSort, _callback);

    }


    private ApiResponse<ResourceSetMemberWithPage> getResourceMembersWithHttpInfo(String sid, String resourceCode, String resourceType, String pageNum, String pageSize, String pageSort) throws ApiException {
        okhttp3.Call localVarCall = getResourceMembersValidateBeforeCall(sid, resourceCode, resourceType, pageNum, pageSize, pageSort, null);
        Type localVarReturnType = new TypeToken<ResourceSetMemberWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourceMembersAsync(String sid, String resourceCode, String resourceType, String pageNum, String pageSize, String pageSort, final ApiCallback<ResourceSetMemberWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceMembersValidateBeforeCall(sid, resourceCode, resourceType, pageNum, pageSize, pageSort, _callback);
        Type localVarReturnType = new TypeToken<ResourceSetMemberWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourceMembersRequest {
        private final String sid;
        private String resourceCode;
        private String resourceType;
        private String pageNum;
        private String pageSize;
        private String pageSort;

        private APIgetResourceMembersRequest(String sid) {
            this.sid = sid;
        }

        /**
         * Set resourceCode
         * @param resourceCode 资源代码 (optional)
         * @return APIgetResourceMembersRequest
         */
        public APIgetResourceMembersRequest resourceCode(String resourceCode) {
            this.resourceCode = resourceCode;
            return this;
        }

        /**
         * Set resourceType
         * @param resourceType 资源类型 (optional)
         * @return APIgetResourceMembersRequest
         */
        public APIgetResourceMembersRequest resourceType(String resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 起始页，默认1 (optional)
         * @return APIgetResourceMembersRequest
         */
        public APIgetResourceMembersRequest pageNum(String pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小，默认20 (optional)
         * @return APIgetResourceMembersRequest
         */
        public APIgetResourceMembersRequest pageSize(String pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序方式，格式：字段[排序方式] (optional)
         * @return APIgetResourceMembersRequest
         */
        public APIgetResourceMembersRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Build call for getResourceMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourceMembersCall(sid, resourceCode, resourceType, pageNum, pageSize, pageSort, _callback);
        }

        /**
         * Execute getResourceMembers request
         * @return ResourceSetMemberWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceSetMemberWithPage execute() throws ApiException {
            ApiResponse<ResourceSetMemberWithPage> localVarResp = getResourceMembersWithHttpInfo(sid, resourceCode, resourceType, pageNum, pageSize, pageSort);
            return localVarResp.getData();
        }

        /**
         * Execute getResourceMembers request with HTTP info returned
         * @return ApiResponse&lt;ResourceSetMemberWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceSetMemberWithPage> executeWithHttpInfo() throws ApiException {
            return getResourceMembersWithHttpInfo(sid, resourceCode, resourceType, pageNum, pageSize, pageSort);
        }

        /**
         * Execute getResourceMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceSetMemberWithPage> _callback) throws ApiException {
            return getResourceMembersAsync(sid, resourceCode, resourceType, pageNum, pageSize, pageSort, _callback);
        }
    }

    /**
     * 查询资源集合成员列表
     * 
     * @param sid 资源集合id (required)
     * @return APIgetResourceMembersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourceMembersRequest getResourceMembers(String sid) {
        return new APIgetResourceMembersRequest(sid);
    }
    private okhttp3.Call getResourceSetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceSetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResourceSet(Async)");
        }

        return getResourceSetCall(id, _callback);

    }


    private ApiResponse<ResourceSet> getResourceSetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getResourceSetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourceSetAsync(String id, final ApiCallback<ResourceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceSetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourceSetRequest {
        private final String id;

        private APIgetResourceSetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getResourceSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourceSetCall(id, _callback);
        }

        /**
         * Execute getResourceSet request
         * @return ResourceSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceSet execute() throws ApiException {
            ApiResponse<ResourceSet> localVarResp = getResourceSetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getResourceSet request with HTTP info returned
         * @return ApiResponse&lt;ResourceSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceSet> executeWithHttpInfo() throws ApiException {
            return getResourceSetWithHttpInfo(id);
        }

        /**
         * Execute getResourceSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceSet> _callback) throws ApiException {
            return getResourceSetAsync(id, _callback);
        }
    }

    /**
     * 按 ID 查询资源集合
     * 
     * @param id 资源集合id (required)
     * @return APIgetResourceSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourceSetRequest getResourceSet(String id) {
        return new APIgetResourceSetRequest(id);
    }
    private okhttp3.Call getResourceSetsCall(String applicationId, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resource-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (includeGlobal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_global", includeGlobal));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceSetsValidateBeforeCall(String applicationId, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getResourceSets(Async)");
        }

        return getResourceSetsCall(applicationId, code, includeGlobal, pageNum, pageSize, pageSort, _callback);

    }


    private ApiResponse<ResourceSetWithPage> getResourceSetsWithHttpInfo(String applicationId, String code, String includeGlobal, String pageNum, String pageSize, String pageSort) throws ApiException {
        okhttp3.Call localVarCall = getResourceSetsValidateBeforeCall(applicationId, code, includeGlobal, pageNum, pageSize, pageSort, null);
        Type localVarReturnType = new TypeToken<ResourceSetWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourceSetsAsync(String applicationId, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, final ApiCallback<ResourceSetWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceSetsValidateBeforeCall(applicationId, code, includeGlobal, pageNum, pageSize, pageSort, _callback);
        Type localVarReturnType = new TypeToken<ResourceSetWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourceSetsRequest {
        private final String applicationId;
        private String code;
        private String includeGlobal;
        private String pageNum;
        private String pageSize;
        private String pageSort;

        private APIgetResourceSetsRequest(String applicationId) {
            this.applicationId = applicationId;
        }

        /**
         * Set code
         * @param code 集合代码 (optional)
         * @return APIgetResourceSetsRequest
         */
        public APIgetResourceSetsRequest code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Set includeGlobal
         * @param includeGlobal 查询是否包含全局资源集合 (optional)
         * @return APIgetResourceSetsRequest
         */
        public APIgetResourceSetsRequest includeGlobal(String includeGlobal) {
            this.includeGlobal = includeGlobal;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 起始页，默认1 (optional)
         * @return APIgetResourceSetsRequest
         */
        public APIgetResourceSetsRequest pageNum(String pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小，默认20 (optional)
         * @return APIgetResourceSetsRequest
         */
        public APIgetResourceSetsRequest pageSize(String pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序方式，格式：字段[排序方式] (optional)
         * @return APIgetResourceSetsRequest
         */
        public APIgetResourceSetsRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Build call for getResourceSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourceSetsCall(applicationId, code, includeGlobal, pageNum, pageSize, pageSort, _callback);
        }

        /**
         * Execute getResourceSets request
         * @return ResourceSetWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceSetWithPage execute() throws ApiException {
            ApiResponse<ResourceSetWithPage> localVarResp = getResourceSetsWithHttpInfo(applicationId, code, includeGlobal, pageNum, pageSize, pageSort);
            return localVarResp.getData();
        }

        /**
         * Execute getResourceSets request with HTTP info returned
         * @return ApiResponse&lt;ResourceSetWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceSetWithPage> executeWithHttpInfo() throws ApiException {
            return getResourceSetsWithHttpInfo(applicationId, code, includeGlobal, pageNum, pageSize, pageSort);
        }

        /**
         * Execute getResourceSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceSetWithPage> _callback) throws ApiException {
            return getResourceSetsAsync(applicationId, code, includeGlobal, pageNum, pageSize, pageSort, _callback);
        }
    }

    /**
     * 查询资源集合列表
     * 
     * @param applicationId 应用id (required)
     * @return APIgetResourceSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourceSetsRequest getResourceSets(String applicationId) {
        return new APIgetResourceSetsRequest(applicationId);
    }
    private okhttp3.Call getResourcesCall(String applicationId, String type, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, String pageMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (includeGlobal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_global", includeGlobal));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_sort", pageSort));
        }

        if (pageMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_mode", pageMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesValidateBeforeCall(String applicationId, String type, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, String pageMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getResources(Async)");
        }

        return getResourcesCall(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode, _callback);

    }


    private ApiResponse<ResourceWithPage> getResourcesWithHttpInfo(String applicationId, String type, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, String pageMode) throws ApiException {
        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode, null);
        Type localVarReturnType = new TypeToken<ResourceWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResourcesAsync(String applicationId, String type, String code, String includeGlobal, String pageNum, String pageSize, String pageSort, String pageMode, final ApiCallback<ResourceWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode, _callback);
        Type localVarReturnType = new TypeToken<ResourceWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetResourcesRequest {
        private final String applicationId;
        private String type;
        private String code;
        private String includeGlobal;
        private String pageNum;
        private String pageSize;
        private String pageSort;
        private String pageMode;

        private APIgetResourcesRequest(String applicationId) {
            this.applicationId = applicationId;
        }

        /**
         * Set type
         * @param type 资源类型 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set code
         * @param code 资源代码 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Set includeGlobal
         * @param includeGlobal 是否查询包含全局资源 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest includeGlobal(String includeGlobal) {
            this.includeGlobal = includeGlobal;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum 起始页，默认1 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest pageNum(String pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize 页大小，默认20 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest pageSize(String pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageSort
         * @param pageSort 排序方式，格式：字段[排序方式] (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest pageSort(String pageSort) {
            this.pageSort = pageSort;
            return this;
        }

        /**
         * Set pageMode
         * @param pageMode 分页方式，格式：0不分页，1分页，默认为1 (optional)
         * @return APIgetResourcesRequest
         */
        public APIgetResourcesRequest pageMode(String pageMode) {
            this.pageMode = pageMode;
            return this;
        }

        /**
         * Build call for getResources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResourcesCall(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode, _callback);
        }

        /**
         * Execute getResources request
         * @return ResourceWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ResourceWithPage execute() throws ApiException {
            ApiResponse<ResourceWithPage> localVarResp = getResourcesWithHttpInfo(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode);
            return localVarResp.getData();
        }

        /**
         * Execute getResources request with HTTP info returned
         * @return ApiResponse&lt;ResourceWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceWithPage> executeWithHttpInfo() throws ApiException {
            return getResourcesWithHttpInfo(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode);
        }

        /**
         * Execute getResources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceWithPage> _callback) throws ApiException {
            return getResourcesAsync(applicationId, type, code, includeGlobal, pageNum, pageSize, pageSort, pageMode, _callback);
        }
    }

    /**
     * 查询资源列表
     * 
     * @param applicationId 应用id (required)
     * @return APIgetResourcesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetResourcesRequest getResources(String applicationId) {
        return new APIgetResourcesRequest(applicationId);
    }
    private okhttp3.Call modifyAuthUnitCall(String rid, String tid, String contentType, ModifyAuthUnitRequest modifyAuthUnitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAuthUnitRequest;

        // create path and map variables
        String localVarPath = "/v1/auth-units/{rid}/rules/{tid}"
            .replace("{" + "rid" + "}", localVarApiClient.escapeString(rid.toString()))
            .replace("{" + "tid" + "}", localVarApiClient.escapeString(tid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyAuthUnitValidateBeforeCall(String rid, String tid, String contentType, ModifyAuthUnitRequest modifyAuthUnitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling modifyAuthUnit(Async)");
        }

        // verify the required parameter 'tid' is set
        if (tid == null) {
            throw new ApiException("Missing the required parameter 'tid' when calling modifyAuthUnit(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyAuthUnit(Async)");
        }

        return modifyAuthUnitCall(rid, tid, contentType, modifyAuthUnitRequest, _callback);

    }


    private ApiResponse<Object> modifyAuthUnitWithHttpInfo(String rid, String tid, String contentType, ModifyAuthUnitRequest modifyAuthUnitRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyAuthUnitValidateBeforeCall(rid, tid, contentType, modifyAuthUnitRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyAuthUnitAsync(String rid, String tid, String contentType, ModifyAuthUnitRequest modifyAuthUnitRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyAuthUnitValidateBeforeCall(rid, tid, contentType, modifyAuthUnitRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyAuthUnitRequest {
        private final String rid;
        private final String tid;
        private final String contentType;
        private ModifyAuthUnitRequest modifyAuthUnitRequest;

        private APImodifyAuthUnitRequest(String rid, String tid, String contentType) {
            this.rid = rid;
            this.tid = tid;
            this.contentType = contentType;
        }

        /**
         * Set modifyAuthUnitRequest
         * @param modifyAuthUnitRequest  (optional)
         * @return APImodifyAuthUnitRequest
         */
        public APImodifyAuthUnitRequest modifyAuthUnitRequest(ModifyAuthUnitRequest modifyAuthUnitRequest) {
            this.modifyAuthUnitRequest = modifyAuthUnitRequest;
            return this;
        }

        /**
         * Build call for modifyAuthUnit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyAuthUnitCall(rid, tid, contentType, modifyAuthUnitRequest, _callback);
        }

        /**
         * Execute modifyAuthUnit request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = modifyAuthUnitWithHttpInfo(rid, tid, contentType, modifyAuthUnitRequest);
            return localVarResp.getData();
        }

        /**
         * Execute modifyAuthUnit request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return modifyAuthUnitWithHttpInfo(rid, tid, contentType, modifyAuthUnitRequest);
        }

        /**
         * Execute modifyAuthUnit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return modifyAuthUnitAsync(rid, tid, contentType, modifyAuthUnitRequest, _callback);
        }
    }

    /**
     * 更新授权规则
     * 
     * @param rid AU id (required)
     * @param tid 规则id (required)
     * @param contentType  (required)
     * @return APImodifyAuthUnitRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyAuthUnitRequest modifyAuthUnit(String rid, String tid, String contentType) {
        return new APImodifyAuthUnitRequest(rid, tid, contentType);
    }
    private okhttp3.Call modifyResourceSetCall(String id, String contentType, String xTenantId, ModifyResourceSetReq modifyResourceSetReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyResourceSetReq;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xTenantId != null) {
            localVarHeaderParams.put("X-Tenant-Id", localVarApiClient.parameterToString(xTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyResourceSetValidateBeforeCall(String id, String contentType, String xTenantId, ModifyResourceSetReq modifyResourceSetReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifyResourceSet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyResourceSet(Async)");
        }

        // verify the required parameter 'xTenantId' is set
        if (xTenantId == null) {
            throw new ApiException("Missing the required parameter 'xTenantId' when calling modifyResourceSet(Async)");
        }

        return modifyResourceSetCall(id, contentType, xTenantId, modifyResourceSetReq, _callback);

    }


    private ApiResponse<Object> modifyResourceSetWithHttpInfo(String id, String contentType, String xTenantId, ModifyResourceSetReq modifyResourceSetReq) throws ApiException {
        okhttp3.Call localVarCall = modifyResourceSetValidateBeforeCall(id, contentType, xTenantId, modifyResourceSetReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyResourceSetAsync(String id, String contentType, String xTenantId, ModifyResourceSetReq modifyResourceSetReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyResourceSetValidateBeforeCall(id, contentType, xTenantId, modifyResourceSetReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyResourceSetRequest {
        private final String id;
        private final String contentType;
        private final String xTenantId;
        private ModifyResourceSetReq modifyResourceSetReq;

        private APImodifyResourceSetRequest(String id, String contentType, String xTenantId) {
            this.id = id;
            this.contentType = contentType;
            this.xTenantId = xTenantId;
        }

        /**
         * Set modifyResourceSetReq
         * @param modifyResourceSetReq  (optional)
         * @return APImodifyResourceSetRequest
         */
        public APImodifyResourceSetRequest modifyResourceSetReq(ModifyResourceSetReq modifyResourceSetReq) {
            this.modifyResourceSetReq = modifyResourceSetReq;
            return this;
        }

        /**
         * Build call for modifyResourceSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyResourceSetCall(id, contentType, xTenantId, modifyResourceSetReq, _callback);
        }

        /**
         * Execute modifyResourceSet request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = modifyResourceSetWithHttpInfo(id, contentType, xTenantId, modifyResourceSetReq);
            return localVarResp.getData();
        }

        /**
         * Execute modifyResourceSet request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return modifyResourceSetWithHttpInfo(id, contentType, xTenantId, modifyResourceSetReq);
        }

        /**
         * Execute modifyResourceSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return modifyResourceSetAsync(id, contentType, xTenantId, modifyResourceSetReq, _callback);
        }
    }

    /**
     * 更新资源集合
     * 
     * @param id 集合id (required)
     * @param contentType  (required)
     * @param xTenantId 租户id (required)
     * @return APImodifyResourceSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyResourceSetRequest modifyResourceSet(String id, String contentType, String xTenantId) {
        return new APImodifyResourceSetRequest(id, contentType, xTenantId);
    }
    private okhttp3.Call modifyResourceSetMemberCall(String sid, String mid, String contentType, ModifyResourceSetMemberReq modifyResourceSetMemberReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyResourceSetMemberReq;

        // create path and map variables
        String localVarPath = "/v1/resource-sets/{sid}/members/{mid}"
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "mid" + "}", localVarApiClient.escapeString(mid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyResourceSetMemberValidateBeforeCall(String sid, String mid, String contentType, ModifyResourceSetMemberReq modifyResourceSetMemberReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling modifyResourceSetMember(Async)");
        }

        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling modifyResourceSetMember(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modifyResourceSetMember(Async)");
        }

        return modifyResourceSetMemberCall(sid, mid, contentType, modifyResourceSetMemberReq, _callback);

    }


    private ApiResponse<Object> modifyResourceSetMemberWithHttpInfo(String sid, String mid, String contentType, ModifyResourceSetMemberReq modifyResourceSetMemberReq) throws ApiException {
        okhttp3.Call localVarCall = modifyResourceSetMemberValidateBeforeCall(sid, mid, contentType, modifyResourceSetMemberReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyResourceSetMemberAsync(String sid, String mid, String contentType, ModifyResourceSetMemberReq modifyResourceSetMemberReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyResourceSetMemberValidateBeforeCall(sid, mid, contentType, modifyResourceSetMemberReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyResourceSetMemberRequest {
        private final String sid;
        private final String mid;
        private final String contentType;
        private ModifyResourceSetMemberReq modifyResourceSetMemberReq;

        private APImodifyResourceSetMemberRequest(String sid, String mid, String contentType) {
            this.sid = sid;
            this.mid = mid;
            this.contentType = contentType;
        }

        /**
         * Set modifyResourceSetMemberReq
         * @param modifyResourceSetMemberReq  (optional)
         * @return APImodifyResourceSetMemberRequest
         */
        public APImodifyResourceSetMemberRequest modifyResourceSetMemberReq(ModifyResourceSetMemberReq modifyResourceSetMemberReq) {
            this.modifyResourceSetMemberReq = modifyResourceSetMemberReq;
            return this;
        }

        /**
         * Build call for modifyResourceSetMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyResourceSetMemberCall(sid, mid, contentType, modifyResourceSetMemberReq, _callback);
        }

        /**
         * Execute modifyResourceSetMember request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = modifyResourceSetMemberWithHttpInfo(sid, mid, contentType, modifyResourceSetMemberReq);
            return localVarResp.getData();
        }

        /**
         * Execute modifyResourceSetMember request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return modifyResourceSetMemberWithHttpInfo(sid, mid, contentType, modifyResourceSetMemberReq);
        }

        /**
         * Execute modifyResourceSetMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return modifyResourceSetMemberAsync(sid, mid, contentType, modifyResourceSetMemberReq, _callback);
        }
    }

    /**
     * 更新资源集合成员
     * 
     * @param sid 资源集合id (required)
     * @param mid 资源集合成员id (required)
     * @param contentType  (required)
     * @return APImodifyResourceSetMemberRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyResourceSetMemberRequest modifyResourceSetMember(String sid, String mid, String contentType) {
        return new APImodifyResourceSetMemberRequest(sid, mid, contentType);
    }
    private okhttp3.Call queryAuthUnitsRulesCall(String identityId, String identityType, String applicationId, String type, String code, String identityName, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth-unit-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (identityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_id", identityId));
        }

        if (identityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_type", identityType));
        }

        if (identityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity_name", identityName));
        }

        if (selfOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("self_only", selfOnly));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_id", resourceId));
        }

        if (resourceMatchAllResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_match_all_resources", resourceMatchAllResources));
        }

        if (resourceMatchAllActions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_match_all_actions", resourceMatchAllActions));
        }

        if (resourceSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_set_id", resourceSetId));
        }

        if (pageMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_mode", pageMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAuthUnitsRulesValidateBeforeCall(String identityId, String identityType, String applicationId, String type, String code, String identityName, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling queryAuthUnitsRules(Async)");
        }

        // verify the required parameter 'identityType' is set
        if (identityType == null) {
            throw new ApiException("Missing the required parameter 'identityType' when calling queryAuthUnitsRules(Async)");
        }

        return queryAuthUnitsRulesCall(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);

    }


    private ApiResponse<List<Au>> queryAuthUnitsRulesWithHttpInfo(String identityId, String identityType, String applicationId, String type, String code, String identityName, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode) throws ApiException {
        okhttp3.Call localVarCall = queryAuthUnitsRulesValidateBeforeCall(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, null);
        Type localVarReturnType = new TypeToken<List<Au>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryAuthUnitsRulesAsync(String identityId, String identityType, String applicationId, String type, String code, String identityName, String selfOnly, String resourceId, String resourceMatchAllResources, String resourceMatchAllActions, String resourceSetId, String pageMode, final ApiCallback<List<Au>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAuthUnitsRulesValidateBeforeCall(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        Type localVarReturnType = new TypeToken<List<Au>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryAuthUnitsRulesRequest {
        private final String identityId;
        private final String identityType;
        private String applicationId;
        private String type;
        private String code;
        private String identityName;
        private String selfOnly;
        private String resourceId;
        private String resourceMatchAllResources;
        private String resourceMatchAllActions;
        private String resourceSetId;
        private String pageMode;

        private APIqueryAuthUnitsRulesRequest(String identityId, String identityType) {
            this.identityId = identityId;
            this.identityType = identityType;
        }

        /**
         * Set applicationId
         * @param applicationId 应用id (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        /**
         * Set type
         * @param type 规则类型 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set code
         * @param code 资源或资源集合code (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Set identityName
         * @param identityName 主体名称 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest identityName(String identityName) {
            this.identityName = identityName;
            return this;
        }

        /**
         * Set selfOnly
         * @param selfOnly 只查询指定主体下的授权 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest selfOnly(String selfOnly) {
            this.selfOnly = selfOnly;
            return this;
        }

        /**
         * Set resourceId
         * @param resourceId 资源id，当type&#x3D;api,ui,data时有效 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest resourceId(String resourceId) {
            this.resourceId = resourceId;
            return this;
        }

        /**
         * Set resourceMatchAllResources
         * @param resourceMatchAllResources 匹配所有资源，当type&#x3D;res时有效 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest resourceMatchAllResources(String resourceMatchAllResources) {
            this.resourceMatchAllResources = resourceMatchAllResources;
            return this;
        }

        /**
         * Set resourceMatchAllActions
         * @param resourceMatchAllActions 匹配所有资源操作，当type&#x3D;res时有效 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest resourceMatchAllActions(String resourceMatchAllActions) {
            this.resourceMatchAllActions = resourceMatchAllActions;
            return this;
        }

        /**
         * Set resourceSetId
         * @param resourceSetId 资源集合id，当type&#x3D;res_set (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest resourceSetId(String resourceSetId) {
            this.resourceSetId = resourceSetId;
            return this;
        }

        /**
         * Set pageMode
         * @param pageMode 分页方式，格式：0不分页，1分页，默认为1 (optional)
         * @return APIqueryAuthUnitsRulesRequest
         */
        public APIqueryAuthUnitsRulesRequest pageMode(String pageMode) {
            this.pageMode = pageMode;
            return this;
        }

        /**
         * Build call for queryAuthUnitsRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryAuthUnitsRulesCall(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        }

        /**
         * Execute queryAuthUnitsRules request
         * @return List&lt;Au&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public List<Au> execute() throws ApiException {
            ApiResponse<List<Au>> localVarResp = queryAuthUnitsRulesWithHttpInfo(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode);
            return localVarResp.getData();
        }

        /**
         * Execute queryAuthUnitsRules request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Au&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Au>> executeWithHttpInfo() throws ApiException {
            return queryAuthUnitsRulesWithHttpInfo(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode);
        }

        /**
         * Execute queryAuthUnitsRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Au>> _callback) throws ApiException {
            return queryAuthUnitsRulesAsync(identityId, identityType, applicationId, type, code, identityName, selfOnly, resourceId, resourceMatchAllResources, resourceMatchAllActions, resourceSetId, pageMode, _callback);
        }
    }

    /**
     * 查询授权规则列表
     * 
     * @param identityId 主体id (required)
     * @param identityType 主体类型 (required)
     * @return APIqueryAuthUnitsRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryAuthUnitsRulesRequest queryAuthUnitsRules(String identityId, String identityType) {
        return new APIqueryAuthUnitsRulesRequest(identityId, identityType);
    }
}
