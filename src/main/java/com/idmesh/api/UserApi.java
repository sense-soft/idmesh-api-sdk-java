/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.api;

import com.idmesh.ApiCallback;
import com.idmesh.ApiClient;
import com.idmesh.ApiException;
import com.idmesh.ApiResponse;
import com.idmesh.Configuration;
import com.idmesh.Pair;
import com.idmesh.ProgressRequestBody;
import com.idmesh.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.idmesh.model.BadRequest;
import com.idmesh.model.CommonRet;
import com.idmesh.model.CreateUserReq;
import com.idmesh.model.CreateUserStoredCredentialReq;
import com.idmesh.model.ModifyUserReq;
import com.idmesh.model.UserDetailRet;
import com.idmesh.model.UserStoredCredentialWithPage;
import com.idmesh.model.UserWithPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call callListCall(Integer pageSize, Integer pageNum, String searchType, String keyword, String timeModifiedFrom, String timeModifiedTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (searchType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_type", searchType));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (timeModifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified_from", timeModifiedFrom));
        }

        if (timeModifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_modified_to", timeModifiedTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(Integer pageSize, Integer pageNum, String searchType, String keyword, String timeModifiedFrom, String timeModifiedTo, final ApiCallback _callback) throws ApiException {
        return callListCall(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo, _callback);

    }


    private ApiResponse<UserWithPage> callListWithHttpInfo(Integer pageSize, Integer pageNum, String searchType, String keyword, String timeModifiedFrom, String timeModifiedTo) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo, null);
        Type localVarReturnType = new TypeToken<UserWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call callListAsync(Integer pageSize, Integer pageNum, String searchType, String keyword, String timeModifiedFrom, String timeModifiedTo, final ApiCallback<UserWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo, _callback);
        Type localVarReturnType = new TypeToken<UserWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcallListRequest {
        private Integer pageSize;
        private Integer pageNum;
        private String searchType;
        private String keyword;
        private String timeModifiedFrom;
        private String timeModifiedTo;

        private APIcallListRequest() {
        }

        /**
         * Set pageSize
         * @param pageSize  (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum  (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Set searchType
         * @param searchType search_type查询类型：generic（全文搜索）、advanced（高级搜索）、不填（基础搜索） 默认基础搜索：http://xxx.idmesh.site/v1/user?username&#x3D;xxx&amp;display_name&#x3D;xxx...... 全文检索：http://xxx.idmesh.site/v1/user?keyword&#x3D;xxx&amp;username[eq]&#x3D;xxx...... 高级检索：http://xxx.idmesh.site/v1/user?username[eq]&#x3D;xxx&amp;time_created[gt]&#x3D;xxx&amp;keyword&#x3D;xxx@163.com...... eq：等于（equal） ne：不等于（not equal） gt：大于（greater than） lt：小于（less than） gte：大于等于（greater than or equal to） lte：小于等于（less than or equal to） in：在给定范围内（in a given range） like：模糊匹配，包含 notlike：不匹配，不包含 orderby：排序的顺序（order by）  (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest searchType(String searchType) {
            this.searchType = searchType;
            return this;
        }

        /**
         * Set keyword
         * @param keyword 检索值 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }

        /**
         * Set timeModifiedFrom
         * @param timeModifiedFrom 开始时间 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest timeModifiedFrom(String timeModifiedFrom) {
            this.timeModifiedFrom = timeModifiedFrom;
            return this;
        }

        /**
         * Set timeModifiedTo
         * @param timeModifiedTo 结束时间 (optional)
         * @return APIcallListRequest
         */
        public APIcallListRequest timeModifiedTo(String timeModifiedTo) {
            this.timeModifiedTo = timeModifiedTo;
            return this;
        }

        /**
         * Build call for callList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return callListCall(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo, _callback);
        }

        /**
         * Execute callList request
         * @return UserWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public UserWithPage execute() throws ApiException {
            ApiResponse<UserWithPage> localVarResp = callListWithHttpInfo(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo);
            return localVarResp.getData();
        }

        /**
         * Execute callList request with HTTP info returned
         * @return ApiResponse&lt;UserWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserWithPage> executeWithHttpInfo() throws ApiException {
            return callListWithHttpInfo(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo);
        }

        /**
         * Execute callList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserWithPage> _callback) throws ApiException {
            return callListAsync(pageSize, pageNum, searchType, keyword, timeModifiedFrom, timeModifiedTo, _callback);
        }
    }

    /**
     * 查询用户列表
     * 
     * @return APIcallListRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcallListRequest callList() {
        return new APIcallListRequest();
    }
    private okhttp3.Call createCall(String contentType, CreateUserReq createUserReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserReq;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String contentType, CreateUserReq createUserReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling create(Async)");
        }

        return createCall(contentType, createUserReq, _callback);

    }


    private ApiResponse<CommonRet> createWithHttpInfo(String contentType, CreateUserReq createUserReq) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(contentType, createUserReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String contentType, CreateUserReq createUserReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(contentType, createUserReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateRequest {
        private final String contentType;
        private CreateUserReq createUserReq;

        private APIcreateRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createUserReq
         * @param createUserReq  (optional)
         * @return APIcreateRequest
         */
        public APIcreateRequest createUserReq(CreateUserReq createUserReq) {
            this.createUserReq = createUserReq;
            return this;
        }

        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCall(contentType, createUserReq, _callback);
        }

        /**
         * Execute create request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = createWithHttpInfo(contentType, createUserReq);
            return localVarResp.getData();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return createWithHttpInfo(contentType, createUserReq);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return createAsync(contentType, createUserReq, _callback);
        }
    }

    /**
     * 创建用户
     * 
     * @param contentType  (required)
     * @return APIcreateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateRequest create(String contentType) {
        return new APIcreateRequest(contentType);
    }
    private okhttp3.Call createStoreCredentialCall(String contentType, CreateUserStoredCredentialReq createUserStoredCredentialReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserStoredCredentialReq;

        // create path and map variables
        String localVarPath = "/v1/user-stored-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStoreCredentialValidateBeforeCall(String contentType, CreateUserStoredCredentialReq createUserStoredCredentialReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createStoreCredential(Async)");
        }

        return createStoreCredentialCall(contentType, createUserStoredCredentialReq, _callback);

    }


    private ApiResponse<CommonRet> createStoreCredentialWithHttpInfo(String contentType, CreateUserStoredCredentialReq createUserStoredCredentialReq) throws ApiException {
        okhttp3.Call localVarCall = createStoreCredentialValidateBeforeCall(contentType, createUserStoredCredentialReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createStoreCredentialAsync(String contentType, CreateUserStoredCredentialReq createUserStoredCredentialReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStoreCredentialValidateBeforeCall(contentType, createUserStoredCredentialReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateStoreCredentialRequest {
        private final String contentType;
        private CreateUserStoredCredentialReq createUserStoredCredentialReq;

        private APIcreateStoreCredentialRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set createUserStoredCredentialReq
         * @param createUserStoredCredentialReq  (optional)
         * @return APIcreateStoreCredentialRequest
         */
        public APIcreateStoreCredentialRequest createUserStoredCredentialReq(CreateUserStoredCredentialReq createUserStoredCredentialReq) {
            this.createUserStoredCredentialReq = createUserStoredCredentialReq;
            return this;
        }

        /**
         * Build call for createStoreCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createStoreCredentialCall(contentType, createUserStoredCredentialReq, _callback);
        }

        /**
         * Execute createStoreCredential request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = createStoreCredentialWithHttpInfo(contentType, createUserStoredCredentialReq);
            return localVarResp.getData();
        }

        /**
         * Execute createStoreCredential request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return createStoreCredentialWithHttpInfo(contentType, createUserStoredCredentialReq);
        }

        /**
         * Execute createStoreCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return createStoreCredentialAsync(contentType, createUserStoredCredentialReq, _callback);
        }
    }

    /**
     * 创建用户存储凭证
     * 
     * @param contentType  (required)
     * @return APIcreateStoreCredentialRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateStoreCredentialRequest createStoreCredential(String contentType) {
        return new APIcreateStoreCredentialRequest(contentType);
    }
    private okhttp3.Call deleteCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String id, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling delete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling delete(Async)");
        }

        return deleteCall(id, contentType, _callback);

    }


    private ApiResponse<CommonRet> deleteWithHttpInfo(String id, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(id, contentType, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String id, String contentType, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(id, contentType, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRequest {
        private final String id;
        private final String contentType;

        private APIdeleteRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(id, contentType, _callback);
        }

        /**
         * Execute delete request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = deleteWithHttpInfo(id, contentType);
            return localVarResp.getData();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(id, contentType);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return deleteAsync(id, contentType, _callback);
        }
    }

    /**
     * 删除用户
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APIdeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRequest delete(String id, String contentType) {
        return new APIdeleteRequest(id, contentType);
    }
    private okhttp3.Call getCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get(Async)");
        }

        return getCall(id, _callback);

    }


    private ApiResponse<UserDetailRet> getWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserDetailRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String id, final ApiCallback<UserDetailRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserDetailRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRequest {
        private final String id;

        private APIgetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(id, _callback);
        }

        /**
         * Execute get request
         * @return UserDetailRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public UserDetailRet execute() throws ApiException {
            ApiResponse<UserDetailRet> localVarResp = getWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;UserDetailRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDetailRet> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(id);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDetailRet> _callback) throws ApiException {
            return getAsync(id, _callback);
        }
    }

    /**
     * 查询用户详情
     * 
     * @param id  (required)
     * @return APIgetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRequest get(String id) {
        return new APIgetRequest(id);
    }
    private okhttp3.Call getStoredCredentialsCall(String contentType, Integer userId, String providerCode, Integer idpConfigId, String id1, String id2, String metadata, String status, String username, String displayName, Integer pageSize, Integer pageNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user-stored-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (providerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_code", providerCode));
        }

        if (idpConfigId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idp_config_id", idpConfigId));
        }

        if (id1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id1", id1));
        }

        if (id2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id2", id2));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_name", displayName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoredCredentialsValidateBeforeCall(String contentType, Integer userId, String providerCode, Integer idpConfigId, String id1, String id2, String metadata, String status, String username, String displayName, Integer pageSize, Integer pageNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getStoredCredentials(Async)");
        }

        return getStoredCredentialsCall(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum, _callback);

    }


    private ApiResponse<UserStoredCredentialWithPage> getStoredCredentialsWithHttpInfo(String contentType, Integer userId, String providerCode, Integer idpConfigId, String id1, String id2, String metadata, String status, String username, String displayName, Integer pageSize, Integer pageNum) throws ApiException {
        okhttp3.Call localVarCall = getStoredCredentialsValidateBeforeCall(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum, null);
        Type localVarReturnType = new TypeToken<UserStoredCredentialWithPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoredCredentialsAsync(String contentType, Integer userId, String providerCode, Integer idpConfigId, String id1, String id2, String metadata, String status, String username, String displayName, Integer pageSize, Integer pageNum, final ApiCallback<UserStoredCredentialWithPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoredCredentialsValidateBeforeCall(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum, _callback);
        Type localVarReturnType = new TypeToken<UserStoredCredentialWithPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetStoredCredentialsRequest {
        private final String contentType;
        private Integer userId;
        private String providerCode;
        private Integer idpConfigId;
        private String id1;
        private String id2;
        private String metadata;
        private String status;
        private String username;
        private String displayName;
        private Integer pageSize;
        private Integer pageNum;

        private APIgetStoredCredentialsRequest(String contentType) {
            this.contentType = contentType;
        }

        /**
         * Set userId
         * @param userId 用户id标识 (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest userId(Integer userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set providerCode
         * @param providerCode 社会化登录提供者的code (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest providerCode(String providerCode) {
            this.providerCode = providerCode;
            return this;
        }

        /**
         * Set idpConfigId
         * @param idpConfigId 社会化登录配置的ID (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest idpConfigId(Integer idpConfigId) {
            this.idpConfigId = idpConfigId;
            return this;
        }

        /**
         * Set id1
         * @param id1 社会化身份标识1，约定此字段保存用户唯一标识，如openid (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest id1(String id1) {
            this.id1 = id1;
            return this;
        }

        /**
         * Set id2
         * @param id2 社会化身份标识2，如unionid (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest id2(String id2) {
            this.id2 = id2;
            return this;
        }

        /**
         * Set metadata
         * @param metadata 更多社会化身份标识 (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest metadata(String metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set status
         * @param status 状态 (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Set username
         * @param username 用户名 (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest username(String username) {
            this.username = username;
            return this;
        }

        /**
         * Set displayName
         * @param displayName 显示名 (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize  (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set pageNum
         * @param pageNum  (optional)
         * @return APIgetStoredCredentialsRequest
         */
        public APIgetStoredCredentialsRequest pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }

        /**
         * Build call for getStoredCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoredCredentialsCall(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum, _callback);
        }

        /**
         * Execute getStoredCredentials request
         * @return UserStoredCredentialWithPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public UserStoredCredentialWithPage execute() throws ApiException {
            ApiResponse<UserStoredCredentialWithPage> localVarResp = getStoredCredentialsWithHttpInfo(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum);
            return localVarResp.getData();
        }

        /**
         * Execute getStoredCredentials request with HTTP info returned
         * @return ApiResponse&lt;UserStoredCredentialWithPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserStoredCredentialWithPage> executeWithHttpInfo() throws ApiException {
            return getStoredCredentialsWithHttpInfo(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum);
        }

        /**
         * Execute getStoredCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserStoredCredentialWithPage> _callback) throws ApiException {
            return getStoredCredentialsAsync(contentType, userId, providerCode, idpConfigId, id1, id2, metadata, status, username, displayName, pageSize, pageNum, _callback);
        }
    }

    /**
     * 查询用户存储凭证列表
     * 
     * @param contentType  (required)
     * @return APIgetStoredCredentialsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APIgetStoredCredentialsRequest getStoredCredentials(String contentType) {
        return new APIgetStoredCredentialsRequest(contentType);
    }
    private okhttp3.Call modifyCall(String id, String contentType, ModifyUserReq modifyUserReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyUserReq;

        // create path and map variables
        String localVarPath = "/v1/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  "aksk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyValidateBeforeCall(String id, String contentType, ModifyUserReq modifyUserReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modify(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modify(Async)");
        }

        return modifyCall(id, contentType, modifyUserReq, _callback);

    }


    private ApiResponse<CommonRet> modifyWithHttpInfo(String id, String contentType, ModifyUserReq modifyUserReq) throws ApiException {
        okhttp3.Call localVarCall = modifyValidateBeforeCall(id, contentType, modifyUserReq, null);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyAsync(String id, String contentType, ModifyUserReq modifyUserReq, final ApiCallback<CommonRet> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyValidateBeforeCall(id, contentType, modifyUserReq, _callback);
        Type localVarReturnType = new TypeToken<CommonRet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImodifyRequest {
        private final String id;
        private final String contentType;
        private ModifyUserReq modifyUserReq;

        private APImodifyRequest(String id, String contentType) {
            this.id = id;
            this.contentType = contentType;
        }

        /**
         * Set modifyUserReq
         * @param modifyUserReq  (optional)
         * @return APImodifyRequest
         */
        public APImodifyRequest modifyUserReq(ModifyUserReq modifyUserReq) {
            this.modifyUserReq = modifyUserReq;
            return this;
        }

        /**
         * Build call for modify
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return modifyCall(id, contentType, modifyUserReq, _callback);
        }

        /**
         * Execute modify request
         * @return CommonRet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public CommonRet execute() throws ApiException {
            ApiResponse<CommonRet> localVarResp = modifyWithHttpInfo(id, contentType, modifyUserReq);
            return localVarResp.getData();
        }

        /**
         * Execute modify request with HTTP info returned
         * @return ApiResponse&lt;CommonRet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonRet> executeWithHttpInfo() throws ApiException {
            return modifyWithHttpInfo(id, contentType, modifyUserReq);
        }

        /**
         * Execute modify request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonRet> _callback) throws ApiException {
            return modifyAsync(id, contentType, modifyUserReq, _callback);
        }
    }

    /**
     * 编辑用户
     * 
     * @param id  (required)
     * @param contentType  (required)
     * @return APImodifyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public APImodifyRequest modify(String id, String contentType) {
        return new APImodifyRequest(id, contentType);
    }
}
