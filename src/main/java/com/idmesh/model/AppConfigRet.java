/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.idmesh.model.AppConfigRetMfaConfig;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * AppConfigRet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AppConfigRet {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_ALLOWED_LOGIN_METHOD = "allowed_login_method";
  @SerializedName(SERIALIZED_NAME_ALLOWED_LOGIN_METHOD)
  private String allowedLoginMethod;

  public static final String SERIALIZED_NAME_DEFAULT_LOGIN_METHOD = "default_login_method";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOGIN_METHOD)
  private String defaultLoginMethod;

  public static final String SERIALIZED_NAME_ALLOWED_REG_METHOD = "allowed_reg_method";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REG_METHOD)
  private String allowedRegMethod;

  public static final String SERIALIZED_NAME_DEFAULT_REG_METHOD = "default_reg_method";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REG_METHOD)
  private String defaultRegMethod;

  public static final String SERIALIZED_NAME_ACCESS_POLICY = "access_policy";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY)
  private String accessPolicy;

  public static final String SERIALIZED_NAME_REG_POLICY = "reg_policy";
  @SerializedName(SERIALIZED_NAME_REG_POLICY)
  private String regPolicy;

  public static final String SERIALIZED_NAME_ALLOWED_ID_PROVIDER = "allowed_id_provider";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ID_PROVIDER)
  private String allowedIdProvider;

  public static final String SERIALIZED_NAME_SSO_ENABLED = "sso_enabled";
  @SerializedName(SERIALIZED_NAME_SSO_ENABLED)
  private Boolean ssoEnabled;

  public static final String SERIALIZED_NAME_MFA_ENABLED = "mfa_enabled";
  @SerializedName(SERIALIZED_NAME_MFA_ENABLED)
  private Boolean mfaEnabled;

  public static final String SERIALIZED_NAME_MFA_CONFIG = "mfa_config";
  @SerializedName(SERIALIZED_NAME_MFA_CONFIG)
  private AppConfigRetMfaConfig mfaConfig;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "time_modified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public AppConfigRet() {
  }
   /**
   * 唯一标识
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * 应用ID
   * @return appId
  **/
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }

   /**
   * 允许的登录方式，格式为：[\&quot;password\&quot;, \&quot;vercode\&quot;]
   * @return allowedLoginMethod
  **/
  @javax.annotation.Nullable
  public String getAllowedLoginMethod() {
    return allowedLoginMethod;
  }


  public void setAllowedLoginMethod(String allowedLoginMethod) {
    this.allowedLoginMethod = allowedLoginMethod;
  }

   /**
   * 默认登录方式，格式为：password
   * @return defaultLoginMethod
  **/
  @javax.annotation.Nonnull
  public String getDefaultLoginMethod() {
    return defaultLoginMethod;
  }


  public void setDefaultLoginMethod(String defaultLoginMethod) {
    this.defaultLoginMethod = defaultLoginMethod;
  }

   /**
   * 允许注册方式，格式为：[\&quot;mobile\&quot;, \&quot;email\&quot;]
   * @return allowedRegMethod
  **/
  @javax.annotation.Nullable
  public String getAllowedRegMethod() {
    return allowedRegMethod;
  }


  public void setAllowedRegMethod(String allowedRegMethod) {
    this.allowedRegMethod = allowedRegMethod;
  }

   /**
   * 默认注册方式，格式为：mobile
   * @return defaultRegMethod
  **/
  @javax.annotation.Nonnull
  public String getDefaultRegMethod() {
    return defaultRegMethod;
  }


  public void setDefaultRegMethod(String defaultRegMethod) {
    this.defaultRegMethod = defaultRegMethod;
  }

   /**
   * 应用级访问控制权限，格式为：{\&quot;password_recovery\&quot;: [\&quot;email\&quot;]}
   * @return accessPolicy
  **/
  @javax.annotation.Nullable
  public String getAccessPolicy() {
    return accessPolicy;
  }


  public void setAccessPolicy(String accessPolicy) {
    this.accessPolicy = accessPolicy;
  }

   /**
   * 新用户注册策略（是否允许自动注册，注册验证方式等），1是，2否,
   * @return regPolicy
  **/
  @javax.annotation.Nullable
  public String getRegPolicy() {
    return regPolicy;
  }


  public void setRegPolicy(String regPolicy) {
    this.regPolicy = regPolicy;
  }

   /**
   * 允许的登录身份提供商，格式为：{\&quot;wechat_scan_qr\&quot;: 1, \&quot;dingding_scan_qr\&quot;: 2}
   * @return allowedIdProvider
  **/
  @javax.annotation.Nullable
  public String getAllowedIdProvider() {
    return allowedIdProvider;
  }


  public void setAllowedIdProvider(String allowedIdProvider) {
    this.allowedIdProvider = allowedIdProvider;
  }

   /**
   * 是否允许SSO
   * @return ssoEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getSsoEnabled() {
    return ssoEnabled;
  }


  public void setSsoEnabled(Boolean ssoEnabled) {
    this.ssoEnabled = ssoEnabled;
  }

   /**
   * 是否开启MFA
   * @return mfaEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getMfaEnabled() {
    return mfaEnabled;
  }


  public void setMfaEnabled(Boolean mfaEnabled) {
    this.mfaEnabled = mfaEnabled;
  }

   /**
   * Get mfaConfig
   * @return mfaConfig
  **/
  @javax.annotation.Nullable
  public AppConfigRetMfaConfig getMfaConfig() {
    return mfaConfig;
  }


  public void setMfaConfig(AppConfigRetMfaConfig mfaConfig) {
    this.mfaConfig = mfaConfig;
  }

   /**
   * 创建时间
   * @return timeCreated
  **/
  @javax.annotation.Nullable
  public String getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }

   /**
   * 修改时间
   * @return timeModified
  **/
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }


  public void setTimeModified(String timeModified) {
    this.timeModified = timeModified;
  }

   /**
   * 状态，1启用，0禁用
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppConfigRet appConfigRet = (AppConfigRet) o;
    return Objects.equals(this.id, appConfigRet.id) &&
        Objects.equals(this.appId, appConfigRet.appId) &&
        Objects.equals(this.allowedLoginMethod, appConfigRet.allowedLoginMethod) &&
        Objects.equals(this.defaultLoginMethod, appConfigRet.defaultLoginMethod) &&
        Objects.equals(this.allowedRegMethod, appConfigRet.allowedRegMethod) &&
        Objects.equals(this.defaultRegMethod, appConfigRet.defaultRegMethod) &&
        Objects.equals(this.accessPolicy, appConfigRet.accessPolicy) &&
        Objects.equals(this.regPolicy, appConfigRet.regPolicy) &&
        Objects.equals(this.allowedIdProvider, appConfigRet.allowedIdProvider) &&
        Objects.equals(this.ssoEnabled, appConfigRet.ssoEnabled) &&
        Objects.equals(this.mfaEnabled, appConfigRet.mfaEnabled) &&
        Objects.equals(this.mfaConfig, appConfigRet.mfaConfig) &&
        Objects.equals(this.timeCreated, appConfigRet.timeCreated) &&
        Objects.equals(this.timeModified, appConfigRet.timeModified) &&
        Objects.equals(this.status, appConfigRet.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, appId, allowedLoginMethod, defaultLoginMethod, allowedRegMethod, defaultRegMethod, accessPolicy, regPolicy, allowedIdProvider, ssoEnabled, mfaEnabled, mfaConfig, timeCreated, timeModified, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppConfigRet {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    allowedLoginMethod: ").append(toIndentedString(allowedLoginMethod)).append("\n");
    sb.append("    defaultLoginMethod: ").append(toIndentedString(defaultLoginMethod)).append("\n");
    sb.append("    allowedRegMethod: ").append(toIndentedString(allowedRegMethod)).append("\n");
    sb.append("    defaultRegMethod: ").append(toIndentedString(defaultRegMethod)).append("\n");
    sb.append("    accessPolicy: ").append(toIndentedString(accessPolicy)).append("\n");
    sb.append("    regPolicy: ").append(toIndentedString(regPolicy)).append("\n");
    sb.append("    allowedIdProvider: ").append(toIndentedString(allowedIdProvider)).append("\n");
    sb.append("    ssoEnabled: ").append(toIndentedString(ssoEnabled)).append("\n");
    sb.append("    mfaEnabled: ").append(toIndentedString(mfaEnabled)).append("\n");
    sb.append("    mfaConfig: ").append(toIndentedString(mfaConfig)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("app_id");
    openapiFields.add("allowed_login_method");
    openapiFields.add("default_login_method");
    openapiFields.add("allowed_reg_method");
    openapiFields.add("default_reg_method");
    openapiFields.add("access_policy");
    openapiFields.add("reg_policy");
    openapiFields.add("allowed_id_provider");
    openapiFields.add("sso_enabled");
    openapiFields.add("mfa_enabled");
    openapiFields.add("mfa_config");
    openapiFields.add("time_created");
    openapiFields.add("time_modified");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("default_login_method");
    openapiRequiredFields.add("default_reg_method");
    openapiRequiredFields.add("sso_enabled");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppConfigRet
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppConfigRet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppConfigRet is not found in the empty JSON string", AppConfigRet.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppConfigRet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("allowed_login_method") != null && !jsonObj.get("allowed_login_method").isJsonNull()) && !jsonObj.get("allowed_login_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_login_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_login_method").toString()));
      }
      if (!jsonObj.get("default_login_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_login_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_login_method").toString()));
      }
      if ((jsonObj.get("allowed_reg_method") != null && !jsonObj.get("allowed_reg_method").isJsonNull()) && !jsonObj.get("allowed_reg_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_reg_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_reg_method").toString()));
      }
      if (!jsonObj.get("default_reg_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_reg_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_reg_method").toString()));
      }
      if ((jsonObj.get("access_policy") != null && !jsonObj.get("access_policy").isJsonNull()) && !jsonObj.get("access_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_policy").toString()));
      }
      if ((jsonObj.get("reg_policy") != null && !jsonObj.get("reg_policy").isJsonNull()) && !jsonObj.get("reg_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_policy").toString()));
      }
      if ((jsonObj.get("allowed_id_provider") != null && !jsonObj.get("allowed_id_provider").isJsonNull()) && !jsonObj.get("allowed_id_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_id_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_id_provider").toString()));
      }
      // validate the optional field `mfa_config`
      if (jsonObj.get("mfa_config") != null && !jsonObj.get("mfa_config").isJsonNull()) {
        AppConfigRetMfaConfig.validateJsonElement(jsonObj.get("mfa_config"));
      }
      if ((jsonObj.get("time_created") != null && !jsonObj.get("time_created").isJsonNull()) && !jsonObj.get("time_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_created").toString()));
      }
      if ((jsonObj.get("time_modified") != null && !jsonObj.get("time_modified").isJsonNull()) && !jsonObj.get("time_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_modified").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppConfigRet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppConfigRet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppConfigRet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppConfigRet.class));

       return (TypeAdapter<T>) new TypeAdapter<AppConfigRet>() {
           @Override
           public void write(JsonWriter out, AppConfigRet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppConfigRet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppConfigRet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppConfigRet
  * @throws IOException if the JSON string is invalid with respect to AppConfigRet
  */
  public static AppConfigRet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppConfigRet.class);
  }

 /**
  * Convert an instance of AppConfigRet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

