/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * AppSubAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AppSubAccount {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_NAME = "app_name";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_ACC_NAME = "acc_name";
  @SerializedName(SERIALIZED_NAME_ACC_NAME)
  private String accName;

  public static final String SERIALIZED_NAME_ACC_NAME_DISPLAYED = "acc_name_displayed";
  @SerializedName(SERIALIZED_NAME_ACC_NAME_DISPLAYED)
  private String accNameDisplayed;

  public static final String SERIALIZED_NAME_ACC_SOURCE = "acc_source";
  @SerializedName(SERIALIZED_NAME_ACC_SOURCE)
  private String accSource;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_ACC_PASSWORD = "acc_password";
  @SerializedName(SERIALIZED_NAME_ACC_PASSWORD)
  private String accPassword;

  public static final String SERIALIZED_NAME_ACC_STATUS = "acc_status";
  @SerializedName(SERIALIZED_NAME_ACC_STATUS)
  private String accStatus;

  public static final String SERIALIZED_NAME_ACC_SYNC_STATUS = "acc_sync_status";
  @SerializedName(SERIALIZED_NAME_ACC_SYNC_STATUS)
  private String accSyncStatus;

  public static final String SERIALIZED_NAME_SYS_EXT_PROPS = "sys_ext_props";
  @SerializedName(SERIALIZED_NAME_SYS_EXT_PROPS)
  private Object sysExtProps;

  public static final String SERIALIZED_NAME_FREE_EXT_PROPS = "free_ext_props";
  @SerializedName(SERIALIZED_NAME_FREE_EXT_PROPS)
  private Object freeExtProps;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "time_modified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expire_at";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private String expireAt;

  public AppSubAccount() {
  }
   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }

   /**
   * Get appId
   * @return appId
  **/
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }

   /**
   * Get appName
   * @return appName
  **/
  @javax.annotation.Nonnull
  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    this.appName = appName;
  }

   /**
   * Get accName
   * @return accName
  **/
  @javax.annotation.Nonnull
  public String getAccName() {
    return accName;
  }


  public void setAccName(String accName) {
    this.accName = accName;
  }

   /**
   * Get accNameDisplayed
   * @return accNameDisplayed
  **/
  @javax.annotation.Nonnull
  public String getAccNameDisplayed() {
    return accNameDisplayed;
  }


  public void setAccNameDisplayed(String accNameDisplayed) {
    this.accNameDisplayed = accNameDisplayed;
  }

   /**
   * Get accSource
   * @return accSource
  **/
  @javax.annotation.Nullable
  public String getAccSource() {
    return accSource;
  }


  public void setAccSource(String accSource) {
    this.accSource = accSource;
  }

   /**
   * Get developerId
   * @return developerId
  **/
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }


  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }


  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

   /**
   * Get accPassword
   * @return accPassword
  **/
  @javax.annotation.Nonnull
  public String getAccPassword() {
    return accPassword;
  }


  public void setAccPassword(String accPassword) {
    this.accPassword = accPassword;
  }

   /**
   * Get accStatus
   * @return accStatus
  **/
  @javax.annotation.Nonnull
  public String getAccStatus() {
    return accStatus;
  }


  public void setAccStatus(String accStatus) {
    this.accStatus = accStatus;
  }

   /**
   * Get accSyncStatus
   * @return accSyncStatus
  **/
  @javax.annotation.Nullable
  public String getAccSyncStatus() {
    return accSyncStatus;
  }


  public void setAccSyncStatus(String accSyncStatus) {
    this.accSyncStatus = accSyncStatus;
  }

   /**
   * Get sysExtProps
   * @return sysExtProps
  **/
  @javax.annotation.Nullable
  public Object getSysExtProps() {
    return sysExtProps;
  }


  public void setSysExtProps(Object sysExtProps) {
    this.sysExtProps = sysExtProps;
  }

   /**
   * Get freeExtProps
   * @return freeExtProps
  **/
  @javax.annotation.Nullable
  public Object getFreeExtProps() {
    return freeExtProps;
  }


  public void setFreeExtProps(Object freeExtProps) {
    this.freeExtProps = freeExtProps;
  }

   /**
   * Get timeCreated
   * @return timeCreated
  **/
  @javax.annotation.Nonnull
  public String getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }

   /**
   * Get timeModified
   * @return timeModified
  **/
  @javax.annotation.Nonnull
  public String getTimeModified() {
    return timeModified;
  }


  public void setTimeModified(String timeModified) {
    this.timeModified = timeModified;
  }

   /**
   * Get expireAt
   * @return expireAt
  **/
  @javax.annotation.Nullable
  public String getExpireAt() {
    return expireAt;
  }


  public void setExpireAt(String expireAt) {
    this.expireAt = expireAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppSubAccount appSubAccount = (AppSubAccount) o;
    return Objects.equals(this.id, appSubAccount.id) &&
        Objects.equals(this.userId, appSubAccount.userId) &&
        Objects.equals(this.username, appSubAccount.username) &&
        Objects.equals(this.appId, appSubAccount.appId) &&
        Objects.equals(this.appName, appSubAccount.appName) &&
        Objects.equals(this.accName, appSubAccount.accName) &&
        Objects.equals(this.accNameDisplayed, appSubAccount.accNameDisplayed) &&
        Objects.equals(this.accSource, appSubAccount.accSource) &&
        Objects.equals(this.developerId, appSubAccount.developerId) &&
        Objects.equals(this.tenantId, appSubAccount.tenantId) &&
        Objects.equals(this.accPassword, appSubAccount.accPassword) &&
        Objects.equals(this.accStatus, appSubAccount.accStatus) &&
        Objects.equals(this.accSyncStatus, appSubAccount.accSyncStatus) &&
        Objects.equals(this.sysExtProps, appSubAccount.sysExtProps) &&
        Objects.equals(this.freeExtProps, appSubAccount.freeExtProps) &&
        Objects.equals(this.timeCreated, appSubAccount.timeCreated) &&
        Objects.equals(this.timeModified, appSubAccount.timeModified) &&
        Objects.equals(this.expireAt, appSubAccount.expireAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, username, appId, appName, accName, accNameDisplayed, accSource, developerId, tenantId, accPassword, accStatus, accSyncStatus, sysExtProps, freeExtProps, timeCreated, timeModified, expireAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppSubAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    accName: ").append(toIndentedString(accName)).append("\n");
    sb.append("    accNameDisplayed: ").append(toIndentedString(accNameDisplayed)).append("\n");
    sb.append("    accSource: ").append(toIndentedString(accSource)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    accPassword: ").append(toIndentedString(accPassword)).append("\n");
    sb.append("    accStatus: ").append(toIndentedString(accStatus)).append("\n");
    sb.append("    accSyncStatus: ").append(toIndentedString(accSyncStatus)).append("\n");
    sb.append("    sysExtProps: ").append(toIndentedString(sysExtProps)).append("\n");
    sb.append("    freeExtProps: ").append(toIndentedString(freeExtProps)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("user_id");
    openapiFields.add("username");
    openapiFields.add("app_id");
    openapiFields.add("app_name");
    openapiFields.add("acc_name");
    openapiFields.add("acc_name_displayed");
    openapiFields.add("acc_source");
    openapiFields.add("developer_id");
    openapiFields.add("tenant_id");
    openapiFields.add("acc_password");
    openapiFields.add("acc_status");
    openapiFields.add("acc_sync_status");
    openapiFields.add("sys_ext_props");
    openapiFields.add("free_ext_props");
    openapiFields.add("time_created");
    openapiFields.add("time_modified");
    openapiFields.add("expire_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("app_name");
    openapiRequiredFields.add("acc_name");
    openapiRequiredFields.add("acc_name_displayed");
    openapiRequiredFields.add("developer_id");
    openapiRequiredFields.add("tenant_id");
    openapiRequiredFields.add("acc_password");
    openapiRequiredFields.add("acc_status");
    openapiRequiredFields.add("time_created");
    openapiRequiredFields.add("time_modified");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppSubAccount
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppSubAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppSubAccount is not found in the empty JSON string", AppSubAccount.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppSubAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("app_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_name").toString()));
      }
      if (!jsonObj.get("acc_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_name").toString()));
      }
      if (!jsonObj.get("acc_name_displayed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_name_displayed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_name_displayed").toString()));
      }
      if ((jsonObj.get("acc_source") != null && !jsonObj.get("acc_source").isJsonNull()) && !jsonObj.get("acc_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_source").toString()));
      }
      if (!jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if (!jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if (!jsonObj.get("acc_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_password").toString()));
      }
      if (!jsonObj.get("acc_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_status").toString()));
      }
      if ((jsonObj.get("acc_sync_status") != null && !jsonObj.get("acc_sync_status").isJsonNull()) && !jsonObj.get("acc_sync_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acc_sync_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acc_sync_status").toString()));
      }
      if (!jsonObj.get("time_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_created").toString()));
      }
      if (!jsonObj.get("time_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_modified").toString()));
      }
      if ((jsonObj.get("expire_at") != null && !jsonObj.get("expire_at").isJsonNull()) && !jsonObj.get("expire_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppSubAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppSubAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppSubAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppSubAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<AppSubAccount>() {
           @Override
           public void write(JsonWriter out, AppSubAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppSubAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppSubAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppSubAccount
  * @throws IOException if the JSON string is invalid with respect to AppSubAccount
  */
  public static AppSubAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppSubAccount.class);
  }

 /**
  * Convert an instance of AppSubAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

