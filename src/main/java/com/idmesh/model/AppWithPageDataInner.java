/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * AppWithPageDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AppWithPageDataInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_VERSION = "template_version";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VERSION)
  private String templateVersion;

  public static final String SERIALIZED_NAME_LATEST_TEMPLATE_VERSION = "latest_template_version";
  @SerializedName(SERIALIZED_NAME_LATEST_TEMPLATE_VERSION)
  private String latestTemplateVersion;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_APP_SECRET = "app_secret";
  @SerializedName(SERIALIZED_NAME_APP_SECRET)
  private String appSecret;

  public static final String SERIALIZED_NAME_DESCR = "descr";
  @SerializedName(SERIALIZED_NAME_DESCR)
  private String descr;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_LOGIN_URL = "login_url";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private String loginUrl;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_SN = "domain_sn";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SN)
  private String domainSn;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_LOGOUT_URL = "logout_url";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URL)
  private String logoutUrl;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_POLICY = "sub_account_policy";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_POLICY)
  private Integer subAccountPolicy;

  public static final String SERIALIZED_NAME_SYS_EXT_PROPS = "sys_ext_props";
  @SerializedName(SERIALIZED_NAME_SYS_EXT_PROPS)
  private Object sysExtProps;

  public static final String SERIALIZED_NAME_FREE_EXT_PROPS = "free_ext_props";
  @SerializedName(SERIALIZED_NAME_FREE_EXT_PROPS)
  private Object freeExtProps;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "time_modified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ALLOWED_ID_PROVIDER = "allowed_id_provider";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ID_PROVIDER)
  private List<String> allowedIdProvider;

  public AppWithPageDataInner() {
  }
   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * Get developerId
   * @return developerId
  **/
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }


  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }


  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }

   /**
   * 1自建应用，2市场应用
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }

   /**
   * Get appId
   * @return appId
  **/
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

   /**
   * Get templateVersion
   * @return templateVersion
  **/
  @javax.annotation.Nullable
  public String getTemplateVersion() {
    return templateVersion;
  }


  public void setTemplateVersion(String templateVersion) {
    this.templateVersion = templateVersion;
  }

   /**
   * Get latestTemplateVersion
   * @return latestTemplateVersion
  **/
  @javax.annotation.Nullable
  public String getLatestTemplateVersion() {
    return latestTemplateVersion;
  }


  public void setLatestTemplateVersion(String latestTemplateVersion) {
    this.latestTemplateVersion = latestTemplateVersion;
  }

   /**
   * 1 标准web应用，2单页web应用，3客户端应用，4后端服务
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }

   /**
   * Get appSecret
   * @return appSecret
  **/
  @javax.annotation.Nullable
  public String getAppSecret() {
    return appSecret;
  }


  public void setAppSecret(String appSecret) {
    this.appSecret = appSecret;
  }

   /**
   * Get descr
   * @return descr
  **/
  @javax.annotation.Nullable
  public String getDescr() {
    return descr;
  }


  public void setDescr(String descr) {
    this.descr = descr;
  }

   /**
   * Get logo
   * @return logo
  **/
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }


  public void setLogo(String logo) {
    this.logo = logo;
  }

   /**
   * Get loginUrl
   * @return loginUrl
  **/
  @javax.annotation.Nullable
  public String getLoginUrl() {
    return loginUrl;
  }


  public void setLoginUrl(String loginUrl) {
    this.loginUrl = loginUrl;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }

   /**
   * Get domainSn
   * @return domainSn
  **/
  @javax.annotation.Nullable
  public String getDomainSn() {
    return domainSn;
  }


  public void setDomainSn(String domainSn) {
    this.domainSn = domainSn;
  }

   /**
   * Get redirectUrl
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

   /**
   * Get logoutUrl
   * @return logoutUrl
  **/
  @javax.annotation.Nullable
  public String getLogoutUrl() {
    return logoutUrl;
  }


  public void setLogoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
  }

   /**
   * Get subAccountPolicy
   * @return subAccountPolicy
  **/
  @javax.annotation.Nullable
  public Integer getSubAccountPolicy() {
    return subAccountPolicy;
  }


  public void setSubAccountPolicy(Integer subAccountPolicy) {
    this.subAccountPolicy = subAccountPolicy;
  }

   /**
   * Get sysExtProps
   * @return sysExtProps
  **/
  @javax.annotation.Nullable
  public Object getSysExtProps() {
    return sysExtProps;
  }


  public void setSysExtProps(Object sysExtProps) {
    this.sysExtProps = sysExtProps;
  }

   /**
   * Get freeExtProps
   * @return freeExtProps
  **/
  @javax.annotation.Nullable
  public Object getFreeExtProps() {
    return freeExtProps;
  }


  public void setFreeExtProps(Object freeExtProps) {
    this.freeExtProps = freeExtProps;
  }

   /**
   * Get timeCreated
   * @return timeCreated
  **/
  @javax.annotation.Nullable
  public String getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }

   /**
   * Get timeModified
   * @return timeModified
  **/
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }


  public void setTimeModified(String timeModified) {
    this.timeModified = timeModified;
  }

   /**
   * 1启用，0禁用
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }

   /**
   * Get allowedIdProvider
   * @return allowedIdProvider
  **/
  @javax.annotation.Nullable
  public List<String> getAllowedIdProvider() {
    return allowedIdProvider;
  }


  public void setAllowedIdProvider(List<String> allowedIdProvider) {
    this.allowedIdProvider = allowedIdProvider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppWithPageDataInner appWithPageDataInner = (AppWithPageDataInner) o;
    return Objects.equals(this.id, appWithPageDataInner.id) &&
        Objects.equals(this.developerId, appWithPageDataInner.developerId) &&
        Objects.equals(this.tenantId, appWithPageDataInner.tenantId) &&
        Objects.equals(this.name, appWithPageDataInner.name) &&
        Objects.equals(this.type, appWithPageDataInner.type) &&
        Objects.equals(this.appId, appWithPageDataInner.appId) &&
        Objects.equals(this.templateId, appWithPageDataInner.templateId) &&
        Objects.equals(this.templateVersion, appWithPageDataInner.templateVersion) &&
        Objects.equals(this.latestTemplateVersion, appWithPageDataInner.latestTemplateVersion) &&
        Objects.equals(this.category, appWithPageDataInner.category) &&
        Objects.equals(this.appSecret, appWithPageDataInner.appSecret) &&
        Objects.equals(this.descr, appWithPageDataInner.descr) &&
        Objects.equals(this.logo, appWithPageDataInner.logo) &&
        Objects.equals(this.loginUrl, appWithPageDataInner.loginUrl) &&
        Objects.equals(this.domain, appWithPageDataInner.domain) &&
        Objects.equals(this.domainSn, appWithPageDataInner.domainSn) &&
        Objects.equals(this.redirectUrl, appWithPageDataInner.redirectUrl) &&
        Objects.equals(this.logoutUrl, appWithPageDataInner.logoutUrl) &&
        Objects.equals(this.subAccountPolicy, appWithPageDataInner.subAccountPolicy) &&
        Objects.equals(this.sysExtProps, appWithPageDataInner.sysExtProps) &&
        Objects.equals(this.freeExtProps, appWithPageDataInner.freeExtProps) &&
        Objects.equals(this.timeCreated, appWithPageDataInner.timeCreated) &&
        Objects.equals(this.timeModified, appWithPageDataInner.timeModified) &&
        Objects.equals(this.status, appWithPageDataInner.status) &&
        Objects.equals(this.allowedIdProvider, appWithPageDataInner.allowedIdProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, developerId, tenantId, name, type, appId, templateId, templateVersion, latestTemplateVersion, category, appSecret, descr, logo, loginUrl, domain, domainSn, redirectUrl, logoutUrl, subAccountPolicy, sysExtProps, freeExtProps, timeCreated, timeModified, status, allowedIdProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppWithPageDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    latestTemplateVersion: ").append(toIndentedString(latestTemplateVersion)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    appSecret: ").append(toIndentedString(appSecret)).append("\n");
    sb.append("    descr: ").append(toIndentedString(descr)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainSn: ").append(toIndentedString(domainSn)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    subAccountPolicy: ").append(toIndentedString(subAccountPolicy)).append("\n");
    sb.append("    sysExtProps: ").append(toIndentedString(sysExtProps)).append("\n");
    sb.append("    freeExtProps: ").append(toIndentedString(freeExtProps)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    allowedIdProvider: ").append(toIndentedString(allowedIdProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("developer_id");
    openapiFields.add("tenant_id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("app_id");
    openapiFields.add("template_id");
    openapiFields.add("template_version");
    openapiFields.add("latest_template_version");
    openapiFields.add("category");
    openapiFields.add("app_secret");
    openapiFields.add("descr");
    openapiFields.add("logo");
    openapiFields.add("login_url");
    openapiFields.add("domain");
    openapiFields.add("domain_sn");
    openapiFields.add("redirect_url");
    openapiFields.add("logout_url");
    openapiFields.add("sub_account_policy");
    openapiFields.add("sys_ext_props");
    openapiFields.add("free_ext_props");
    openapiFields.add("time_created");
    openapiFields.add("time_modified");
    openapiFields.add("status");
    openapiFields.add("allowed_id_provider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("developer_id");
    openapiRequiredFields.add("tenant_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppWithPageDataInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppWithPageDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppWithPageDataInner is not found in the empty JSON string", AppWithPageDataInner.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppWithPageDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if (!jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if ((jsonObj.get("template_version") != null && !jsonObj.get("template_version").isJsonNull()) && !jsonObj.get("template_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_version").toString()));
      }
      if ((jsonObj.get("latest_template_version") != null && !jsonObj.get("latest_template_version").isJsonNull()) && !jsonObj.get("latest_template_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_template_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_template_version").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("app_secret") != null && !jsonObj.get("app_secret").isJsonNull()) && !jsonObj.get("app_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_secret").toString()));
      }
      if ((jsonObj.get("descr") != null && !jsonObj.get("descr").isJsonNull()) && !jsonObj.get("descr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descr").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("login_url") != null && !jsonObj.get("login_url").isJsonNull()) && !jsonObj.get("login_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_url").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("domain_sn") != null && !jsonObj.get("domain_sn").isJsonNull()) && !jsonObj.get("domain_sn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_sn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_sn").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("logout_url") != null && !jsonObj.get("logout_url").isJsonNull()) && !jsonObj.get("logout_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logout_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logout_url").toString()));
      }
      if ((jsonObj.get("time_created") != null && !jsonObj.get("time_created").isJsonNull()) && !jsonObj.get("time_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_created").toString()));
      }
      if ((jsonObj.get("time_modified") != null && !jsonObj.get("time_modified").isJsonNull()) && !jsonObj.get("time_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_modified").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_id_provider") != null && !jsonObj.get("allowed_id_provider").isJsonNull() && !jsonObj.get("allowed_id_provider").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_id_provider` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_id_provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppWithPageDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppWithPageDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppWithPageDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppWithPageDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AppWithPageDataInner>() {
           @Override
           public void write(JsonWriter out, AppWithPageDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppWithPageDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppWithPageDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppWithPageDataInner
  * @throws IOException if the JSON string is invalid with respect to AppWithPageDataInner
  */
  public static AppWithPageDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppWithPageDataInner.class);
  }

 /**
  * Convert an instance of AppWithPageDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

