/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * AuthConfigEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthConfigEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AUTH_METHOD_ID = "auth_method_id";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD_ID)
  private String authMethodId;

  public static final String SERIALIZED_NAME_AUTH_METHOD_CODE = "auth_method_code";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD_CODE)
  private String authMethodCode;

  public static final String SERIALIZED_NAME_IDP_CONFIG_ID = "idp_config_id";
  @SerializedName(SERIALIZED_NAME_IDP_CONFIG_ID)
  private String idpConfigId;

  public static final String SERIALIZED_NAME_IDP_CONFIG_CODE = "idp_config_code";
  @SerializedName(SERIALIZED_NAME_IDP_CONFIG_CODE)
  private String idpConfigCode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_IDP_TYPE = "idp_type";
  @SerializedName(SERIALIZED_NAME_IDP_TYPE)
  private String idpType;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public AuthConfigEntity() {
  }
   /**
   * 认证方式ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * 认证方式模板的ID
   * @return authMethodId
  **/
  @javax.annotation.Nonnull
  public String getAuthMethodId() {
    return authMethodId;
  }


  public void setAuthMethodId(String authMethodId) {
    this.authMethodId = authMethodId;
  }

   /**
   * 认证方式模板的CODE
   * @return authMethodCode
  **/
  @javax.annotation.Nonnull
  public String getAuthMethodCode() {
    return authMethodCode;
  }


  public void setAuthMethodCode(String authMethodCode) {
    this.authMethodCode = authMethodCode;
  }

   /**
   * 身份源（IDP）的ID
   * @return idpConfigId
  **/
  @javax.annotation.Nonnull
  public String getIdpConfigId() {
    return idpConfigId;
  }


  public void setIdpConfigId(String idpConfigId) {
    this.idpConfigId = idpConfigId;
  }

   /**
   * 身份源（IDP）的CODE
   * @return idpConfigCode
  **/
  @javax.annotation.Nonnull
  public String getIdpConfigCode() {
    return idpConfigCode;
  }


  public void setIdpConfigCode(String idpConfigCode) {
    this.idpConfigCode = idpConfigCode;
  }

   /**
   * 显示名称
   * @return displayName
  **/
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

   /**
   * 开发者ID
   * @return developerId
  **/
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }


  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }

   /**
   * 租户ID
   * @return tenantId
  **/
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }


  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

   /**
   * 身份源（IDP）的类型
   * @return idpType
  **/
  @javax.annotation.Nonnull
  public String getIdpType() {
    return idpType;
  }


  public void setIdpType(String idpType) {
    this.idpType = idpType;
  }

   /**
   * 身份源（IDP）的logo
   * @return logo
  **/
  @javax.annotation.Nonnull
  public String getLogo() {
    return logo;
  }


  public void setLogo(String logo) {
    this.logo = logo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthConfigEntity authConfigEntity = (AuthConfigEntity) o;
    return Objects.equals(this.id, authConfigEntity.id) &&
        Objects.equals(this.authMethodId, authConfigEntity.authMethodId) &&
        Objects.equals(this.authMethodCode, authConfigEntity.authMethodCode) &&
        Objects.equals(this.idpConfigId, authConfigEntity.idpConfigId) &&
        Objects.equals(this.idpConfigCode, authConfigEntity.idpConfigCode) &&
        Objects.equals(this.displayName, authConfigEntity.displayName) &&
        Objects.equals(this.developerId, authConfigEntity.developerId) &&
        Objects.equals(this.tenantId, authConfigEntity.tenantId) &&
        Objects.equals(this.idpType, authConfigEntity.idpType) &&
        Objects.equals(this.logo, authConfigEntity.logo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, authMethodId, authMethodCode, idpConfigId, idpConfigCode, displayName, developerId, tenantId, idpType, logo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthConfigEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    authMethodId: ").append(toIndentedString(authMethodId)).append("\n");
    sb.append("    authMethodCode: ").append(toIndentedString(authMethodCode)).append("\n");
    sb.append("    idpConfigId: ").append(toIndentedString(idpConfigId)).append("\n");
    sb.append("    idpConfigCode: ").append(toIndentedString(idpConfigCode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    idpType: ").append(toIndentedString(idpType)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("auth_method_id");
    openapiFields.add("auth_method_code");
    openapiFields.add("idp_config_id");
    openapiFields.add("idp_config_code");
    openapiFields.add("display_name");
    openapiFields.add("developer_id");
    openapiFields.add("tenant_id");
    openapiFields.add("idp_type");
    openapiFields.add("logo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("auth_method_id");
    openapiRequiredFields.add("auth_method_code");
    openapiRequiredFields.add("idp_config_id");
    openapiRequiredFields.add("idp_config_code");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("developer_id");
    openapiRequiredFields.add("tenant_id");
    openapiRequiredFields.add("idp_type");
    openapiRequiredFields.add("logo");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthConfigEntity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthConfigEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthConfigEntity is not found in the empty JSON string", AuthConfigEntity.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthConfigEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("auth_method_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_method_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_method_id").toString()));
      }
      if (!jsonObj.get("auth_method_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_method_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_method_code").toString()));
      }
      if (!jsonObj.get("idp_config_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_config_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_config_id").toString()));
      }
      if (!jsonObj.get("idp_config_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_config_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_config_code").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if (!jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if (!jsonObj.get("idp_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_type").toString()));
      }
      if (!jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthConfigEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthConfigEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthConfigEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthConfigEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthConfigEntity>() {
           @Override
           public void write(JsonWriter out, AuthConfigEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthConfigEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthConfigEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthConfigEntity
  * @throws IOException if the JSON string is invalid with respect to AuthConfigEntity
  */
  public static AuthConfigEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthConfigEntity.class);
  }

 /**
  * Convert an instance of AuthConfigEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

