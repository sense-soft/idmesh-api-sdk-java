/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.idmesh.model.AuthMethodRetConfigFieldsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * AuthMethodRet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthMethodRet {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMP_CODE = "comp_code";
  @SerializedName(SERIALIZED_NAME_COMP_CODE)
  private String compCode;

  public static final String SERIALIZED_NAME_IDP_CODE = "idp_code";
  @SerializedName(SERIALIZED_NAME_IDP_CODE)
  private String idpCode;

  public static final String SERIALIZED_NAME_FEATURE = "feature";
  @SerializedName(SERIALIZED_NAME_FEATURE)
  private Object feature;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DESCR = "descr";
  @SerializedName(SERIALIZED_NAME_DESCR)
  private String descr;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CONFIG_FIELDS = "config_fields";
  @SerializedName(SERIALIZED_NAME_CONFIG_FIELDS)
  private List<AuthMethodRetConfigFieldsInner> configFields = new ArrayList<>();

  public AuthMethodRet() {
  }
   /**
   * ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * 登录方式代码
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }

   /**
   * 登录方式名称
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }

   /**
   * 登录组件名称
   * @return compCode
  **/
  @javax.annotation.Nonnull
  public String getCompCode() {
    return compCode;
  }


  public void setCompCode(String compCode) {
    this.compCode = compCode;
  }

   /**
   * IDP代码（身份源提供者的代码）
   * @return idpCode
  **/
  @javax.annotation.Nonnull
  public String getIdpCode() {
    return idpCode;
  }


  public void setIdpCode(String idpCode) {
    this.idpCode = idpCode;
  }

   /**
   * 特性
   * @return feature
  **/
  @javax.annotation.Nonnull
  public Object getFeature() {
    return feature;
  }


  public void setFeature(Object feature) {
    this.feature = feature;
  }

   /**
   * 状态
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }

   /**
   * 说明
   * @return descr
  **/
  @javax.annotation.Nonnull
  public String getDescr() {
    return descr;
  }


  public void setDescr(String descr) {
    this.descr = descr;
  }

   /**
   * 类型（社会化、企业）
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }

   /**
   * 动态的配置字段
   * @return configFields
  **/
  @javax.annotation.Nonnull
  public List<AuthMethodRetConfigFieldsInner> getConfigFields() {
    return configFields;
  }


  public void setConfigFields(List<AuthMethodRetConfigFieldsInner> configFields) {
    this.configFields = configFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthMethodRet authMethodRet = (AuthMethodRet) o;
    return Objects.equals(this.id, authMethodRet.id) &&
        Objects.equals(this.code, authMethodRet.code) &&
        Objects.equals(this.name, authMethodRet.name) &&
        Objects.equals(this.compCode, authMethodRet.compCode) &&
        Objects.equals(this.idpCode, authMethodRet.idpCode) &&
        Objects.equals(this.feature, authMethodRet.feature) &&
        Objects.equals(this.status, authMethodRet.status) &&
        Objects.equals(this.descr, authMethodRet.descr) &&
        Objects.equals(this.type, authMethodRet.type) &&
        Objects.equals(this.configFields, authMethodRet.configFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, name, compCode, idpCode, feature, status, descr, type, configFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthMethodRet {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    compCode: ").append(toIndentedString(compCode)).append("\n");
    sb.append("    idpCode: ").append(toIndentedString(idpCode)).append("\n");
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    descr: ").append(toIndentedString(descr)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    configFields: ").append(toIndentedString(configFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("comp_code");
    openapiFields.add("idp_code");
    openapiFields.add("feature");
    openapiFields.add("status");
    openapiFields.add("descr");
    openapiFields.add("type");
    openapiFields.add("config_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("comp_code");
    openapiRequiredFields.add("idp_code");
    openapiRequiredFields.add("feature");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("descr");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("config_fields");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthMethodRet
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthMethodRet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthMethodRet is not found in the empty JSON string", AuthMethodRet.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthMethodRet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("comp_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comp_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comp_code").toString()));
      }
      if (!jsonObj.get("idp_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_code").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("descr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descr").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("config_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_fields` to be an array in the JSON string but got `%s`", jsonObj.get("config_fields").toString()));
      }

      JsonArray jsonArrayconfigFields = jsonObj.getAsJsonArray("config_fields");
      // validate the required field `config_fields` (array)
      for (int i = 0; i < jsonArrayconfigFields.size(); i++) {
        AuthMethodRetConfigFieldsInner.validateJsonElement(jsonArrayconfigFields.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthMethodRet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthMethodRet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthMethodRet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthMethodRet.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthMethodRet>() {
           @Override
           public void write(JsonWriter out, AuthMethodRet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthMethodRet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthMethodRet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthMethodRet
  * @throws IOException if the JSON string is invalid with respect to AuthMethodRet
  */
  public static AuthMethodRet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthMethodRet.class);
  }

 /**
  * Convert an instance of AuthMethodRet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

