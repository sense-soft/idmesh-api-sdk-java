/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * IDPTestReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IDPTestReq {
  public static final String SERIALIZED_NAME_LDAP_URL = "ldap_url";
  @SerializedName(SERIALIZED_NAME_LDAP_URL)
  private String ldapUrl;

  public static final String SERIALIZED_NAME_BIND_DN = "bind_dn";
  @SerializedName(SERIALIZED_NAME_BIND_DN)
  private String bindDn;

  public static final String SERIALIZED_NAME_BIND_PASSWORD = "bind_password";
  @SerializedName(SERIALIZED_NAME_BIND_PASSWORD)
  private String bindPassword;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_USERS_DN = "users_dn";
  @SerializedName(SERIALIZED_NAME_USERS_DN)
  private String usersDn;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public IDPTestReq() {
  }
   /**
   * LDAP地址
   * @return ldapUrl
  **/
  @javax.annotation.Nonnull
  public String getLdapUrl() {
    return ldapUrl;
  }


  public void setLdapUrl(String ldapUrl) {
    this.ldapUrl = ldapUrl;
  }

   /**
   * 绑定DN
   * @return bindDn
  **/
  @javax.annotation.Nonnull
  public String getBindDn() {
    return bindDn;
  }


  public void setBindDn(String bindDn) {
    this.bindDn = bindDn;
  }

   /**
   * 绑定口令
   * @return bindPassword
  **/
  @javax.annotation.Nonnull
  public String getBindPassword() {
    return bindPassword;
  }


  public void setBindPassword(String bindPassword) {
    this.bindPassword = bindPassword;
  }

   /**
   * 过滤条件
   * @return filter
  **/
  @javax.annotation.Nonnull
  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }

   /**
   * 用户DN
   * @return usersDn
  **/
  @javax.annotation.Nonnull
  public String getUsersDn() {
    return usersDn;
  }


  public void setUsersDn(String usersDn) {
    this.usersDn = usersDn;
  }

   /**
   * 用户名
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }

   /**
   * 密码
   * @return password
  **/
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDPTestReq idPTestReq = (IDPTestReq) o;
    return Objects.equals(this.ldapUrl, idPTestReq.ldapUrl) &&
        Objects.equals(this.bindDn, idPTestReq.bindDn) &&
        Objects.equals(this.bindPassword, idPTestReq.bindPassword) &&
        Objects.equals(this.filter, idPTestReq.filter) &&
        Objects.equals(this.usersDn, idPTestReq.usersDn) &&
        Objects.equals(this.username, idPTestReq.username) &&
        Objects.equals(this.password, idPTestReq.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ldapUrl, bindDn, bindPassword, filter, usersDn, username, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDPTestReq {\n");
    sb.append("    ldapUrl: ").append(toIndentedString(ldapUrl)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    bindPassword: ").append(toIndentedString(bindPassword)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    usersDn: ").append(toIndentedString(usersDn)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ldap_url");
    openapiFields.add("bind_dn");
    openapiFields.add("bind_password");
    openapiFields.add("filter");
    openapiFields.add("users_dn");
    openapiFields.add("username");
    openapiFields.add("password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ldap_url");
    openapiRequiredFields.add("bind_dn");
    openapiRequiredFields.add("bind_password");
    openapiRequiredFields.add("filter");
    openapiRequiredFields.add("users_dn");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("password");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IDPTestReq
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IDPTestReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDPTestReq is not found in the empty JSON string", IDPTestReq.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IDPTestReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ldap_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_url").toString()));
      }
      if (!jsonObj.get("bind_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind_dn").toString()));
      }
      if (!jsonObj.get("bind_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind_password").toString()));
      }
      if (!jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if (!jsonObj.get("users_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users_dn").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDPTestReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDPTestReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDPTestReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDPTestReq.class));

       return (TypeAdapter<T>) new TypeAdapter<IDPTestReq>() {
           @Override
           public void write(JsonWriter out, IDPTestReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDPTestReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IDPTestReq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IDPTestReq
  * @throws IOException if the JSON string is invalid with respect to IDPTestReq
  */
  public static IDPTestReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDPTestReq.class);
  }

 /**
  * Convert an instance of IDPTestReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

