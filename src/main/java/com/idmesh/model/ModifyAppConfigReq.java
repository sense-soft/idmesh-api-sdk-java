/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * ModifyAppConfigReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModifyAppConfigReq {
  public static final String SERIALIZED_NAME_ALLOWED_LOGIN_METHOD = "allowed_login_method";
  @SerializedName(SERIALIZED_NAME_ALLOWED_LOGIN_METHOD)
  private String allowedLoginMethod;

  public static final String SERIALIZED_NAME_DEFAULT_LOGIN_METHOD = "default_login_method";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOGIN_METHOD)
  private String defaultLoginMethod;

  public static final String SERIALIZED_NAME_ALLOWED_REG_METHOD = "allowed_reg_method";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REG_METHOD)
  private String allowedRegMethod;

  public static final String SERIALIZED_NAME_DEFAULT_REG_METHOD = "default_reg_method";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REG_METHOD)
  private String defaultRegMethod;

  public static final String SERIALIZED_NAME_DEFAULT_PROTOCOL = "default_protocol";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROTOCOL)
  private String defaultProtocol;

  public static final String SERIALIZED_NAME_ACCESS_POLICY = "access_policy";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY)
  private String accessPolicy;

  public static final String SERIALIZED_NAME_REG_POLICY = "reg_policy";
  @SerializedName(SERIALIZED_NAME_REG_POLICY)
  private List<String> regPolicy;

  public ModifyAppConfigReq() {
  }
   /**
   * 允许的登录方式，格式为：[\&quot;password\&quot;, \&quot;vercode\&quot;]
   * @return allowedLoginMethod
  **/
  @javax.annotation.Nullable
  public String getAllowedLoginMethod() {
    return allowedLoginMethod;
  }


  public void setAllowedLoginMethod(String allowedLoginMethod) {
    this.allowedLoginMethod = allowedLoginMethod;
  }

   /**
   * 默认登录方式，格式为：password
   * @return defaultLoginMethod
  **/
  @javax.annotation.Nullable
  public String getDefaultLoginMethod() {
    return defaultLoginMethod;
  }


  public void setDefaultLoginMethod(String defaultLoginMethod) {
    this.defaultLoginMethod = defaultLoginMethod;
  }

   /**
   * 允许注册方式，格式为：[\&quot;mobile\&quot;, \&quot;email\&quot;]
   * @return allowedRegMethod
  **/
  @javax.annotation.Nullable
  public String getAllowedRegMethod() {
    return allowedRegMethod;
  }


  public void setAllowedRegMethod(String allowedRegMethod) {
    this.allowedRegMethod = allowedRegMethod;
  }

   /**
   * 默认注册方式，格式为：mobile
   * @return defaultRegMethod
  **/
  @javax.annotation.Nullable
  public String getDefaultRegMethod() {
    return defaultRegMethod;
  }


  public void setDefaultRegMethod(String defaultRegMethod) {
    this.defaultRegMethod = defaultRegMethod;
  }

   /**
   * 默认登录协议
   * @return defaultProtocol
  **/
  @javax.annotation.Nullable
  public String getDefaultProtocol() {
    return defaultProtocol;
  }


  public void setDefaultProtocol(String defaultProtocol) {
    this.defaultProtocol = defaultProtocol;
  }

   /**
   * 应用级访问控制权限，all: 所有人可访问 permitted: 拒绝未授权访问
   * @return accessPolicy
  **/
  @javax.annotation.Nullable
  public String getAccessPolicy() {
    return accessPolicy;
  }


  public void setAccessPolicy(String accessPolicy) {
    this.accessPolicy = accessPolicy;
  }

   /**
   * 新用户注册策略（是否允许自动注册，注册验证方式等），1是，2否,
   * @return regPolicy
  **/
  @javax.annotation.Nullable
  public List<String> getRegPolicy() {
    return regPolicy;
  }


  public void setRegPolicy(List<String> regPolicy) {
    this.regPolicy = regPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyAppConfigReq modifyAppConfigReq = (ModifyAppConfigReq) o;
    return Objects.equals(this.allowedLoginMethod, modifyAppConfigReq.allowedLoginMethod) &&
        Objects.equals(this.defaultLoginMethod, modifyAppConfigReq.defaultLoginMethod) &&
        Objects.equals(this.allowedRegMethod, modifyAppConfigReq.allowedRegMethod) &&
        Objects.equals(this.defaultRegMethod, modifyAppConfigReq.defaultRegMethod) &&
        Objects.equals(this.defaultProtocol, modifyAppConfigReq.defaultProtocol) &&
        Objects.equals(this.accessPolicy, modifyAppConfigReq.accessPolicy) &&
        Objects.equals(this.regPolicy, modifyAppConfigReq.regPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedLoginMethod, defaultLoginMethod, allowedRegMethod, defaultRegMethod, defaultProtocol, accessPolicy, regPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyAppConfigReq {\n");
    sb.append("    allowedLoginMethod: ").append(toIndentedString(allowedLoginMethod)).append("\n");
    sb.append("    defaultLoginMethod: ").append(toIndentedString(defaultLoginMethod)).append("\n");
    sb.append("    allowedRegMethod: ").append(toIndentedString(allowedRegMethod)).append("\n");
    sb.append("    defaultRegMethod: ").append(toIndentedString(defaultRegMethod)).append("\n");
    sb.append("    defaultProtocol: ").append(toIndentedString(defaultProtocol)).append("\n");
    sb.append("    accessPolicy: ").append(toIndentedString(accessPolicy)).append("\n");
    sb.append("    regPolicy: ").append(toIndentedString(regPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_login_method");
    openapiFields.add("default_login_method");
    openapiFields.add("allowed_reg_method");
    openapiFields.add("default_reg_method");
    openapiFields.add("default_protocol");
    openapiFields.add("access_policy");
    openapiFields.add("reg_policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModifyAppConfigReq
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyAppConfigReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyAppConfigReq is not found in the empty JSON string", ModifyAppConfigReq.openapiRequiredFields.toString()));
        }
      }

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowed_login_method") != null && !jsonObj.get("allowed_login_method").isJsonNull()) && !jsonObj.get("allowed_login_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_login_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_login_method").toString()));
      }
      if ((jsonObj.get("default_login_method") != null && !jsonObj.get("default_login_method").isJsonNull()) && !jsonObj.get("default_login_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_login_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_login_method").toString()));
      }
      if ((jsonObj.get("allowed_reg_method") != null && !jsonObj.get("allowed_reg_method").isJsonNull()) && !jsonObj.get("allowed_reg_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_reg_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_reg_method").toString()));
      }
      if ((jsonObj.get("default_reg_method") != null && !jsonObj.get("default_reg_method").isJsonNull()) && !jsonObj.get("default_reg_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_reg_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_reg_method").toString()));
      }
      if ((jsonObj.get("default_protocol") != null && !jsonObj.get("default_protocol").isJsonNull()) && !jsonObj.get("default_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_protocol").toString()));
      }
      if ((jsonObj.get("access_policy") != null && !jsonObj.get("access_policy").isJsonNull()) && !jsonObj.get("access_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_policy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reg_policy") != null && !jsonObj.get("reg_policy").isJsonNull() && !jsonObj.get("reg_policy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_policy` to be an array in the JSON string but got `%s`", jsonObj.get("reg_policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyAppConfigReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyAppConfigReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyAppConfigReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyAppConfigReq.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyAppConfigReq>() {
           @Override
           public void write(JsonWriter out, ModifyAppConfigReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyAppConfigReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModifyAppConfigReq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModifyAppConfigReq
  * @throws IOException if the JSON string is invalid with respect to ModifyAppConfigReq
  */
  public static ModifyAppConfigReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyAppConfigReq.class);
  }

 /**
  * Convert an instance of ModifyAppConfigReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

