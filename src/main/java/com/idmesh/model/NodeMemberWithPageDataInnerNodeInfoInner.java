/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * NodeMemberWithPageDataInnerNodeInfoInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeMemberWithPageDataInnerNodeInfoInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relation_type";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private String relationType;

  public static final String SERIALIZED_NAME_RELATION_DATA = "relation_data";
  @SerializedName(SERIALIZED_NAME_RELATION_DATA)
  private String relationData;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private String isDefault;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "time_modified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private OffsetDateTime timeModified;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public NodeMemberWithPageDataInnerNodeInfoInner() {
  }
   /**
   * 全局唯一ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * 节点ID
   * @return nodeId
  **/
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

   /**
   * 用户ID
   * @return userId
  **/
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }

   /**
   * 所属组织关系路径
   * @return path
  **/
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }

   /**
   * 显示名
   * @return displayName
  **/
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

   /**
   * 用户名
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }

   /**
   * 关联类型（用于区分多重关联）
   * @return relationType
  **/
  @javax.annotation.Nullable
  public String getRelationType() {
    return relationType;
  }


  public void setRelationType(String relationType) {
    this.relationType = relationType;
  }

   /**
   * 关联扩展信息
   * @return relationData
  **/
  @javax.annotation.Nullable
  public String getRelationData() {
    return relationData;
  }


  public void setRelationData(String relationData) {
    this.relationData = relationData;
  }

   /**
   * 是否默认关系
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public String getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(String isDefault) {
    this.isDefault = isDefault;
  }

   /**
   * 创建时间
   * @return timeCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }

   /**
   * 修改时间
   * @return timeModified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeModified() {
    return timeModified;
  }


  public void setTimeModified(OffsetDateTime timeModified) {
    this.timeModified = timeModified;
  }

   /**
   * 状态
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeMemberWithPageDataInnerNodeInfoInner nodeMemberWithPageDataInnerNodeInfoInner = (NodeMemberWithPageDataInnerNodeInfoInner) o;
    return Objects.equals(this.id, nodeMemberWithPageDataInnerNodeInfoInner.id) &&
        Objects.equals(this.nodeId, nodeMemberWithPageDataInnerNodeInfoInner.nodeId) &&
        Objects.equals(this.userId, nodeMemberWithPageDataInnerNodeInfoInner.userId) &&
        Objects.equals(this.path, nodeMemberWithPageDataInnerNodeInfoInner.path) &&
        Objects.equals(this.displayName, nodeMemberWithPageDataInnerNodeInfoInner.displayName) &&
        Objects.equals(this.username, nodeMemberWithPageDataInnerNodeInfoInner.username) &&
        Objects.equals(this.relationType, nodeMemberWithPageDataInnerNodeInfoInner.relationType) &&
        Objects.equals(this.relationData, nodeMemberWithPageDataInnerNodeInfoInner.relationData) &&
        Objects.equals(this.isDefault, nodeMemberWithPageDataInnerNodeInfoInner.isDefault) &&
        Objects.equals(this.timeCreated, nodeMemberWithPageDataInnerNodeInfoInner.timeCreated) &&
        Objects.equals(this.timeModified, nodeMemberWithPageDataInnerNodeInfoInner.timeModified) &&
        Objects.equals(this.status, nodeMemberWithPageDataInnerNodeInfoInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nodeId, userId, path, displayName, username, relationType, relationData, isDefault, timeCreated, timeModified, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeMemberWithPageDataInnerNodeInfoInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    relationData: ").append(toIndentedString(relationData)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("user_id");
    openapiFields.add("path");
    openapiFields.add("display_name");
    openapiFields.add("username");
    openapiFields.add("relation_type");
    openapiFields.add("relation_data");
    openapiFields.add("is_default");
    openapiFields.add("time_created");
    openapiFields.add("time_modified");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("time_created");
    openapiRequiredFields.add("time_modified");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NodeMemberWithPageDataInnerNodeInfoInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeMemberWithPageDataInnerNodeInfoInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeMemberWithPageDataInnerNodeInfoInner is not found in the empty JSON string", NodeMemberWithPageDataInnerNodeInfoInner.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeMemberWithPageDataInnerNodeInfoInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("relation_type") != null && !jsonObj.get("relation_type").isJsonNull()) && !jsonObj.get("relation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relation_type").toString()));
      }
      if ((jsonObj.get("relation_data") != null && !jsonObj.get("relation_data").isJsonNull()) && !jsonObj.get("relation_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relation_data").toString()));
      }
      if ((jsonObj.get("is_default") != null && !jsonObj.get("is_default").isJsonNull()) && !jsonObj.get("is_default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_default").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeMemberWithPageDataInnerNodeInfoInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeMemberWithPageDataInnerNodeInfoInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeMemberWithPageDataInnerNodeInfoInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeMemberWithPageDataInnerNodeInfoInner.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeMemberWithPageDataInnerNodeInfoInner>() {
           @Override
           public void write(JsonWriter out, NodeMemberWithPageDataInnerNodeInfoInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeMemberWithPageDataInnerNodeInfoInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeMemberWithPageDataInnerNodeInfoInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeMemberWithPageDataInnerNodeInfoInner
  * @throws IOException if the JSON string is invalid with respect to NodeMemberWithPageDataInnerNodeInfoInner
  */
  public static NodeMemberWithPageDataInnerNodeInfoInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeMemberWithPageDataInnerNodeInfoInner.class);
  }

 /**
  * Convert an instance of NodeMemberWithPageDataInnerNodeInfoInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

