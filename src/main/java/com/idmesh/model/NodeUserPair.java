/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * NodeUserPair
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeUserPair {
  public static final String SERIALIZED_NAME_RELATION_DATA = "relation_data";
  @SerializedName(SERIALIZED_NAME_RELATION_DATA)
  private String relationData;

  public static final String SERIALIZED_NAME_USER_IDS = "user_ids";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List<String> userIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relation_type";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private String relationType;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private String isDefault;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_OBJECT_CODE = "object_code";
  @SerializedName(SERIALIZED_NAME_OBJECT_CODE)
  private String objectCode;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public NodeUserPair() {
  }
   /**
   * 关联扩展信息
   * @return relationData
  **/
  @javax.annotation.Nullable
  public String getRelationData() {
    return relationData;
  }


  public void setRelationData(String relationData) {
    this.relationData = relationData;
  }

   /**
   * Get userIds
   * @return userIds
  **/
  @javax.annotation.Nonnull
  public List<String> getUserIds() {
    return userIds;
  }


  public void setUserIds(List<String> userIds) {
    this.userIds = userIds;
  }

   /**
   * 用于区分多重关联
   * @return relationType
  **/
  @javax.annotation.Nullable
  public String getRelationType() {
    return relationType;
  }


  public void setRelationType(String relationType) {
    this.relationType = relationType;
  }

   /**
   * 1是，0否
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public String getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(String isDefault) {
    this.isDefault = isDefault;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

   /**
   * 用于区分组织关系，如果node_id为空时必填
   * @return objectCode
  **/
  @javax.annotation.Nullable
  public String getObjectCode() {
    return objectCode;
  }


  public void setObjectCode(String objectCode) {
    this.objectCode = objectCode;
  }

   /**
   * 用于区分节点，如果node_id为空时必填
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeUserPair nodeUserPair = (NodeUserPair) o;
    return Objects.equals(this.relationData, nodeUserPair.relationData) &&
        Objects.equals(this.userIds, nodeUserPair.userIds) &&
        Objects.equals(this.relationType, nodeUserPair.relationType) &&
        Objects.equals(this.isDefault, nodeUserPair.isDefault) &&
        Objects.equals(this.nodeId, nodeUserPair.nodeId) &&
        Objects.equals(this.objectCode, nodeUserPair.objectCode) &&
        Objects.equals(this.code, nodeUserPair.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationData, userIds, relationType, isDefault, nodeId, objectCode, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeUserPair {\n");
    sb.append("    relationData: ").append(toIndentedString(relationData)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    objectCode: ").append(toIndentedString(objectCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relation_data");
    openapiFields.add("user_ids");
    openapiFields.add("relation_type");
    openapiFields.add("is_default");
    openapiFields.add("node_id");
    openapiFields.add("object_code");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user_ids");
    openapiRequiredFields.add("node_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NodeUserPair
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeUserPair.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeUserPair is not found in the empty JSON string", NodeUserPair.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeUserPair.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("relation_data") != null && !jsonObj.get("relation_data").isJsonNull()) && !jsonObj.get("relation_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relation_data").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("user_ids").toString()));
      }
      if ((jsonObj.get("relation_type") != null && !jsonObj.get("relation_type").isJsonNull()) && !jsonObj.get("relation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relation_type").toString()));
      }
      if ((jsonObj.get("is_default") != null && !jsonObj.get("is_default").isJsonNull()) && !jsonObj.get("is_default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_default").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("object_code") != null && !jsonObj.get("object_code").isJsonNull()) && !jsonObj.get("object_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_code").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeUserPair.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeUserPair' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeUserPair> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeUserPair.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeUserPair>() {
           @Override
           public void write(JsonWriter out, NodeUserPair value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeUserPair read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeUserPair given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeUserPair
  * @throws IOException if the JSON string is invalid with respect to NodeUserPair
  */
  public static NodeUserPair fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeUserPair.class);
  }

 /**
  * Convert an instance of NodeUserPair to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

