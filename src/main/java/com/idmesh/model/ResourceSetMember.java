/*
 * IDMesh-Dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.idmesh.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.idmesh.model.ResourceSetMemberResourceActions;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.idmesh.JSON;

/**
 * ResourceSetMember
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResourceSetMember {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SET_ID = "set_id";
  @SerializedName(SERIALIZED_NAME_SET_ID)
  private String setId;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "application_id";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "application_name";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_IS_GLOBAL = "is_global";
  @SerializedName(SERIALIZED_NAME_IS_GLOBAL)
  private Boolean isGlobal;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_CODE = "resource_code";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CODE)
  private String resourceCode;

  public static final String SERIALIZED_NAME_RESOURCE_SCOPE = "resource_scope";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SCOPE)
  private String resourceScope;

  public static final String SERIALIZED_NAME_RESOURCE_ACTIONS = "resource_actions";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ACTIONS)
  private ResourceSetMemberResourceActions resourceActions;

  public static final String SERIALIZED_NAME_SELECTED_RESOURCE_ACTIONS = "selected_resource_actions";
  @SerializedName(SERIALIZED_NAME_SELECTED_RESOURCE_ACTIONS)
  private List<String> selectedResourceActions;

  public static final String SERIALIZED_NAME_MATCH_ALL_RESOURCE_ACTIONS = "match_all_resource_actions";
  @SerializedName(SERIALIZED_NAME_MATCH_ALL_RESOURCE_ACTIONS)
  private Boolean matchAllResourceActions;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "time_modified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public ResourceSetMember() {
  }
   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }

   /**
   * Get setId
   * @return setId
  **/
  @javax.annotation.Nullable
  public String getSetId() {
    return setId;
  }


  public void setSetId(String setId) {
    this.setId = setId;
  }

   /**
   * Get developerId
   * @return developerId
  **/
  @javax.annotation.Nullable
  public String getDeveloperId() {
    return developerId;
  }


  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }


  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }


  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

   /**
   * Get applicationId
   * @return applicationId
  **/
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }


  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }


  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

   /**
   * Get isGlobal
   * @return isGlobal
  **/
  @javax.annotation.Nullable
  public Boolean getIsGlobal() {
    return isGlobal;
  }


  public void setIsGlobal(Boolean isGlobal) {
    this.isGlobal = isGlobal;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }


  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

   /**
   * Get resourceCode
   * @return resourceCode
  **/
  @javax.annotation.Nullable
  public String getResourceCode() {
    return resourceCode;
  }


  public void setResourceCode(String resourceCode) {
    this.resourceCode = resourceCode;
  }

   /**
   * Get resourceScope
   * @return resourceScope
  **/
  @javax.annotation.Nullable
  public String getResourceScope() {
    return resourceScope;
  }


  public void setResourceScope(String resourceScope) {
    this.resourceScope = resourceScope;
  }

   /**
   * Get resourceActions
   * @return resourceActions
  **/
  @javax.annotation.Nullable
  public ResourceSetMemberResourceActions getResourceActions() {
    return resourceActions;
  }


  public void setResourceActions(ResourceSetMemberResourceActions resourceActions) {
    this.resourceActions = resourceActions;
  }

   /**
   * Get selectedResourceActions
   * @return selectedResourceActions
  **/
  @javax.annotation.Nullable
  public List<String> getSelectedResourceActions() {
    return selectedResourceActions;
  }


  public void setSelectedResourceActions(List<String> selectedResourceActions) {
    this.selectedResourceActions = selectedResourceActions;
  }

   /**
   * Get matchAllResourceActions
   * @return matchAllResourceActions
  **/
  @javax.annotation.Nonnull
  public Boolean getMatchAllResourceActions() {
    return matchAllResourceActions;
  }


  public void setMatchAllResourceActions(Boolean matchAllResourceActions) {
    this.matchAllResourceActions = matchAllResourceActions;
  }

   /**
   * Get timeModified
   * @return timeModified
  **/
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }


  public void setTimeModified(String timeModified) {
    this.timeModified = timeModified;
  }

   /**
   * Get timeCreated
   * @return timeCreated
  **/
  @javax.annotation.Nullable
  public String getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceSetMember resourceSetMember = (ResourceSetMember) o;
    return Objects.equals(this.id, resourceSetMember.id) &&
        Objects.equals(this.setId, resourceSetMember.setId) &&
        Objects.equals(this.developerId, resourceSetMember.developerId) &&
        Objects.equals(this.tenantId, resourceSetMember.tenantId) &&
        Objects.equals(this.resourceId, resourceSetMember.resourceId) &&
        Objects.equals(this.applicationId, resourceSetMember.applicationId) &&
        Objects.equals(this.applicationName, resourceSetMember.applicationName) &&
        Objects.equals(this.isGlobal, resourceSetMember.isGlobal) &&
        Objects.equals(this.resourceType, resourceSetMember.resourceType) &&
        Objects.equals(this.resourceCode, resourceSetMember.resourceCode) &&
        Objects.equals(this.resourceScope, resourceSetMember.resourceScope) &&
        Objects.equals(this.resourceActions, resourceSetMember.resourceActions) &&
        Objects.equals(this.selectedResourceActions, resourceSetMember.selectedResourceActions) &&
        Objects.equals(this.matchAllResourceActions, resourceSetMember.matchAllResourceActions) &&
        Objects.equals(this.timeModified, resourceSetMember.timeModified) &&
        Objects.equals(this.timeCreated, resourceSetMember.timeCreated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, setId, developerId, tenantId, resourceId, applicationId, applicationName, isGlobal, resourceType, resourceCode, resourceScope, resourceActions, selectedResourceActions, matchAllResourceActions, timeModified, timeCreated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceSetMember {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    setId: ").append(toIndentedString(setId)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    isGlobal: ").append(toIndentedString(isGlobal)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceCode: ").append(toIndentedString(resourceCode)).append("\n");
    sb.append("    resourceScope: ").append(toIndentedString(resourceScope)).append("\n");
    sb.append("    resourceActions: ").append(toIndentedString(resourceActions)).append("\n");
    sb.append("    selectedResourceActions: ").append(toIndentedString(selectedResourceActions)).append("\n");
    sb.append("    matchAllResourceActions: ").append(toIndentedString(matchAllResourceActions)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("set_id");
    openapiFields.add("developer_id");
    openapiFields.add("tenant_id");
    openapiFields.add("resource_id");
    openapiFields.add("application_id");
    openapiFields.add("application_name");
    openapiFields.add("is_global");
    openapiFields.add("resource_type");
    openapiFields.add("resource_code");
    openapiFields.add("resource_scope");
    openapiFields.add("resource_actions");
    openapiFields.add("selected_resource_actions");
    openapiFields.add("match_all_resource_actions");
    openapiFields.add("time_modified");
    openapiFields.add("time_created");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("match_all_resource_actions");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResourceSetMember
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceSetMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceSetMember is not found in the empty JSON string", ResourceSetMember.openapiRequiredFields.toString()));
        }
      }


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceSetMember.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("set_id") != null && !jsonObj.get("set_id").isJsonNull()) && !jsonObj.get("set_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `set_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("set_id").toString()));
      }
      if ((jsonObj.get("developer_id") != null && !jsonObj.get("developer_id").isJsonNull()) && !jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if ((jsonObj.get("tenant_id") != null && !jsonObj.get("tenant_id").isJsonNull()) && !jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if ((jsonObj.get("resource_id") != null && !jsonObj.get("resource_id").isJsonNull()) && !jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if ((jsonObj.get("application_id") != null && !jsonObj.get("application_id").isJsonNull()) && !jsonObj.get("application_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_id").toString()));
      }
      if ((jsonObj.get("application_name") != null && !jsonObj.get("application_name").isJsonNull()) && !jsonObj.get("application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_name").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("resource_code") != null && !jsonObj.get("resource_code").isJsonNull()) && !jsonObj.get("resource_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_code").toString()));
      }
      if ((jsonObj.get("resource_scope") != null && !jsonObj.get("resource_scope").isJsonNull()) && !jsonObj.get("resource_scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_scope").toString()));
      }
      // validate the optional field `resource_actions`
      if (jsonObj.get("resource_actions") != null && !jsonObj.get("resource_actions").isJsonNull()) {
        ResourceSetMemberResourceActions.validateJsonElement(jsonObj.get("resource_actions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selected_resource_actions") != null && !jsonObj.get("selected_resource_actions").isJsonNull() && !jsonObj.get("selected_resource_actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_resource_actions` to be an array in the JSON string but got `%s`", jsonObj.get("selected_resource_actions").toString()));
      }
      if ((jsonObj.get("time_modified") != null && !jsonObj.get("time_modified").isJsonNull()) && !jsonObj.get("time_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_modified").toString()));
      }
      if ((jsonObj.get("time_created") != null && !jsonObj.get("time_created").isJsonNull()) && !jsonObj.get("time_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_created").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceSetMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceSetMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceSetMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceSetMember.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceSetMember>() {
           @Override
           public void write(JsonWriter out, ResourceSetMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceSetMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResourceSetMember given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResourceSetMember
  * @throws IOException if the JSON string is invalid with respect to ResourceSetMember
  */
  public static ResourceSetMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceSetMember.class);
  }

 /**
  * Convert an instance of ResourceSetMember to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

